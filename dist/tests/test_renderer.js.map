{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_renderer.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport { TestCaseResult, TestResult, TestStatus, TestSuiteResult } from \"./test_result.js\";\nimport { TestMark } from \"./test_suite.js\";\nimport { Colors } from \"../infrastructure/colors.js\";\nimport path from \"node:path\";\nimport { AssertionError } from \"node:assert\";\nimport util from \"node:util\";\n\nconst headerColor = Colors.brightWhite.bold;\nconst highlightColor = Colors.brightWhite;\nconst errorMessageColor = Colors.brightRed;\nconst timeoutMessageColor = Colors.purple;\nconst expectedColor = Colors.green;\nconst actualColor = Colors.brightRed;\nconst diffColor = Colors.brightYellow.bold;\n\nconst PROGRESS_RENDERING = {\n\t[TestStatus.pass]: Colors.white(\".\"),\n\t[TestStatus.fail]: Colors.brightRed.inverse(\"X\"),\n\t[TestStatus.skip]: Colors.cyan.dim(\"_\"),\n\t[TestStatus.timeout]: Colors.purple.inverse(\"!\"),\n};\n\nconst DESCRIPTION_RENDERING = {\n\t[TestStatus.pass]: Colors.green(\"passed\"),\n\t[TestStatus.fail]: Colors.brightRed(\"failed\"),\n\t[TestStatus.skip]: Colors.brightCyan(\"skipped\"),\n\t[TestStatus.timeout]: Colors.brightPurple(\"timeout\"),\n};\n\ninterface NodeError extends Error {\n\tstack: string;\n}\n\nexport class TestRenderer {\n\n\tstatic create() {\n\t\treturn new TestRenderer();\n\t}\n\n\t/**\n\t * @returns {string} A single character for each test: a dot for passed, a red X for failed, etc.\n\t */\n\trenderAsCharacters(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\treturn PROGRESS_RENDERING[testResult.status];\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A line for each test with the status (passed, failed, etc.) and the test name.\n\t */\n\trenderAsSingleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\tconst status = this.renderStatusAsSingleWord(testResult);\n\t\t\tconst name = this.renderNameOnOneLine(testResult);\n\n\t\t\treturn `${status} ${name}`;\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A full explanation of this test result.\n\t */\n\trenderAsMultipleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\\n\\n\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\tconst name = this.renderNameOnMultipleLines(testResult);\n\t\t\tconst status = this.renderStatusWithMultiLineDetails(testResult);\n\n\t\t\treturn `${name}\\n${status}`;\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A line for each test that's marked (.only, .skip, etc.) with the mark and the test name.\n\t */\n\trenderMarksAsLines(testResults: TestResult | TestResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testResults, \"\\n\", TestResult, (testResult: TestResult) => {\n\t\t\tconst mark = this.renderMarkAsSingleWord(testResult);\n\t\t\tconst name = this.renderNameOnOneLine(testResult);\n\n\t\t\tif (mark === \"\") return \"\";\n\t\t\telse return `${mark} ${name}`;\n\t\t});\n\n\t}\n\n\t/**\n\t * @returns {string} The name of the test, including parent suites and filename, rendered as a single line.\n\t */\n\trenderNameOnOneLine(testCaseResult: TestResult) {\n\t\tensure.signature(arguments, [ TestResult ]);\n\n\t\tconst filename = testCaseResult.filename === undefined\n\t\t\t? \"\"\n\t\t\t: highlightColor(path.basename(testCaseResult.filename)) + \" » \";\n\t\tconst name = this.#normalizedName(testCaseResult).join(\" » \");\n\n\t\treturn `${filename}${name}`;\n\t}\n\n\t/**\n\t * @returns {string} The name of the test, including parent suites and filename, with the suites and filename\n\t *   rendered on a separate line.\n\t */\n\trenderNameOnMultipleLines(testResult: TestResult): string {\n\t\tensure.signature(arguments, [ TestResult ]);\n\n\t\tconst name = this.#normalizedName(testResult);\n\n\t\tconst suites = name.slice(0, name.length - 1);\n\t\tconst test = name[name.length - 1];\n\t\tif (testResult.filename !== undefined) suites.unshift(path.basename(testResult.filename));\n\n\t\tconst suitesName = suites.length > 0 ? suites.join(\" » \") + \"\\n» \" : \"\";\n\t\treturn headerColor(suitesName + test);\n\t}\n\n\t#normalizedName(testResult: TestResult) {\n\t\treturn testResult.name.length === 0 ? [ \"(no name)\" ] : [ ...testResult.name ];\n\t}\n\n\t/**\n\t * @returns {string} The color-coded status of the test.\n\t */\n\trenderStatusAsSingleWord(testCaseResult: TestCaseResult) {\n\t\treturn DESCRIPTION_RENDERING[testCaseResult.status];\n\t}\n\n\trenderStatusWithMultiLineDetails(testCaseResult: TestCaseResult): string {\n\t\tswitch (testCaseResult.status) {\n\t\t\tcase TestStatus.pass:\n\t\t\tcase TestStatus.skip:\n\t\t\t\treturn DESCRIPTION_RENDERING[testCaseResult.status];\n\t\t\tcase TestStatus.fail:\n\t\t\t\treturn this.#renderFailure(testCaseResult);\n\t\t\tcase TestStatus.timeout:\n\t\t\t\treturn timeoutMessageColor(`Timed out after ${testCaseResult.timeout}ms`);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unrecognized test result status: ${testCaseResult.status}`);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string} The color-coded mark of the test result (.only, etc.), or \"\" if the test result wasn't marked.\n\t */\n\trenderMarkAsSingleWord(testResult: TestResult) {\n\t\tswitch (testResult.mark) {\n\t\t\tcase TestMark.none: return \"(no mark)\";\n\t\t\tcase TestMark.skip: return Colors.brightCyan(\".skip\");\n\t\t\tcase TestMark.only: return Colors.brightCyan(\".only\");\n\t\t\tdefault: ensure.unreachable(`Unrecognized test mark: ${testResult.mark}`);\n\t\t}\n\t}\n\n\t#renderFailure(testCaseResult: TestCaseResult): string {\n\t\tconst name = this.#normalizedName(testCaseResult).pop();\n\t\tconst resultError = testCaseResult.error as { stack: unknown, message: unknown };\n\n\t\tlet error;\n\t\tif (resultError?.stack !== undefined) {\n\t\t\terror = `${this.renderStack(testCaseResult)}`;\n\t\t\tif (resultError?.message !== undefined) {\n\t\t\t\terror +=\n\t\t\t\t\t\"\\n\\n\" +\n\t\t\t\t\thighlightColor(`${name} »\\n`) +\n\t\t\t\t\terrorMessageColor(`${resultError.message}`);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\terror = errorMessageColor(`${testCaseResult.error}`);\n\t\t}\n\n\t\tconst diff = (testCaseResult.error instanceof AssertionError) ?\n\t\t\t\"\\n\\n\" + this.renderDiff(testCaseResult.error) :\n\t\t\t\"\";\n\n\t\treturn `${error}${diff}`;\n\t}\n\n\t/**\n\t * @returns {string} The stack trace for the test, or \"\" if there wasn't one.\n\t */\n\trenderStack(testCaseResult: TestCaseResult): string {\n\t\tconst testCaseError = testCaseResult.error as undefined | { stack: unknown };\n\t\tif (testCaseError?.stack === undefined) return \"\";\n\n\t\tconst stack = testCaseError.stack;\n\t\tif (typeof stack !== \"string\") return `${stack}`;\n\n\t\tconst filename = testCaseResult.filename;\n\t\tif (filename === undefined) return stack;\n\n\t\tconst lines = stack.split(\"\\n\");\n\t\tconst highlightedLines = lines.map(line => {\n\t\t\tif (!line.includes(filename)) return line;\n\n\t\t\tline = line.replace(/    at/, \"--> at\");\t// this code is vulnerable to changes in Node.js rendering\n\t\t\treturn headerColor(line);\n\t\t});\n\t\treturn highlightedLines.join(\"\\n\");\n\t}\n\n\t/**\n\t * @returns {string} A comparison of expected and actual values, or \"\" if there weren't any.\n\t */\n\trenderDiff(error: AssertionError): string {\n\t\tif (error.expected === undefined && error.actual === undefined) return \"\";\n\t\tif (error.expected === null && error.actual === null) return \"\";\n\n\t\tconst expected = util.inspect(error.expected, { depth: Infinity }).split(\"\\n\");\n\t\tconst actual = util.inspect(error.actual, { depth: Infinity }).split(\"\\n\");\n\t\tif (expected.length > 1 || actual.length > 1) {\n\t\t\tfor (let i = 0; i < Math.max(expected.length, actual.length); i++) {\n\t\t\t\tconst expectedLine = expected[i];\n\t\t\t\tconst actualLine = actual[i];\n\n\t\t\t\tif (expectedLine !== actualLine) {\n\t\t\t\t\tif (expected[i] !== undefined) expected[i] = diffColor(expected[i]!);\n\t\t\t\t\tif (actual[i] !== undefined) actual[i] = diffColor(actual[i]!);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn \"\" +\n\t\t\texpectedColor(\"expected: \") + expected.join(\"\\n\") + \"\\n\" +\n\t\t\tactualColor(\"actual:   \") + actual.join(\"\\n\");\n\t}\n\n\t#renderMultipleResults<T>(\n\t\ttestResults: T | T[],\n\t\tseparator: string,\n\t\texpectedType: Function,   // eslint-disable-line @typescript-eslint/no-unsafe-function-type\n\t\trenderFn: (testResult: T) => string,\n\t): string {\n\t\tif (!Array.isArray(testResults)) testResults = [ testResults ];\n\t\ttestResults.forEach((result, i) => ensure.type(result, expectedType, `testResult[${i}]`));\n\n\t\treturn testResults.map(result => renderFn(result)).join(separator);\n\t}\n\n}"],"names":["ensure","TestCaseResult","TestResult","TestStatus","TestSuiteResult","TestMark","Colors","path","AssertionError","util","headerColor","brightWhite","bold","highlightColor","errorMessageColor","brightRed","timeoutMessageColor","purple","expectedColor","green","actualColor","diffColor","brightYellow","PROGRESS_RENDERING","pass","white","fail","inverse","skip","cyan","dim","timeout","DESCRIPTION_RENDERING","brightCyan","brightPurple","TestRenderer","create","renderAsCharacters","testCaseResults","signature","arguments","Array","testResult","status","renderAsSingleLines","renderStatusAsSingleWord","name","renderNameOnOneLine","renderAsMultipleLines","renderNameOnMultipleLines","renderStatusWithMultiLineDetails","renderMarksAsLines","testResults","mark","renderMarkAsSingleWord","testCaseResult","filename","undefined","basename","join","suites","slice","length","test","unshift","suitesName","Error","none","only","unreachable","pop","resultError","error","stack","renderStack","message","diff","renderDiff","testCaseError","lines","split","highlightedLines","map","line","includes","replace","expected","actual","inspect","depth","Infinity","i","Math","max","expectedLine","actualLine","separator","expectedType","renderFn","isArray","forEach","result","type"],"mappings":"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"}