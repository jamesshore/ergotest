{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_renderer.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport { TestCaseResult, TestMark, TestMarkValue, TestResult, TestStatus, TestSuiteResult } from \"./test_result.js\";\nimport { ColorFn, Colors } from \"../infrastructure/colors.js\";\nimport path from \"node:path\";\nimport { AssertionError } from \"node:assert\";\nimport util from \"node:util\";\n\nconst headerColor = Colors.brightWhite.bold;\nconst highlightColor = Colors.brightWhite;\nconst errorMessageColor = Colors.brightRed;\nconst timeoutMessageColor = Colors.purple;\nconst expectedColor = Colors.green;\nconst actualColor = Colors.brightRed;\nconst diffColor = Colors.brightYellow.bold;\nconst summaryColor = Colors.brightWhite.dim;\n\n/**\n * Converts an error into a detailed description of a test failure. Intended to be used with {@link TestOptions}\n * rather than called directly.\n * @param {string[]} name The names of the test\n * @param {unknown} error The error that occurred\n * @param {TestMarkValue} mark Whether the test was marked '.skip', '.only', etc.\n * @param {string} [filename] The file that contained the test, if known\n * @return The description\n */\nexport function renderError(name: string[], error: unknown, mark: TestMarkValue, filename?: string) {\n\tensure.signature(arguments, [ Array, ensure.ANY_TYPE, String, [ undefined, String ] ]);\n\n\tconst nameFoo = normalizeName(name).pop();\n\n\tlet renderedError;\n\tif (error instanceof Error && error?.stack !== undefined) {\n\t\trenderedError = renderStack(error, filename);\n\t\tif (error.message !== undefined && error.message !== \"\") {\n\t\t\trenderedError +=\n\t\t\t\t\"\\n\\n\" +\n\t\t\t\thighlightColor(`${nameFoo} »\\n`) +\n\t\t\t\terrorMessageColor(`${error.message}`);\n\t\t}\n\t}\n\telse if (typeof error === \"string\") {\n\t\trenderedError = errorMessageColor(error);\n\t}\n\telse {\n\t\trenderedError = errorMessageColor(util.inspect(error));\n\t}\n\n\tconst diff = (error instanceof AssertionError) ?\n\t\t\"\\n\\n\" + renderDiff(error) :\n\t\t\"\";\n\n\treturn `${renderedError}${diff}`;\n}\n\n/**\n * Provides an error's stack trace, or \"\" if there wasn't one. If `filename` is provided, the stack frames that\n * correspond to the filename will be highlighted.\n * @param {unknown} error The error\n * @param {string} [filename] The filename to highlight\n * @returns {string} The stack trace for the test, or \"\" if there wasn't one.\n */\nexport function renderStack(error: Error, filename?: string): string {\n\tensure.signature(arguments, [ ensure.ANY_TYPE, [ undefined, String ] ]);\n\n\tconst stack = error instanceof AssertionError ?\n\t\terror.stack ?? \"\" :\n\t\tutil.inspect(error);\n\n\tif (filename === undefined) return stack;\n\n\tconst lines = stack.split(\"\\n\");\n\tconst highlightedLines = lines.map(line => {\n\t\tif (!line.includes(filename)) return line;\n\n\t\tline = line.replace(/    at/, \"--> at\");\t// this code is vulnerable to changes in Node.js rendering\n\t\treturn headerColor(line);\n\t});\n\treturn highlightedLines.join(\"\\n\");\n}\n\n/**\n *\n * @returns {string} A comparison of expected and actual values, or \"\" if there weren't any.\n */\nexport function renderDiff(error: AssertionError): string {\n\tensure.signature(arguments, [ AssertionError ]);\n\n\tif (error.expected === undefined && error.actual === undefined) return \"\";\n\tif (error.expected === null && error.actual === null) return \"\";\n\n\tconst expected = util.inspect(error.expected, { depth: Infinity }).split(\"\\n\");\n\tconst actual = util.inspect(error.actual, { depth: Infinity }).split(\"\\n\");\n\tif (expected.length > 1 || actual.length > 1) {\n\t\tfor (let i = 0; i < Math.max(expected.length, actual.length); i++) {\n\t\t\tconst expectedLine = expected[i];\n\t\t\tconst actualLine = actual[i];\n\n\t\t\tif (expectedLine !== actualLine) {\n\t\t\t\tif (expected[i] !== undefined) expected[i] = diffColor(expected[i]!);\n\t\t\t\tif (actual[i] !== undefined) actual[i] = diffColor(actual[i]!);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn \"\" +\n\t\texpectedColor(\"expected: \") + expected.join(\"\\n\") + \"\\n\" +\n\t\tactualColor(\"actual:   \") + actual.join(\"\\n\");\n}\n\nexport class TestRenderer {\n\n\tstatic create() {\n\t\treturn new TestRenderer();\n\t}\n\n\t// can't use a normal constant due to a circular dependency between TestResult and TestRenderer\n\tstatic get #PROGRESS_RENDERING() {\n\t\treturn {\n\t\t\t[TestStatus.pass]: \".\",\n\t\t\t[TestStatus.fail]: Colors.brightRed.inverse(\"X\"),\n\t\t\t[TestStatus.skip]: Colors.cyan.dim(\"_\"),\n\t\t\t[TestStatus.timeout]: Colors.purple.inverse(\"!\"),\n\t\t};\n\t}\n\n\t// can't use a normal constant due to a circular dependency between TestResult and TestRenderer\n\tstatic get #DESCRIPTION_RENDERING() {\n\t\treturn {\n\t\t\t[TestStatus.pass]: Colors.green(\"passed\"),\n\t\t\t[TestStatus.fail]: Colors.brightRed(\"failed\"),\n\t\t\t[TestStatus.skip]: Colors.brightCyan(\"skipped\"),\n\t\t\t[TestStatus.timeout]: Colors.brightPurple(\"timeout\"),\n\t\t};\n\t}\n\n\t/**\n\t * @param {TestSuiteResult} testSuiteResult The test suite to render.\n\t * @param {number} [elapsedMs] The total time required to run the test suite, in milliseconds.\n\t * @returns {string} A summary of the results of a test suite, including the average time required per test if\n\t *   `elapsedMs` is defined.\n\t */\n\trenderSummary(testSuiteResult: TestSuiteResult, elapsedMs?: number): string {\n\t\tensure.signature(arguments, [ TestSuiteResult, [ undefined, Number ]]);\n\n\t\tconst { total, pass, fail, timeout, skip } = testSuiteResult.count();\n\n\t\tconst renders = [\n\t\t\trenderCount(fail, \"failed\", Colors.brightRed),\n\t\t\trenderCount(timeout, \"timed out\", Colors.purple),\n\t\t\trenderCount(skip, \"skipped\", Colors.cyan),\n\t\t\trenderCount(pass, \"passed\", Colors.green),\n\t\t\trenderMsEach(elapsedMs, total, skip),\n\t\t].filter(render => render !== \"\");\n\n\t\treturn summaryColor(\"(\") + renders.join(summaryColor(\"; \")) + summaryColor(\")\");\n\n\t\tfunction renderCount(number: number, description: string, color: ColorFn): string {\n\t\t\tif (number === 0) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn color(`${number} ${description}`);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderMsEach(elapsedMs: number | undefined, total: number, skip: number): string {\n\t\t\tif (total - skip === 0) return summaryColor(\"none ran\");\n\t\t\tif (elapsedMs === undefined) return \"\";\n\n\t\t\tconst msEach = (elapsedMs / (total - skip)).toFixed(1);\n\t\t\treturn summaryColor(`${msEach}ms avg.`);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string} A single character for each test: a dot for passed, a red X for failed, etc.\n\t */\n\trenderAsCharacters(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\treturn (TestRenderer.#PROGRESS_RENDERING)[testResult.status];\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A line for each test with the status (passed, failed, etc.) and the test name.\n\t */\n\trenderAsSingleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\tconst status = this.renderStatusAsSingleWord(testResult);\n\t\t\tconst name = this.renderNameOnOneLine(testResult);\n\n\t\t\treturn `${status} ${name}`;\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A full explanation of this test result.\n\t */\n\trenderAsMultipleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\\n\\n\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\tconst name = this.renderNameOnMultipleLines(testResult);\n\t\t\tconst status = this.renderStatusWithMultiLineDetails(testResult);\n\n\t\t\treturn `${name}\\n\\n${status}`;\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A line for each test that's marked (.only, .skip, etc.) with the mark and the test name.\n\t */\n\trenderMarksAsLines(testResults: TestResult | TestResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testResults, \"\\n\", TestResult, (testResult: TestResult) => {\n\t\t\tconst mark = this.renderMarkAsSingleWord(testResult);\n\t\t\tconst name = this.renderNameOnOneLine(testResult);\n\n\t\t\tif (mark === \"\") return \"\";\n\t\t\telse return `${mark} ${name}`;\n\t\t});\n\n\t}\n\n\t/**\n\t * @returns {string} The name of the test, including parent suites and filename, rendered as a single line.\n\t */\n\trenderNameOnOneLine(testCaseResult: TestResult) {\n\t\tensure.signature(arguments, [ TestResult ]);\n\n\t\tconst filename = testCaseResult.filename === undefined\n\t\t\t? \"\"\n\t\t\t: headerColor(path.basename(testCaseResult.filename)) + \" » \";\n\t\tconst name = normalizeNameOld(testCaseResult).join(\" » \");\n\n\t\treturn `${filename}${name}`;\n\t}\n\n\t/**\n\t * @returns {string} The name of the test, including parent suites and filename, with the suites and filename\n\t *   rendered on a separate line.\n\t */\n\trenderNameOnMultipleLines(testResult: TestResult): string {\n\t\tensure.signature(arguments, [ TestResult ]);\n\n\t\tconst name = normalizeNameOld(testResult);\n\n\t\tconst suites = name.slice(0, name.length - 1);\n\t\tconst test = name[name.length - 1];\n\t\tif (testResult.filename !== undefined) suites.unshift(path.basename(testResult.filename));\n\n\t\tconst suitesName = suites.length > 0 ? suites.join(\" » \") + \"\\n» \" : \"\";\n\t\treturn headerColor(suitesName + test);\n\t}\n\n\t/**\n\t * @returns {string} The color-coded status of the test.\n\t */\n\trenderStatusAsSingleWord(testCaseResult: TestCaseResult) {\n\t\treturn TestRenderer.#DESCRIPTION_RENDERING[testCaseResult.status];\n\t}\n\n\trenderStatusWithMultiLineDetails(testCaseResult: TestCaseResult): string {\n\t\tswitch (testCaseResult.status) {\n\t\t\tcase TestStatus.pass:\n\t\t\tcase TestStatus.skip:\n\t\t\t\treturn TestRenderer.#DESCRIPTION_RENDERING[testCaseResult.status];\n\t\t\tcase TestStatus.fail:\n\t\t\t\treturn (typeof testCaseResult.errorRender === \"string\") ?\n\t\t\t\t\ttestCaseResult.errorRender :\n\t\t\t\t\tutil.inspect(testCaseResult.errorRender, { depth: Infinity });\n\t\t\tcase TestStatus.timeout:\n\t\t\t\treturn timeoutMessageColor(`Timed out after ${testCaseResult.timeout}ms`);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unrecognized test result status: ${testCaseResult.status}`);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string} The color-coded mark of the test result (.only, etc.), or \"\" if the test result wasn't marked.\n\t */\n\trenderMarkAsSingleWord(testResult: TestResult) {\n\t\tswitch (testResult.mark) {\n\t\t\tcase TestMark.none: return \"(no mark)\";\n\t\t\tcase TestMark.skip: return Colors.brightCyan(\".skip\");\n\t\t\tcase TestMark.only: return Colors.brightCyan(\".only\");\n\t\t\tdefault: ensure.unreachable(`Unrecognized test mark: ${testResult.mark}`);\n\t\t}\n\t}\n\n\t#renderMultipleResults<T>(\n\t\ttestResults: T | T[],\n\t\tseparator: string,\n\t\texpectedType: Function,   // eslint-disable-line @typescript-eslint/no-unsafe-function-type\n\t\trenderFn: (testResult: T) => string,\n\t): string {\n\t\tif (!Array.isArray(testResults)) testResults = [ testResults ];\n\t\ttestResults.forEach((result, i) => ensure.type(result, expectedType, `testResult[${i}]`));\n\n\t\treturn testResults.map(result => renderFn(result)).join(separator);\n\t}\n\n}\n\nfunction normalizeNameOld(testResult: TestResult) {\n\treturn testResult.name.length === 0 ? [ \"(no name)\" ] : [ ...testResult.name ];\n}\n\nfunction normalizeName(name: string[]) {\n\treturn name.length === 0 ? [ \"(no name)\" ] : [ ...name ];\n}\n"],"names":["ensure","TestCaseResult","TestMark","TestResult","TestStatus","TestSuiteResult","Colors","path","AssertionError","util","headerColor","brightWhite","bold","highlightColor","errorMessageColor","brightRed","timeoutMessageColor","purple","expectedColor","green","actualColor","diffColor","brightYellow","summaryColor","dim","renderError","name","error","mark","filename","signature","arguments","Array","ANY_TYPE","String","undefined","nameFoo","normalizeName","pop","renderedError","Error","stack","renderStack","message","inspect","diff","renderDiff","lines","split","highlightedLines","map","line","includes","replace","join","expected","actual","depth","Infinity","length","i","Math","max","expectedLine","actualLine","TestRenderer","create","pass","fail","inverse","skip","cyan","timeout","brightCyan","brightPurple","renderSummary","testSuiteResult","elapsedMs","Number","total","count","renders","renderCount","renderMsEach","filter","render","number","description","color","msEach","toFixed","renderAsCharacters","testCaseResults","testResult","status","renderAsSingleLines","renderStatusAsSingleWord","renderNameOnOneLine","renderAsMultipleLines","renderNameOnMultipleLines","renderStatusWithMultiLineDetails","renderMarksAsLines","testResults","renderMarkAsSingleWord","testCaseResult","basename","normalizeNameOld","suites","slice","test","unshift","suitesName","errorRender","none","only","unreachable","separator","expectedType","renderFn","isArray","forEach","result","type"],"mappings":"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"}