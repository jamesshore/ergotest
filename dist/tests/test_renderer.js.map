{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_renderer.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport { TestCaseResult, TestResult, TestStatus, TestSuiteResult } from \"./test_result.js\";\nimport { TestMark } from \"./test_suite.js\";\nimport { ColorFn, Colors } from \"../infrastructure/colors.js\";\nimport path from \"node:path\";\nimport { AssertionError } from \"node:assert\";\nimport util from \"node:util\";\n\nconst headerColor = Colors.brightWhite.bold;\nconst highlightColor = Colors.brightWhite;\nconst errorMessageColor = Colors.brightRed;\nconst timeoutMessageColor = Colors.purple;\nconst expectedColor = Colors.green;\nconst actualColor = Colors.brightRed;\nconst diffColor = Colors.brightYellow.bold;\nconst summaryColor = Colors.brightWhite.dim;\n\nexport class TestRenderer {\n\n\tstatic create() {\n\t\treturn new TestRenderer();\n\t}\n\n\t// can't use a normal constant due to a circular dependency between TestResult and TestRenderer\n\tstatic get #PROGRESS_RENDERING() {\n\t\treturn {\n\t\t\t[TestStatus.pass]: \".\",\n\t\t\t[TestStatus.fail]: Colors.brightRed.inverse(\"X\"),\n\t\t\t[TestStatus.skip]: Colors.cyan.dim(\"_\"),\n\t\t\t[TestStatus.timeout]: Colors.purple.inverse(\"!\"),\n\t\t};\n\t}\n\n\t// can't use a normal constant due to a circular dependency between TestResult and TestRenderer\n\tstatic get #DESCRIPTION_RENDERING() {\n\t\treturn {\n\t\t\t[TestStatus.pass]: Colors.green(\"passed\"),\n\t\t\t[TestStatus.fail]: Colors.brightRed(\"failed\"),\n\t\t\t[TestStatus.skip]: Colors.brightCyan(\"skipped\"),\n\t\t\t[TestStatus.timeout]: Colors.brightPurple(\"timeout\"),\n\t\t};\n\t}\n\n\t/**\n\t * @param {TestSuiteResult} testSuiteResult The test suite to render.\n\t * @param {number} elapsedMs The total time required to run the test suite, in milliseconds.\n\t * @returns {string} A summary of the results of a test suite, including the average time required per test.\n\t */\n\trenderSummary(testSuiteResult: TestSuiteResult, elapsedMs?: number): string {\n\t\tensure.signature(arguments, [ TestSuiteResult, [ undefined, Number ]]);\n\n\t\tconst { total, pass, fail, timeout, skip } = testSuiteResult.count();\n\n\t\tconst renders = [\n\t\t\trenderCount(fail, \"failed\", Colors.brightRed),\n\t\t\trenderCount(timeout, \"timed out\", Colors.purple),\n\t\t\trenderCount(skip, \"skipped\", Colors.cyan),\n\t\t\trenderCount(pass, \"passed\", Colors.green),\n\t\t\trenderMsEach(elapsedMs, total, skip),\n\t\t].filter(render => render !== \"\");\n\n\t\treturn summaryColor(\"(\") + renders.join(summaryColor(\"; \")) + summaryColor(\")\");\n\n\t\tfunction renderCount(number: number, description: string, color: ColorFn): string {\n\t\t\tif (number === 0) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn color(`${number} ${description}`);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderMsEach(elapsedMs: number | undefined, total: number, skip: number): string {\n\t\t\tif (total - skip === 0) return summaryColor(\"none ran\");\n\t\t\tif (elapsedMs === undefined) return \"\";\n\n\t\t\tconst msEach = (elapsedMs / (total - skip)).toFixed(1);\n\t\t\treturn summaryColor(`${msEach}ms avg.`);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string} A single character for each test: a dot for passed, a red X for failed, etc.\n\t */\n\trenderAsCharacters(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\treturn (TestRenderer.#PROGRESS_RENDERING)[testResult.status];\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A line for each test with the status (passed, failed, etc.) and the test name.\n\t */\n\trenderAsSingleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\tconst status = this.renderStatusAsSingleWord(testResult);\n\t\t\tconst name = this.renderNameOnOneLine(testResult);\n\n\t\t\treturn `${status} ${name}`;\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A full explanation of this test result.\n\t */\n\trenderAsMultipleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testCaseResults, \"\\n\\n\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\tconst name = this.renderNameOnMultipleLines(testResult);\n\t\t\tconst status = this.renderStatusWithMultiLineDetails(testResult);\n\n\t\t\treturn `${name}\\n\\n${status}`;\n\t\t});\n\t}\n\n\t/**\n\t * @returns {string} A line for each test that's marked (.only, .skip, etc.) with the mark and the test name.\n\t */\n\trenderMarksAsLines(testResults: TestResult | TestResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\treturn this.#renderMultipleResults(testResults, \"\\n\", TestResult, (testResult: TestResult) => {\n\t\t\tconst mark = this.renderMarkAsSingleWord(testResult);\n\t\t\tconst name = this.renderNameOnOneLine(testResult);\n\n\t\t\tif (mark === \"\") return \"\";\n\t\t\telse return `${mark} ${name}`;\n\t\t});\n\n\t}\n\n\t/**\n\t * @returns {string} The name of the test, including parent suites and filename, rendered as a single line.\n\t */\n\trenderNameOnOneLine(testCaseResult: TestResult) {\n\t\tensure.signature(arguments, [ TestResult ]);\n\n\t\tconst filename = testCaseResult.filename === undefined\n\t\t\t? \"\"\n\t\t\t: headerColor(path.basename(testCaseResult.filename)) + \" » \";\n\t\tconst name = this.#normalizedName(testCaseResult).join(\" » \");\n\n\t\treturn `${filename}${name}`;\n\t}\n\n\t/**\n\t * @returns {string} The name of the test, including parent suites and filename, with the suites and filename\n\t *   rendered on a separate line.\n\t */\n\trenderNameOnMultipleLines(testResult: TestResult): string {\n\t\tensure.signature(arguments, [ TestResult ]);\n\n\t\tconst name = this.#normalizedName(testResult);\n\n\t\tconst suites = name.slice(0, name.length - 1);\n\t\tconst test = name[name.length - 1];\n\t\tif (testResult.filename !== undefined) suites.unshift(path.basename(testResult.filename));\n\n\t\tconst suitesName = suites.length > 0 ? suites.join(\" » \") + \"\\n» \" : \"\";\n\t\treturn headerColor(suitesName + test);\n\t}\n\n\t#normalizedName(testResult: TestResult) {\n\t\treturn testResult.name.length === 0 ? [ \"(no name)\" ] : [ ...testResult.name ];\n\t}\n\n\t/**\n\t * @returns {string} The color-coded status of the test.\n\t */\n\trenderStatusAsSingleWord(testCaseResult: TestCaseResult) {\n\t\treturn TestRenderer.#DESCRIPTION_RENDERING[testCaseResult.status];\n\t}\n\n\trenderStatusWithMultiLineDetails(testCaseResult: TestCaseResult): string {\n\t\tswitch (testCaseResult.status) {\n\t\t\tcase TestStatus.pass:\n\t\t\tcase TestStatus.skip:\n\t\t\t\treturn TestRenderer.#DESCRIPTION_RENDERING[testCaseResult.status];\n\t\t\tcase TestStatus.fail:\n\t\t\t\treturn this.#renderFailure(testCaseResult);\n\t\t\tcase TestStatus.timeout:\n\t\t\t\treturn timeoutMessageColor(`Timed out after ${testCaseResult.timeout}ms`);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unrecognized test result status: ${testCaseResult.status}`);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string} The color-coded mark of the test result (.only, etc.), or \"\" if the test result wasn't marked.\n\t */\n\trenderMarkAsSingleWord(testResult: TestResult) {\n\t\tswitch (testResult.mark) {\n\t\t\tcase TestMark.none: return \"(no mark)\";\n\t\t\tcase TestMark.skip: return Colors.brightCyan(\".skip\");\n\t\t\tcase TestMark.only: return Colors.brightCyan(\".only\");\n\t\t\tdefault: ensure.unreachable(`Unrecognized test mark: ${testResult.mark}`);\n\t\t}\n\t}\n\n\t#renderFailure(testCaseResult: TestCaseResult): string {\n\t\tconst name = this.#normalizedName(testCaseResult).pop();\n\t\tconst resultError = testCaseResult.error as { stack: unknown, message: unknown };\n\n\t\tlet error;\n\t\tif (resultError?.stack !== undefined) {\n\t\t\terror = `${this.renderStack(testCaseResult)}`;\n\t\t\tif (resultError?.message !== undefined) {\n\t\t\t\terror +=\n\t\t\t\t\t\"\\n\\n\" +\n\t\t\t\t\thighlightColor(`${name} »\\n`) +\n\t\t\t\t\terrorMessageColor(`${resultError.message}`);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\terror = errorMessageColor(`${testCaseResult.error}`);\n\t\t}\n\n\t\tconst diff = (testCaseResult.error instanceof AssertionError) ?\n\t\t\t\"\\n\\n\" + this.renderDiff(testCaseResult.error) :\n\t\t\t\"\";\n\n\t\treturn `${error}${diff}`;\n\t}\n\n\t/**\n\t * @returns {string} The stack trace for the test, or \"\" if there wasn't one.\n\t */\n\trenderStack(testCaseResult: TestCaseResult): string {\n\t\tconst testCaseError = testCaseResult.error as undefined | { stack: unknown };\n\t\tif (testCaseError?.stack === undefined) return \"\";\n\n\t\tconst stack = testCaseError.stack;\n\t\tif (typeof stack !== \"string\") return `${stack}`;\n\n\t\tconst filename = testCaseResult.filename;\n\t\tif (filename === undefined) return stack;\n\n\t\tconst lines = stack.split(\"\\n\");\n\t\tconst highlightedLines = lines.map(line => {\n\t\t\tif (!line.includes(filename)) return line;\n\n\t\t\tline = line.replace(/    at/, \"--> at\");\t// this code is vulnerable to changes in Node.js rendering\n\t\t\treturn headerColor(line);\n\t\t});\n\t\treturn highlightedLines.join(\"\\n\");\n\t}\n\n\t/**\n\t * @returns {string} A comparison of expected and actual values, or \"\" if there weren't any.\n\t */\n\trenderDiff(error: AssertionError): string {\n\t\tif (error.expected === undefined && error.actual === undefined) return \"\";\n\t\tif (error.expected === null && error.actual === null) return \"\";\n\n\t\tconst expected = util.inspect(error.expected, { depth: Infinity }).split(\"\\n\");\n\t\tconst actual = util.inspect(error.actual, { depth: Infinity }).split(\"\\n\");\n\t\tif (expected.length > 1 || actual.length > 1) {\n\t\t\tfor (let i = 0; i < Math.max(expected.length, actual.length); i++) {\n\t\t\t\tconst expectedLine = expected[i];\n\t\t\t\tconst actualLine = actual[i];\n\n\t\t\t\tif (expectedLine !== actualLine) {\n\t\t\t\t\tif (expected[i] !== undefined) expected[i] = diffColor(expected[i]!);\n\t\t\t\t\tif (actual[i] !== undefined) actual[i] = diffColor(actual[i]!);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn \"\" +\n\t\t\texpectedColor(\"expected: \") + expected.join(\"\\n\") + \"\\n\" +\n\t\t\tactualColor(\"actual:   \") + actual.join(\"\\n\");\n\t}\n\n\t#renderMultipleResults<T>(\n\t\ttestResults: T | T[],\n\t\tseparator: string,\n\t\texpectedType: Function,   // eslint-disable-line @typescript-eslint/no-unsafe-function-type\n\t\trenderFn: (testResult: T) => string,\n\t): string {\n\t\tif (!Array.isArray(testResults)) testResults = [ testResults ];\n\t\ttestResults.forEach((result, i) => ensure.type(result, expectedType, `testResult[${i}]`));\n\n\t\treturn testResults.map(result => renderFn(result)).join(separator);\n\t}\n\n}"],"names":["ensure","TestCaseResult","TestResult","TestStatus","TestSuiteResult","TestMark","Colors","path","AssertionError","util","headerColor","brightWhite","bold","highlightColor","errorMessageColor","brightRed","timeoutMessageColor","purple","expectedColor","green","actualColor","diffColor","brightYellow","summaryColor","dim","TestRenderer","create","pass","fail","inverse","skip","cyan","timeout","brightCyan","brightPurple","renderSummary","testSuiteResult","elapsedMs","signature","arguments","undefined","Number","total","count","renders","renderCount","renderMsEach","filter","render","join","number","description","color","msEach","toFixed","renderAsCharacters","testCaseResults","Array","testResult","status","renderAsSingleLines","renderStatusAsSingleWord","name","renderNameOnOneLine","renderAsMultipleLines","renderNameOnMultipleLines","renderStatusWithMultiLineDetails","renderMarksAsLines","testResults","mark","renderMarkAsSingleWord","testCaseResult","filename","basename","suites","slice","length","test","unshift","suitesName","Error","none","only","unreachable","pop","resultError","error","stack","renderStack","message","diff","renderDiff","testCaseError","lines","split","highlightedLines","map","line","includes","replace","expected","actual","inspect","depth","Infinity","i","Math","max","expectedLine","actualLine","separator","expectedType","renderFn","isArray","forEach","result","type"],"mappings":"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"}