{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_renderer_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport { assert, test } from \"../tests.js\";\nimport { TestRenderer } from \"./test_renderer.js\";\nimport { AssertionError } from \"node:assert\";\nimport { TestCaseResult, TestMark, TestMarkValue, TestResult, TestSuiteResult } from \"./test_result.js\";\nimport { Colors } from \"../infrastructure/colors.js\";\n\nconst headerColor = Colors.brightWhite.bold;\nconst summaryColor = Colors.brightWhite.dim;\nconst failColor = Colors.brightRed;\nconst timeoutColor = Colors.purple;\nconst skipColor = Colors.cyan;\nconst passColor = Colors.green;\n\nexport default test(({ describe }) => {\n\n\tdescribe(\"summary\", ({ it }) => {\n\n\t\tit(\"renders summary\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tassert.equal(TestRenderer.create().renderSummary(result, 1000),\n\t\t\t\tsummaryColor(\"(\") +\n\t\t\t\tfailColor(\"3 failed\") +\n\t\t\t\tsummaryColor(\"; \") +\n\t\t\t\ttimeoutColor(\"4 timed out\") +\n\t\t\t\tsummaryColor(\"; \") +\n\t\t\t\tskipColor(\"2 skipped\") +\n\t\t\t\tsummaryColor(\"; \") +\n\t\t\t\tpassColor(\"1 passed\") +\n\t\t\t\tsummaryColor(\"; \") +\n\t\t\t\tsummaryColor(\"125.0ms avg.\") +\n\t\t\t\tsummaryColor(\")\")\n\t\t\t);\n\t\t});\n\n\t\tit(\"only renders information for non-zero counts\", () => {\n\t\t\tconst result = createSuite({ children: [ createPass() ]});\n\n\t\t\tassert.equal(TestRenderer.create().renderSummary(result, 1000),\n\t\t\t\tsummaryColor(\"(\") +\n\t\t\t\tpassColor(\"1 passed\") +\n\t\t\t\tsummaryColor(\"; \") +\n\t\t\t\tsummaryColor(\"1000.0ms avg.\") +\n\t\t\t\tsummaryColor(\")\")\n\t\t\t);\n\t\t});\n\n\t\tit(\"leaves out test time if elapsed time not provided\", () => {\n\t\t\tconst result = createSuite({ children: [ createPass() ]});\n\n\t\t\tassert.equal(TestRenderer.create().renderSummary(result),\n\t\t\t\tsummaryColor(\"(\") +\n\t\t\t\tpassColor(\"1 passed\") +\n\t\t\t\tsummaryColor(\")\")\n\t\t\t);\n\t\t});\n\n\t\tit(\"handles empty results gracefully\", () => {\n\t\t\tassert.equal(TestRenderer.create().renderSummary(createSuite(), 1000),\n\t\t\t\tsummaryColor(\"(\") +\n\t\t\t\tsummaryColor(\"none ran\") +\n\t\t\t\tsummaryColor(\")\")\n\t\t\t);\n\t\t});\n\t});\n\n\n\tdescribe(\"single-character test cases\", ({ it }) => {\n\n\t\tit(\"renders test cases as progress marker\", () => {\n\t\t\tassert.equal(renderCharacterTest(createPass()), \".\", \"pass\");\n\t\t\tassert.equal(renderCharacterTest(createFail()), Colors.brightRed.inverse(\"X\"), \"fail\");\n\t\t\tassert.equal(renderCharacterTest(createSkip()), Colors.cyan.dim(\"_\"), \"skip\");\n\t\t\tassert.equal(renderCharacterTest(createTimeout()), Colors.purple.inverse(\"!\"), \"timeout\");\n\t\t});\n\n\t\tit(\"renders multiple results\", () => {\n\t\t\tconst results = [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSkip(),\n\t\t\t];\n\n\t\t\tassert.equal(renderCharacterTest(results),\n\t\t\t\trenderCharacterTest(createPass()) +\n\t\t\t\trenderCharacterTest(createFail()) +\n\t\t\t\trenderCharacterTest(createSkip())\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders no results as an empty string\", () => {\n\t\t\tassert.equal(renderCharacterTest([]), \"\");\n\t\t});\n\n\t});\n\n\n\tdescribe(\"single-line test cases\", ({ it }) => {\n\n\t\tit(\"pass\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.green(\"passed\") + \" my name\");\n\t\t});\n\n\t\tit(\"skip\", () => {\n\t\t\tconst result = createSkip({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.brightCyan(\"skipped\") + \" my name\");\n\t\t});\n\n\t\tit(\"timeout\", () => {\n\t\t\tconst result = createTimeout({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.brightPurple(\"timeout\") + \" my name\");\n\t\t});\n\n\t\tit(\"fail\", () => {\n\t\t\tconst result = createFail({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.brightRed(\"failed\") + \" my name\");\n\t\t});\n\n\t\tit(\"renders multiple results with a line feed between each one\", () => {\n\t\t\tconst results = [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSkip(),\n\t\t\t];\n\n\t\t\tassert.equal(renderSingleLineTest(results),\n\t\t\t\trenderSingleLineTest(createPass()) + \"\\n\" +\n\t\t\t\trenderSingleLineTest(createFail()) + \"\\n\" +\n\t\t\t\trenderSingleLineTest(createSkip())\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders no results as an empty string\", () => {\n\t\t\tassert.equal(renderSingleLineTest([]), \"\");\n\t\t});\n\n\t});\n\t\n\n\tdescribe(\"multi-line test cases\", ({ it }) => {\n\n\t\tit(\"renders multi-line name and status separated by a blank line\", () => {\n\t\t\tconst result = createPass({ name: [ \"my suite\", \"my name\" ]});\n\t\t\tconst renderer = TestRenderer.create();\n\n\t\t\tassert.equal(\n\t\t\t\trenderMultiLineTest(result),\n\t\t\t\trenderer.renderNameOnMultipleLines(result) + \"\\n\\n\" + renderer.renderStatusWithMultiLineDetails(result)\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders multiple results with a two-line gap between each result\", () => {\n\t\t\tconst fail = createFail();    // have to use the same fail each time, or the stack trace will be different\n\n\t\t\tconst results = [\n\t\t\t\tcreatePass(),\n\t\t\t\tfail,\n\t\t\t\tcreateSkip(),\n\t\t\t];\n\n\t\t\tassert.equal(renderMultiLineTest(results),\n\t\t\t\trenderMultiLineTest(createPass()) + \"\\n\\n\\n\" +\n\t\t\t\trenderMultiLineTest(fail) + \"\\n\\n\\n\" +\n\t\t\t\trenderMultiLineTest(createSkip())\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders no results as an empty string\", () => {\n\t\t\tassert.equal(renderMultiLineTest([]), \"\");\n\t\t});\n\n\t});\n\n\n\tdescribe(\"single-line test marks\", ({ it }) => {\n\n\t\tit(\"renders test case marks\", () => {\n\t\t\tassert.equal(\n\t\t\t\trenderSingleLineMark(createPass({ mark: TestMark.none, name: \"my name\" })),\n\t\t\t\t\"(no mark) my name\",\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\trenderSingleLineMark(createPass({ mark: TestMark.skip, name: \"my name\" })),\n\t\t\t\tColors.brightCyan(\".skip\") + \" my name\"\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\trenderSingleLineMark(createPass({ mark: TestMark.only, name: \"my name\" })),\n\t\t\t\tColors.brightCyan(\".only\") + \" my name\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders multiple results on consecutive lines\", () => {\n\t\t\tconst results = [\n\t\t\t\tcreatePass({ name: \"skip 1\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"none 2\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"only 3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite only 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreateSkip({ name: \"does not look inside suites\", mark: TestMark.skip }),\n\t\t\t\t]}),\n\t\t\t\tcreateSuite({ name: \"suite skip 2\", mark: TestMark.skip }),\n\t\t\t];\n\n\t\t\tassert.equal(renderSingleLineMark(results),\n\t\t\t\trenderSingleLineMark(createPass({ name: \"skip 1\", mark: TestMark.skip })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createPass({ name: \"none 2\", mark: TestMark.none })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createPass({ name: \"only 3\", mark: TestMark.only })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createSkip({ name: \"suite only 1\", mark: TestMark.only })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createSuite({ name: \"suite skip 2\", mark: TestMark.skip }))\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"single-line names\", ({ it }) => {\n\n\t\tit(\"renders default name when no name provided\", () => {\n\t\t\tconst result = createPass({ name: [] });\n\t\t\tassert.equal(render(result), \"(no name)\");\n\t\t});\n\n\t\tit(\"renders one name\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tassert.equal(render(result), \"my name\");\n\t\t});\n\n\t\tit(\"renders multiple names\", () => {\n\t\t\tconst result = createPass({ name: [ \"suite 1\", \"suite 2\", \"my name\" ]});\n\t\t\tassert.equal(render(result), \"suite 1 » suite 2 » my name\");\n\t\t});\n\n\t\tit(\"renders filename and name together\", () => {\n\t\t\tconst result = createPass({ filename: \"my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my_file\") +\" » my name\");\n\t\t});\n\n\t\tit(\"strips directories from filename\", () => {\n\t\t\tconst result = createPass({ filename: \"/root/parent/child/my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my_file\") + \" » my name\");\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderNameOnOneLine(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"multi-line names\", ({ it }) => {\n\n\t\tit(\"renders default name when no name provided\", () => {\n\t\t\tconst result = createPass({ name: [] });\n\t\t\tassert.equal(render(result), headerColor(\"(no name)\"));\n\t\t});\n\n\t\tit(\"renders one name\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my name\"));\n\t\t});\n\n\t\tit(\"renders multiple names\", () => {\n\t\t\tconst result = createPass({ name: [ \"suite 1\", \"suite 2\", \"my name\" ]});\n\t\t\tassert.equal(render(result), headerColor(\"suite 1 » suite 2\\n» my name\"));\n\t\t});\n\n\t\tit(\"renders filename and name together\", () => {\n\t\t\tconst result = createPass({ filename: \"my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my_file\\n» my name\"));\n\t\t});\n\n\t\tit(\"strips directories from filename\", () => {\n\t\t\tconst result = createPass({ filename: \"/root/parent/child/my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my_file\\n» my name\"));\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderNameOnMultipleLines(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"single-word statuses\", ({ it }) => {\n\n\t\tit(\"renders all statuses\", () => {\n\t\t\tassert.equal(render(createPass()), Colors.green(\"passed\"), \"pass\");\n\t\t\tassert.equal(render(createFail()), Colors.brightRed(\"failed\"), \"fail\");\n\t\t\tassert.equal(render(createSkip()), Colors.brightCyan(\"skipped\"), \"skip\");\n\t\t\tassert.equal(render(createTimeout()), Colors.brightPurple(\"timeout\"), \"timeout\");\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderStatusAsSingleWord(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"multi-line statuses\", ({ it, describe }) => {\n\n\t\tit(\"renders pass\", () => {\n\t\t\tassert.equal(render(createPass()), Colors.green(\"passed\"));\n\t\t});\n\n\t\tit(\"renders skip\", () => {\n\t\t\tassert.equal(render(createSkip()), Colors.brightCyan(\"skipped\"));\n\t\t});\n\n\t\tit(\"renders timeout\", () => {\n\t\t\tassert.equal(render(createTimeout({ timeout: 500 })), Colors.purple(\"Timed out after 500ms\"));\n\t\t});\n\n\t\tdescribe(\"fail\", () => {\n\n\t\t\tit(\"renders error message\", () => {\n\t\t\t\tconst result = createFail({ name: \"my name\", error: \"my error\" });\n\t\t\t\tassert.equal(render(result), Colors.brightRed(\"my error\")\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"handles unusual errors\", () => {\n\t\t\t\tconst result = createFail({ name: \"my name\", error: 123 });\n\t\t\t\tassert.equal(render(result), Colors.brightRed(\"123\"));\n\t\t\t});\n\n\t\t\tit(\"renders diff for assertion errors\", () => {\n\t\t\t\tconst error = new AssertionError({\n\t\t\t\t\tmessage: \"my error\",\n\t\t\t\t\texpected: \"my expected\",\n\t\t\t\t\tactual: \"my actual\",\n\t\t\t\t});\n\t\t\t\tdelete error.stack;\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(\n\t\t\t\t\trender(result),\n\t\t\t\t\tColors.brightRed(error.toString()) + \"\\n\\n\" + renderDiff(error)\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"renders stack trace and repeats name and error message\", () => {\n\t\t\t\tconst error = new Error(\"my error\");\n\t\t\t\terror.stack = \"my stack\";\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(render(result),\n\t\t\t\t\t\"my stack\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tColors.brightWhite(\"my name »\\n\") +\n\t\t\t\t\tColors.brightRed(\"my error\")\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"doesn't repeat name and error message if error doesn't have a message\", () => {\n\t\t\t\tconst error = { stack: \"my stack\" };\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(render(result), \"my stack\");\n\t\t\t});\n\n\t\t\tit(\"repeats name properly when test has no name\", () => {\n\t\t\t\tconst error = new Error(\"my error\");\n\t\t\t\terror.stack = \"my stack\";\n\n\t\t\t\tconst result = createFail({ name: [], error });\n\t\t\t\tassert.equal(render(result),\n\t\t\t\t\t\"my stack\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tColors.brightWhite(\"(no name) »\\n\") +\n\t\t\t\t\tColors.brightRed(\"my error\")\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"renders stack, message, and diff when they all exist\", () => {\n\t\t\t\tconst error = new AssertionError({\n\t\t\t\t\tmessage: \"my error\",\n\t\t\t\t\texpected: \"my expected\",\n\t\t\t\t\tactual: \"my actual\",\n\t\t\t\t});\n\t\t\t\terror.stack = \"my stack\";\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(render(result),\n\t\t\t\t\t\"my stack\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tColors.brightWhite(\"my name »\\n\") +\n\t\t\t\t\tColors.brightRed(\"my error\") + \"\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\trenderDiff(error)\n\t\t\t\t);\n\t\t\t});\n\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderStatusWithMultiLineDetails(result);\n\t\t}\n\n\t\tfunction renderDiff(error: AssertionError): string {\n\t\t\treturn TestRenderer.create().renderDiff(error);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"single-word marks\", ({ it }) => {\n\n\t\tit(\"renders all marks\", () => {\n\t\t\tassert.equal(render(createPass({ mark: TestMark.none })), \"(no mark)\");\n\t\t\tassert.equal(render(createPass({ mark: TestMark.skip })), Colors.brightCyan(\".skip\"));\n\t\t\tassert.equal(render(createPass({ mark: TestMark.only })), Colors.brightCyan(\".only\"));\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderMarkAsSingleWord(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"stack traces\", ({ it }) => {\n\n\t\tconst EXAMPLE_STACK = \"Error: my error\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_result.test.js:306:11\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_suite.js:222:10\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/infrastructure/clock.js:68:26\\n\";\n\n\t\tconst HIGHLIGHTED_STACK = \"Error: my error\\n\" +\n\t\t\tColors.brightWhite.bold(\n\t\t\t\t\"--> at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_result.test.js:306:11\"\n\t\t\t) + \"\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_suite.js:222:10\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/infrastructure/clock.js:68:26\\n\";\n\n\t\tit(\"returns an empty string if there's no stack trace\", () => {\n\t\t\tconst result = createResult({ stack: undefined });\n\t\t\tassert.equal(render(result), \"\");\n\t\t});\n\n\t\tit(\"converts non strings to strings\", () => {\n\t\t\tconst result = createResult({ stack: EXAMPLE_STACK, filename: undefined });\n\t\t\tassert.equal(render(result), EXAMPLE_STACK);\n\t\t});\n\n\t\tit(\"highlights stack trace lines that include test file\", () => {\n\t\t\tconst result = createResult({\n\t\t\t\tstack: EXAMPLE_STACK,\n\t\t\t\tfilename: \"/Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_result.test.js\",\n\t\t\t});\n\t\t\tassert.equal(render(result), HIGHLIGHTED_STACK);\n\t\t});\n\n\t\tfunction createResult({\n\t\t\tstack,\n\t\t\tfilename,\n\t\t}: {\n\t\t\tstack: unknown,\n\t\t\tfilename?: string,\n\t\t}) {\n\t\t\treturn createFail({ error: { stack }, filename });\n\t\t}\n\n\t\tfunction render(result: TestCaseResult) {\n\t\t\treturn TestRenderer.create().renderStack(result);\n\t\t}\n\t});\n\n\n\tdescribe(\"actual / expected diffs\", ({ it }) => {\n\t\t// These tests depends on util.inspect() behavior, which is not guaranteed to remain consistent across\n\t\t// Node versions, so it could break after a Node version upgrade.\n\n\t\tit(\"renders expected and actual values\", () => {\n\t\t\tassert.equal(render(123, \"abc\"),\n\t\t\t\tColors.green(\"expected: \") + \"123\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + \"'abc'\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"highlights differences between expected and actual values when they have more than one line\", () => {\n\t\t\tconst expected = \"1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n\";\n\t\t\tconst actual = \"1234567890\\n1234567890\\nXXXXXXXXXX\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n\";\n\n\t\t\tassert.deepEqual(render(expected, actual),\n\t\t\t\tColors.green(\"expected: \") + \"'1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n'\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + \"'1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  'XXXXXXXXXX\\\\n' +\") + \"\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n'\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"highlights differences between expected and actual values when expected has one line\", () => {\n\t\t\t// This test depends on util.inspect() behavior, which is not guaranteed to remain consistent across\n\t\t\t// Node versions, so it could break after a Node version upgrade.\n\t\t\tconst oneLine = \"1234567890123456789012345678901234567890\\n\";\n\t\t\tconst twoLines = \"1234567890123456789012345678901234567890\\n1234567890123456789012345678901234567890\\n\";\n\n\t\t\tassert.deepEqual(render(oneLine, twoLines),\n\t\t\t\tColors.green(\"expected: \") + Colors.brightYellow.bold(\"'1234567890123456789012345678901234567890\\\\n'\") + \"\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + Colors.brightYellow.bold(\"'1234567890123456789012345678901234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890123456789012345678901234567890\\\\n'\")\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't break when actual and expected have different numbers of lines\", () => {\n\t\t\t// This test depends on util.inspect() behavior, which is not guaranteed to remain consistent across\n\t\t\t// Node versions, so it could break after a Node version upgrade.\n\t\t\tconst sevenLines = \"1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n\";\n\t\t\tconst twoLines = \"1234567890123456789012345678901234567890\\n1234567890123456789012345678901234567890\\n\";\n\n\t\t\tassert.deepEqual(render(sevenLines, twoLines),\n\t\t\t\tColors.green(\"expected: \") + Colors.brightYellow.bold(\"'1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n'\") + \"\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + Colors.brightYellow.bold(\"'1234567890123456789012345678901234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890123456789012345678901234567890\\\\n'\")\n\t\t\t);\n\t\t});\n\n\t\tfunction render(expected: unknown, actual: unknown): string {\n\t\t\tconst error = new AssertionError({ expected, actual });\n\t\t\treturn TestRenderer.create().renderDiff(error);\n\t\t}\n\n\t});\n\n});\n\nfunction renderCharacterTest(result: TestCaseResult | TestCaseResult[]): string {\n\treturn TestRenderer.create().renderAsCharacters(result);\n}\n\nfunction renderSingleLineTest(result: TestCaseResult | TestCaseResult[]): string {\n\treturn TestRenderer.create().renderAsSingleLines(result);\n}\n\nfunction renderMultiLineTest(result: TestCaseResult | TestCaseResult[]): string {\n\treturn TestRenderer.create().renderAsMultipleLines(result);\n}\n\nfunction renderSingleLineMark(result: TestResult | TestResult[]): string {\n\treturn TestRenderer.create().renderMarksAsLines(result);\n}\n\nfunction createSuite({\n\tname = [],\n\tchildren = [],\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\tchildren?: TestResult[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestSuiteResult {\n\treturn TestResult.suite(name, children, filename, mark);\n}\n\nfunction createPass({\n\tname = [],\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.pass(name, filename, mark);\n}\n\nfunction createFail({\n\tname = [],\n\terror = new Error(\"irrelevant error\"),\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\terror?: unknown,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.fail(name, error, filename, mark);\n}\n\nfunction createSkip({\n\tname = [],\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.skip(name, filename, mark);\n}\n\nfunction createTimeout({\n\tname = [],\n\ttimeout = 42,\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\ttimeout?: number,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.timeout(name, timeout, filename, mark);\n}"],"names":["assert","test","TestRenderer","AssertionError","TestMark","TestResult","Colors","headerColor","brightWhite","bold","summaryColor","dim","failColor","brightRed","timeoutColor","purple","skipColor","cyan","passColor","green","describe","it","result","createSuite","children","createPass","createSkip","createFail","createTimeout","equal","create","renderSummary","renderCharacterTest","inverse","results","name","renderSingleLineTest","brightCyan","brightPurple","renderer","renderMultiLineTest","renderNameOnMultipleLines","renderStatusWithMultiLineDetails","fail","renderSingleLineMark","mark","none","skip","only","render","filename","renderNameOnOneLine","renderStatusAsSingleWord","timeout","error","message","expected","actual","stack","toString","renderDiff","Error","renderMarkAsSingleWord","EXAMPLE_STACK","HIGHLIGHTED_STACK","createResult","undefined","renderStack","deepEqual","brightYellow","oneLine","twoLines","sevenLines","renderAsCharacters","renderAsSingleLines","renderAsMultipleLines","renderMarksAsLines","suite","pass"],"mappings":"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"}