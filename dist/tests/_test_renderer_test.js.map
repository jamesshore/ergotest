{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_renderer_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport { assert, test } from \"tests\";\nimport { TestRenderer } from \"./test_renderer.js\";\nimport { AssertionError } from \"node:assert\";\nimport { TestCaseResult, TestResult, TestSuiteResult } from \"./test_result.js\";\nimport { Colors } from \"../infrastructure/colors.js\";\nimport { TestMark, TestMarkValue } from \"./test_suite.js\";\n\nconst headerColor = Colors.brightWhite.bold;\nconst highlightColor = Colors.brightWhite;\n\nexport default test(({ describe }) => {\n\n\tdescribe(\"single-character test cases\", ({ it }) => {\n\n\t\tit(\"renders test cases as progress marker\", () => {\n\t\t\tassert.equal(renderCharacterTest(createPass()), Colors.white(\".\"), \"pass\");\n\t\t\tassert.equal(renderCharacterTest(createFail()), Colors.brightRed.inverse(\"X\"), \"fail\");\n\t\t\tassert.equal(renderCharacterTest(createSkip()), Colors.cyan.dim(\"_\"), \"skip\");\n\t\t\tassert.equal(renderCharacterTest(createTimeout()), Colors.purple.inverse(\"!\"), \"timeout\");\n\t\t});\n\n\t\tit(\"renders multiple results\", () => {\n\t\t\tconst results = [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSkip(),\n\t\t\t];\n\n\t\t\tassert.equal(renderCharacterTest(results),\n\t\t\t\trenderCharacterTest(createPass()) +\n\t\t\t\trenderCharacterTest(createFail()) +\n\t\t\t\trenderCharacterTest(createSkip())\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders no results as an empty string\", () => {\n\t\t\tassert.equal(renderCharacterTest([]), \"\");\n\t\t});\n\n\t});\n\n\n\tdescribe(\"single-line test cases\", ({ it }) => {\n\n\t\tit(\"pass\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.green(\"passed\") + \" my name\");\n\t\t});\n\n\t\tit(\"skip\", () => {\n\t\t\tconst result = createSkip({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.brightCyan(\"skipped\") + \" my name\");\n\t\t});\n\n\t\tit(\"timeout\", () => {\n\t\t\tconst result = createTimeout({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.brightPurple(\"timeout\") + \" my name\");\n\t\t});\n\n\t\tit(\"fail\", () => {\n\t\t\tconst result = createFail({ name: \"my name\" });\n\t\t\tassert.equal(renderSingleLineTest(result), Colors.brightRed(\"failed\") + \" my name\");\n\t\t});\n\n\t\tit(\"renders multiple results with a line feed between each one\", () => {\n\t\t\tconst results = [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSkip(),\n\t\t\t];\n\n\t\t\tassert.equal(renderSingleLineTest(results),\n\t\t\t\trenderSingleLineTest(createPass()) + \"\\n\" +\n\t\t\t\trenderSingleLineTest(createFail()) + \"\\n\" +\n\t\t\t\trenderSingleLineTest(createSkip())\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders no results as an empty string\", () => {\n\t\t\tassert.equal(renderSingleLineTest([]), \"\");\n\t\t});\n\n\t});\n\t\n\n\tdescribe(\"multi-line test cases\", ({ it }) => {\n\n\t\tit(\"renders multi-line name and status separated by a blank line\", () => {\n\t\t\tconst result = createPass({ name: [ \"my suite\", \"my name\" ]});\n\t\t\tconst renderer = TestRenderer.create();\n\n\t\t\tassert.equal(\n\t\t\t\trenderMultiLineTest(result),\n\t\t\t\trenderer.renderNameOnMultipleLines(result) + \"\\n\" + renderer.renderStatusWithMultiLineDetails(result)\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders multiple results with a two-line gap between each result\", () => {\n\t\t\tconst fail = createFail();    // have to use the same fail each time, or the stack trace will be different\n\n\t\t\tconst results = [\n\t\t\t\tcreatePass(),\n\t\t\t\tfail,\n\t\t\t\tcreateSkip(),\n\t\t\t];\n\n\t\t\tassert.equal(renderMultiLineTest(results),\n\t\t\t\trenderMultiLineTest(createPass()) + \"\\n\\n\\n\" +\n\t\t\t\trenderMultiLineTest(fail) + \"\\n\\n\\n\" +\n\t\t\t\trenderMultiLineTest(createSkip())\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders no results as an empty string\", () => {\n\t\t\tassert.equal(renderMultiLineTest([]), \"\");\n\t\t});\n\n\t});\n\n\n\tdescribe(\"single-line test marks\", ({ it }) => {\n\n\t\tit(\"renders test case marks\", () => {\n\t\t\tassert.equal(\n\t\t\t\trenderSingleLineMark(createPass({ mark: TestMark.none, name: \"my name\" })),\n\t\t\t\t\"(no mark) my name\",\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\trenderSingleLineMark(createPass({ mark: TestMark.skip, name: \"my name\" })),\n\t\t\t\tColors.brightCyan(\".skip\") + \" my name\"\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\trenderSingleLineMark(createPass({ mark: TestMark.only, name: \"my name\" })),\n\t\t\t\tColors.brightCyan(\".only\") + \" my name\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders multiple results on consecutive lines\", () => {\n\t\t\tconst results = [\n\t\t\t\tcreatePass({ name: \"skip 1\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"none 2\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"only 3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite only 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreateSkip({ name: \"does not look inside suites\", mark: TestMark.skip }),\n\t\t\t\t]}),\n\t\t\t\tcreateSuite({ name: \"suite skip 2\", mark: TestMark.skip }),\n\t\t\t];\n\n\t\t\tassert.equal(renderSingleLineMark(results),\n\t\t\t\trenderSingleLineMark(createPass({ name: \"skip 1\", mark: TestMark.skip })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createPass({ name: \"none 2\", mark: TestMark.none })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createPass({ name: \"only 3\", mark: TestMark.only })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createSkip({ name: \"suite only 1\", mark: TestMark.only })) + \"\\n\" +\n\t\t\t\trenderSingleLineMark(createSuite({ name: \"suite skip 2\", mark: TestMark.skip }))\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"single-line names\", ({ it }) => {\n\n\t\tit(\"renders default name when no name provided\", () => {\n\t\t\tconst result = createPass({ name: [] });\n\t\t\tassert.equal(render(result), \"(no name)\");\n\t\t});\n\n\t\tit(\"renders one name\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tassert.equal(render(result), \"my name\");\n\t\t});\n\n\t\tit(\"renders multiple names\", () => {\n\t\t\tconst result = createPass({ name: [ \"suite 1\", \"suite 2\", \"my name\" ]});\n\t\t\tassert.equal(render(result), \"suite 1 » suite 2 » my name\");\n\t\t});\n\n\t\tit(\"renders filename and name together\", () => {\n\t\t\tconst result = createPass({ filename: \"my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), highlightColor(\"my_file\") +\" » my name\");\n\t\t});\n\n\t\tit(\"strips directories from filename\", () => {\n\t\t\tconst result = createPass({ filename: \"/root/parent/child/my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), highlightColor(\"my_file\") + \" » my name\");\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderNameOnOneLine(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"multi-line names\", ({ it }) => {\n\n\t\tit(\"renders default name when no name provided\", () => {\n\t\t\tconst result = createPass({ name: [] });\n\t\t\tassert.equal(render(result), headerColor(\"(no name)\"));\n\t\t});\n\n\t\tit(\"renders one name\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my name\"));\n\t\t});\n\n\t\tit(\"renders multiple names\", () => {\n\t\t\tconst result = createPass({ name: [ \"suite 1\", \"suite 2\", \"my name\" ]});\n\t\t\tassert.equal(render(result), headerColor(\"suite 1 » suite 2\\n» my name\"));\n\t\t});\n\n\t\tit(\"renders filename and name together\", () => {\n\t\t\tconst result = createPass({ filename: \"my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my_file\\n» my name\"));\n\t\t});\n\n\t\tit(\"strips directories from filename\", () => {\n\t\t\tconst result = createPass({ filename: \"/root/parent/child/my_file\", name: \"my name\" });\n\t\t\tassert.equal(render(result), headerColor(\"my_file\\n» my name\"));\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderNameOnMultipleLines(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"single-word statuses\", ({ it }) => {\n\n\t\tit(\"renders all statuses\", () => {\n\t\t\tassert.equal(render(createPass()), Colors.green(\"passed\"), \"pass\");\n\t\t\tassert.equal(render(createFail()), Colors.brightRed(\"failed\"), \"fail\");\n\t\t\tassert.equal(render(createSkip()), Colors.brightCyan(\"skipped\"), \"skip\");\n\t\t\tassert.equal(render(createTimeout()), Colors.brightPurple(\"timeout\"), \"timeout\");\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderStatusAsSingleWord(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"multi-line statuses\", ({ it, describe }) => {\n\n\t\tit(\"renders pass\", () => {\n\t\t\tassert.equal(render(createPass()), Colors.green(\"passed\"));\n\t\t});\n\n\t\tit(\"renders skip\", () => {\n\t\t\tassert.equal(render(createSkip()), Colors.brightCyan(\"skipped\"));\n\t\t});\n\n\t\tit(\"renders timeout\", () => {\n\t\t\tassert.equal(render(createTimeout({ timeout: 500 })), Colors.purple(\"Timed out after 500ms\"));\n\t\t});\n\n\t\tdescribe(\"fail\", () => {\n\n\t\t\tit(\"renders error message\", () => {\n\t\t\t\tconst result = createFail({ name: \"my name\", error: \"my error\" });\n\t\t\t\tassert.equal(render(result), Colors.brightRed(\"my error\")\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"handles unusual errors\", () => {\n\t\t\t\tconst result = createFail({ name: \"my name\", error: 123 });\n\t\t\t\tassert.equal(render(result), Colors.brightRed(\"123\"));\n\t\t\t});\n\n\t\t\tit(\"renders diff for assertion errors\", () => {\n\t\t\t\tconst error = new AssertionError({\n\t\t\t\t\tmessage: \"my error\",\n\t\t\t\t\texpected: \"my expected\",\n\t\t\t\t\tactual: \"my actual\",\n\t\t\t\t});\n\t\t\t\tdelete error.stack;\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(\n\t\t\t\t\trender(result),\n\t\t\t\t\tColors.brightRed(error.toString()) + \"\\n\\n\" + renderDiff(error)\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"renders stack trace and repeats name and error message\", () => {\n\t\t\t\tconst error = new Error(\"my error\");\n\t\t\t\terror.stack = \"my stack\";\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(render(result),\n\t\t\t\t\t\"my stack\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tColors.brightWhite(\"my name »\\n\") +\n\t\t\t\t\tColors.brightRed(\"my error\")\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"doesn't repeat name and error message if error doesn't have a message\", () => {\n\t\t\t\tconst error = { stack: \"my stack\" };\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(render(result), \"my stack\");\n\t\t\t});\n\n\t\t\tit(\"repeats name properly when test has no name\", () => {\n\t\t\t\tconst error = new Error(\"my error\");\n\t\t\t\terror.stack = \"my stack\";\n\n\t\t\t\tconst result = createFail({ name: [], error });\n\t\t\t\tassert.equal(render(result),\n\t\t\t\t\t\"my stack\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tColors.brightWhite(\"(no name) »\\n\") +\n\t\t\t\t\tColors.brightRed(\"my error\")\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit(\"renders stack, message, and diff when they all exist\", () => {\n\t\t\t\tconst error = new AssertionError({\n\t\t\t\t\tmessage: \"my error\",\n\t\t\t\t\texpected: \"my expected\",\n\t\t\t\t\tactual: \"my actual\",\n\t\t\t\t});\n\t\t\t\terror.stack = \"my stack\";\n\n\t\t\t\tconst result = createFail({ name: \"my name\", error });\n\t\t\t\tassert.equal(render(result),\n\t\t\t\t\t\"my stack\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\tColors.brightWhite(\"my name »\\n\") +\n\t\t\t\t\tColors.brightRed(\"my error\") + \"\\n\" +\n\t\t\t\t\t\"\\n\" +\n\t\t\t\t\trenderDiff(error)\n\t\t\t\t);\n\t\t\t});\n\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderStatusWithMultiLineDetails(result);\n\t\t}\n\n\t\tfunction renderDiff(error: AssertionError): string {\n\t\t\treturn TestRenderer.create().renderDiff(error);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"single-word marks\", ({ it }) => {\n\n\t\tit(\"renders all marks\", () => {\n\t\t\tassert.equal(render(createPass({ mark: TestMark.none })), \"(no mark)\");\n\t\t\tassert.equal(render(createPass({ mark: TestMark.skip })), Colors.brightCyan(\".skip\"));\n\t\t\tassert.equal(render(createPass({ mark: TestMark.only })), Colors.brightCyan(\".only\"));\n\t\t});\n\n\t\tfunction render(result: TestCaseResult): string {\n\t\t\treturn TestRenderer.create().renderMarkAsSingleWord(result);\n\t\t}\n\n\t});\n\n\n\tdescribe(\"stack traces\", ({ it }) => {\n\n\t\tconst EXAMPLE_STACK = \"Error: my error\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_result.test.js:306:11\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_suite.js:222:10\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/infrastructure/clock.js:68:26\\n\";\n\n\t\tconst HIGHLIGHTED_STACK = \"Error: my error\\n\" +\n\t\t\tColors.brightWhite.bold(\n\t\t\t\t\"--> at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_result.test.js:306:11\"\n\t\t\t) + \"\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_suite.js:222:10\\n\" +\n\t\t\t\"    at file:///Users/jshore/Documents/Projects/ergotest/_build/util/infrastructure/clock.js:68:26\\n\";\n\n\t\tit(\"returns an empty string if there's no stack trace\", () => {\n\t\t\tconst result = createResult({ stack: undefined });\n\t\t\tassert.equal(render(result), \"\");\n\t\t});\n\n\t\tit(\"converts non strings to strings\", () => {\n\t\t\tconst result = createResult({ stack: EXAMPLE_STACK, filename: undefined });\n\t\t\tassert.equal(render(result), EXAMPLE_STACK);\n\t\t});\n\n\t\tit(\"highlights stack trace lines that include test file\", () => {\n\t\t\tconst result = createResult({\n\t\t\t\tstack: EXAMPLE_STACK,\n\t\t\t\tfilename: \"/Users/jshore/Documents/Projects/ergotest/_build/util/tests/test_result.test.js\",\n\t\t\t});\n\t\t\tassert.equal(render(result), HIGHLIGHTED_STACK);\n\t\t});\n\n\t\tfunction createResult({\n\t\t\tstack,\n\t\t\tfilename,\n\t\t}: {\n\t\t\tstack: unknown,\n\t\t\tfilename?: string,\n\t\t}) {\n\t\t\treturn createFail({ error: { stack }, filename });\n\t\t}\n\n\t\tfunction render(result: TestCaseResult) {\n\t\t\treturn TestRenderer.create().renderStack(result);\n\t\t}\n\t});\n\n\n\tdescribe(\"actual / expected diffs\", ({ it }) => {\n\t\t// These tests depends on util.inspect() behavior, which is not guaranteed to remain consistent across\n\t\t// Node versions, so it could break after a Node version upgrade.\n\n\t\tit(\"renders expected and actual values\", () => {\n\t\t\tassert.equal(render(123, \"abc\"),\n\t\t\t\tColors.green(\"expected: \") + \"123\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + \"'abc'\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"highlights differences between expected and actual values when they have more than one line\", () => {\n\t\t\tconst expected = \"1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n\";\n\t\t\tconst actual = \"1234567890\\n1234567890\\nXXXXXXXXXX\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n\";\n\n\t\t\tassert.deepEqual(render(expected, actual),\n\t\t\t\tColors.green(\"expected: \") + \"'1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n'\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + \"'1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  'XXXXXXXXXX\\\\n' +\") + \"\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n' +\\n\" +\n\t\t\t\t\"  '1234567890\\\\n'\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"highlights differences between expected and actual values when expected has one line\", () => {\n\t\t\t// This test depends on util.inspect() behavior, which is not guaranteed to remain consistent across\n\t\t\t// Node versions, so it could break after a Node version upgrade.\n\t\t\tconst oneLine = \"1234567890123456789012345678901234567890\\n\";\n\t\t\tconst twoLines = \"1234567890123456789012345678901234567890\\n1234567890123456789012345678901234567890\\n\";\n\n\t\t\tassert.deepEqual(render(oneLine, twoLines),\n\t\t\t\tColors.green(\"expected: \") + Colors.brightYellow.bold(\"'1234567890123456789012345678901234567890\\\\n'\") + \"\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + Colors.brightYellow.bold(\"'1234567890123456789012345678901234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890123456789012345678901234567890\\\\n'\")\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't break when actual and expected have different numbers of lines\", () => {\n\t\t\t// This test depends on util.inspect() behavior, which is not guaranteed to remain consistent across\n\t\t\t// Node versions, so it could break after a Node version upgrade.\n\t\t\tconst sevenLines = \"1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n1234567890\\n\";\n\t\t\tconst twoLines = \"1234567890123456789012345678901234567890\\n1234567890123456789012345678901234567890\\n\";\n\n\t\t\tassert.deepEqual(render(sevenLines, twoLines),\n\t\t\t\tColors.green(\"expected: \") + Colors.brightYellow.bold(\"'1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890\\\\n'\") + \"\\n\" +\n\t\t\t\tColors.brightRed(\"actual:   \") + Colors.brightYellow.bold(\"'1234567890123456789012345678901234567890\\\\n' +\") + \"\\n\" +\n\t\t\t\tColors.brightYellow.bold(\"  '1234567890123456789012345678901234567890\\\\n'\")\n\t\t\t);\n\t\t});\n\n\t\tfunction render(expected: unknown, actual: unknown): string {\n\t\t\tconst error = new AssertionError({ expected, actual });\n\t\t\treturn TestRenderer.create().renderDiff(error);\n\t\t}\n\n\t});\n\n});\n\nfunction renderCharacterTest(result: TestCaseResult | TestCaseResult[]): string {\n\treturn TestRenderer.create().renderAsCharacters(result);\n}\n\nfunction renderSingleLineTest(result: TestCaseResult | TestCaseResult[]): string {\n\treturn TestRenderer.create().renderAsSingleLines(result);\n}\n\nfunction renderMultiLineTest(result: TestCaseResult | TestCaseResult[]): string {\n\treturn TestRenderer.create().renderAsMultipleLines(result);\n}\n\nfunction renderSingleLineMark(result: TestResult | TestResult[]): string {\n\treturn TestRenderer.create().renderMarksAsLines(result);\n}\n\nfunction createSuite({\n\tname = [],\n\tchildren = [],\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\tchildren?: TestResult[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestSuiteResult {\n\treturn TestResult.suite(name, children, filename, mark);\n}\n\nfunction createPass({\n\tname = [],\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.pass(name, filename, mark);\n}\n\nfunction createFail({\n\tname = [],\n\terror = new Error(\"irrelevant error\"),\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\terror?: unknown,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.fail(name, error, filename, mark);\n}\n\nfunction createSkip({\n\tname = [],\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.skip(name, filename, mark);\n}\n\nfunction createTimeout({\n\tname = [],\n\ttimeout = 42,\n\tfilename = undefined,\n\tmark = TestMark.none,\n}: {\n\tname?: string | string[],\n\ttimeout?: number,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}): TestCaseResult {\n\treturn TestResult.timeout(name, timeout, filename, mark);\n}"],"names":["assert","test","TestRenderer","AssertionError","TestResult","Colors","TestMark","headerColor","brightWhite","bold","highlightColor","describe","it","equal","renderCharacterTest","createPass","white","createFail","brightRed","inverse","createSkip","cyan","dim","createTimeout","purple","results","result","name","renderSingleLineTest","green","brightCyan","brightPurple","renderer","create","renderMultiLineTest","renderNameOnMultipleLines","renderStatusWithMultiLineDetails","fail","renderSingleLineMark","mark","none","skip","only","createSuite","children","render","filename","renderNameOnOneLine","renderStatusAsSingleWord","timeout","error","message","expected","actual","stack","toString","renderDiff","Error","renderMarkAsSingleWord","EXAMPLE_STACK","HIGHLIGHTED_STACK","createResult","undefined","renderStack","deepEqual","brightYellow","oneLine","twoLines","sevenLines","renderAsCharacters","renderAsSingleLines","renderAsMultipleLines","renderMarksAsLines","suite","pass"],"mappings":"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"}