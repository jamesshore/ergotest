{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_suite.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport { Clock } from \"../infrastructure/clock.js\";\nimport { TestCaseResult, TestMark, TestMarkValue, TestResult, TestStatus, TestSuiteResult } from \"./test_result.js\";\nimport path from \"node:path\";\n\n// A simple but full-featured test runner. It allows me to get away from Mocha's idiosyncracies and have\n// more control over test execution, while also shielding me from dependency churn.\n\n\nconst DEFAULT_TIMEOUT_IN_MS = 2000;\n\nexport interface TestConfig {\n\t[name: string]: unknown,\n}\n\nexport interface TestOptions {\n\ttimeout?: Milliseconds,\n\tconfig?: TestConfig,\n\tnotifyFn?: NotifyFn,\n\tclock?: Clock,\n}\n\nexport interface DescribeOptions {\n\ttimeout?: number,\n}\n\nexport interface ItOptions {\n\ttimeout?: number,\n}\n\nexport type NotifyFn = (testResult: TestCaseResult) => void;\n\ninterface Describe {\n\t(\n\t\toptionalName: string | DescribeOptions | DescribeFn | undefined,\n\t\toptionalOptions: DescribeOptions | DescribeFn | undefined,\n\t\tdescribeFn: DescribeFn | undefined,\n\t\tmark: TestMarkValue,\n\t): TestSuite,\n}\ntype DescribeFn = () => void;\n\ninterface It {\n\t(\n\t\tname: string,\n\t\toptionalOptions: ItOptions | ItFn | undefined,\n\t\titFn: ItFn | undefined,\n\t\tmark: TestMarkValue,\n\t): void;\n}\ntype ItFn = (testUtilities: TestParameters) => Promise<void> | void;\n\ntype BeforeAfter = (optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) => void;\n\ntype BeforeAfterDefinition = { options: ItOptions, fnAsync: ItFn };\n\ninterface TestParameters {\n\tgetConfig: <T>(key: string) => T,\n}\n\ntype Milliseconds = number;\n\ninterface RecursiveRunOptions {\n\tname: string[];\n\tfilename?: string;\n\tclock: Clock,\n\tnotifyFn: NotifyFn,\n\ttimeout: Milliseconds,\n\tconfig: TestConfig,\n}\n\ninterface Runnable {\n\t_recursiveRunAsync: (\n\t\tparentMark: TestMarkValue,\n\t\tparentBeforeEachFns: BeforeAfterDefinition[],\n\t\tparentAfterEachFns: BeforeAfterDefinition[],\n\t\toptions: RecursiveRunOptions,\n\t) => Promise<TestResult> | TestResult;\n\t_isDotOnly: () => boolean,\n\t_isSkipped: (mark: TestMarkValue) => boolean,\n}\n\ninterface TestContext {\n\tdescribe: Describe,\n\tit: It,\n\tbeforeAll: BeforeAfter,\n\tafterAll: BeforeAfter,\n\tbeforeEach: BeforeAfter,\n\tafterEach: BeforeAfter,\n}\n\nconst testContext: TestContext[] = [];\n\n/**\n * A simple but full-featured test runner.\n */\nexport class TestSuite implements Runnable {\n\n\tprivate _name: string;\n\tprivate _mark: TestMarkValue;\n\tprivate _tests: Runnable[];\n\tprivate _hasDotOnlyChildren: boolean;\n\tprivate _allChildrenSkipped: boolean;\n\tprivate _beforeAllFns: BeforeAfterDefinition[];\n\tprivate _afterAllFns: BeforeAfterDefinition[];\n\tprivate _beforeEachFns: BeforeAfterDefinition[];\n\tprivate _afterEachFns: BeforeAfterDefinition[];\n\tprivate _timeout?: Milliseconds;\n\tprivate _filename?: string;\n\n\tstatic get DEFAULT_TIMEOUT_IN_MS() {\n\t\treturn DEFAULT_TIMEOUT_IN_MS;\n\t}\n\n\t/**\n\t * Convert a list of test modules into a test suite. Each module needs to export a test suite by using\n\t * {@link TestSuite.create}.\n\t * @param {string[]} moduleFilenames The filenames of the test modules.\n\t * @returns {TestSuite} The test suite.\n\t */\n\tstatic async fromModulesAsync(moduleFilenames: string[]): Promise<TestSuite> {\n\t\tensure.signature(arguments, [ Array ]);\n\n\t\tconst suites = await Promise.all(moduleFilenames.map(filename => loadModuleAsync(filename)));\n\t\treturn new TestSuite(\"\", TestMark.none, { tests: suites });\n\n\t\tasync function loadModuleAsync(filename: string): Promise<TestSuite> {\n\t\t\tconst errorName = `error when importing ${path.basename(filename)}`;\n\n\t\t\tif (!path.isAbsolute(filename)) {\n\t\t\t\treturn createFailure(errorName, `Test module filenames must use absolute paths: ${filename}`);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst { default: suite } = await import(filename);\n\t\t\t\tif (suite instanceof TestSuite) {\n\t\t\t\t\tsuite._setFilename(filename);\n\t\t\t\t\treturn suite;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn createFailure(errorName, `Test module doesn't export a test suite: ${filename}`, filename);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(err) {\n\t\t\t\tconst code = (err as { code: string })?.code;\n\t\t\t\tif (code === \"ERR_MODULE_NOT_FOUND\") {\n\t\t\t\t\treturn createFailure(errorName, `Test module not found: ${filename}`, filename);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn createFailure(errorName, err, filename);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createFailure(name: string, error: unknown, filename?: string) {\n\t\t\treturn new TestSuite(\"\", TestMark.none, { tests: [ new FailureTestCase(name, error, filename) ] });\n\t\t}\n\t}\n\n\t/** @private */\n\tstatic _create(\n\t\tnameOrOptionsOrDescribeFn: string | DescribeOptions | DescribeFn | undefined,\n\t\toptionsOrDescribeFn: DescribeOptions | DescribeFn | undefined,\n\t\tpossibleDescribeFn: DescribeFn | undefined,\n\t\tmark: TestMarkValue,\n\t): TestSuite {\n\t\tconst DescribeOptionsType = { timeout: Number };\n\t\tensure.signature(arguments, [\n\t\t\t[ undefined, DescribeOptionsType, String, Function ],\n\t\t\t[ undefined, DescribeOptionsType, Function ],\n\t\t\t[ undefined, Function ],\n\t\t\tString\n\t\t]);\n\n\t\tconst { name, options, fn } = decipherOverloadedParameters();\n\n\t\tif (fn !== undefined) {\n\t\t\treturn this.#runDescribeFunction(fn, name, mark, options.timeout);\n\t\t}\n\t\telse if (mark === TestMark.only) {\n\t\t\treturn new TestSuite(name, mark, {\n\t\t\t\ttests: [ new FailureTestCase(name, \"Test suite is marked '.only', but has no body\") ],\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn new TestSuite(name, TestMark.skip, { timeout: options.timeout });\n\t\t}\n\n\t\tfunction decipherOverloadedParameters() {\n\t\t\tlet name: string;\n\t\t\tlet options: DescribeOptions | undefined;\n\t\t\tlet fn: DescribeFn | undefined;\n\n\t\t\tswitch (typeof nameOrOptionsOrDescribeFn) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tname = nameOrOptionsOrDescribeFn;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"object\":\n\t\t\t\t\toptions = nameOrOptionsOrDescribeFn;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"function\":\n\t\t\t\t\tfn = nameOrOptionsOrDescribeFn;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"undefined\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tensure.unreachable(`Unknown typeof for nameOrOptionsOrSuiteFn: ${typeof nameOrOptionsOrDescribeFn}`);\n\t\t\t}\n\t\t\tswitch (typeof optionsOrDescribeFn) {\n\t\t\t\tcase \"object\":\n\t\t\t\t\tensure.that(options === undefined, \"Received two options parameters\");\n\t\t\t\t\toptions = optionsOrDescribeFn;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"function\":\n\t\t\t\t\tensure.that(fn === undefined, \"Received two suite function parameters\");\n\t\t\t\t\tfn = optionsOrDescribeFn;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"undefined\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tensure.unreachable(`Unknown typeof for optionsOrSuiteFn: ${typeof optionsOrDescribeFn}`);\n\t\t\t}\n\t\t\tif (possibleDescribeFn !== undefined) {\n\t\t\t\tensure.that(fn === undefined, \"Received two suite function parameters\");\n\t\t\t\tfn = possibleDescribeFn;\n\t\t\t}\n\n\t\t\tname ??= \"\";\n\t\t\toptions ??= {};\n\n\t\t\treturn { name, options, fn };\n\t\t}\n\t}\n\n\tstatic #runDescribeFunction(\n\t\tdescribeFn: DescribeFn,\n\t\tname: string,\n\t\tmark: TestMarkValue,\n\t\ttimeout?: Milliseconds,\n\t): TestSuite {\n\t\tconst tests: Runnable[] = [];\n\t\tconst beforeAllFns: BeforeAfterDefinition[] = [];\n\t\tconst afterAllFns: BeforeAfterDefinition[] = [];\n\t\tconst beforeEachFns: BeforeAfterDefinition[] = [];\n\t\tconst afterEachFns: BeforeAfterDefinition[] = [];\n\n\t\ttestContext.push({\n\t\t\tdescribe(optionalName, optionalOptions, fn, mark) {\n\t\t\t\treturn pushTest(TestSuite._create(optionalName, optionalOptions, fn, mark));\n\t\t\t},\n\t\t\tit(name, optionalOptions, testCaseFn, mark) {\n\t\t\t\tpushTest(new TestCase(name, optionalOptions, testCaseFn, mark));\n\t\t\t},\n\t\t\tbeforeAll: defineBeforeAfterFn(beforeAllFns),\n\t\t\tafterAll: defineBeforeAfterFn(afterAllFns),\n\t\t\tbeforeEach: defineBeforeAfterFn(beforeEachFns),\n\t\t\tafterEach: defineBeforeAfterFn(afterEachFns),\n\t\t});\n\n\t\ttry {\n\t\t\tdescribeFn();\n\t\t}\n\t\tfinally {\n\t\t\ttestContext.pop();\n\t\t}\n\n\t\treturn new TestSuite(name, mark, { tests, beforeAllFns, afterAllFns, beforeEachFns, afterEachFns, timeout });\n\n\t\tfunction pushTest<T extends Runnable>(test: T): T {\n\t\t\ttests.push(test);\n\t\t\treturn test;\n\t\t}\n\n\t\tfunction defineBeforeAfterFn(beforeAfterArray: BeforeAfterDefinition[]) {\n\t\t\treturn function (optionsOrFnAsync: ItOptions | ItFn, possibleFnAsync?: ItFn) {\n\t\t\t\tensure.signature(arguments, [\n\t\t\t\t\t[ { timeout: Number }, Function ],\n\t\t\t\t\t[ undefined, Function ],\n\t\t\t\t]);\n\n\t\t\t\tlet options: ItOptions;\n\t\t\t\tlet fnAsync: ItFn;\n\n\t\t\t\tif (possibleFnAsync === undefined) {\n\t\t\t\t\toptions = {};\n\t\t\t\t\tfnAsync = optionsOrFnAsync as ItFn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toptions = optionsOrFnAsync as ItOptions;\n\t\t\t\t\tfnAsync = possibleFnAsync;\n\t\t\t\t}\n\n\t\t\t\tbeforeAfterArray.push({ options, fnAsync });\n\t\t\t};\n\t\t}\n\t}\n\n\t/** Internal use only. (Use {@link TestSuite.create} or {@link TestSuite.fromModulesAsync} instead.) */\n\tconstructor(name: string, mark: TestMarkValue, {\n\t\ttests = [],\n\t\tbeforeAllFns = [],\n\t\tafterAllFns = [],\n\t\tbeforeEachFns = [],\n\t\tafterEachFns = [],\n\t\ttimeout,\n\t}: {\n\t\ttests?: Runnable[],\n\t\tbeforeAllFns?: BeforeAfterDefinition[],\n\t\tafterAllFns?: BeforeAfterDefinition[],\n\t\tbeforeEachFns?: BeforeAfterDefinition[],\n\t\tafterEachFns?: BeforeAfterDefinition[],\n\t\ttimeout?: Milliseconds,\n\t}) {\n\t\tthis._name = name;\n\t\tthis._mark = mark;\n\t\tthis._tests = tests;\n\t\tthis._hasDotOnlyChildren = this._tests.some(test => test._isDotOnly());\n\t\tthis._allChildrenSkipped = this._tests.every(test => test._isSkipped(this._mark));\n\t\tthis._beforeAllFns = beforeAllFns;\n\t\tthis._afterAllFns = afterAllFns;\n\t\tthis._beforeEachFns = beforeEachFns;\n\t\tthis._afterEachFns = afterEachFns;\n\t\tthis._timeout = timeout;\n\t}\n\n\t/**\n\t * Run the tests in this suite.\n\t * @param {number} [timeout] Default timeout in milliseconds.\n\t * @param {object} [config={}] Configuration data to provide to tests.\n\t * @param {(result: TestResult) => ()} [notifyFn] A function to call each time a test completes. The `result`\n\t *   parameter describes the result of the test—whether it passed, failed, etc.\n\t * @param {Clock} [clock] The clock to use. Meant for internal use.\n\t * @returns {Promise<TestSuiteResult>} The results of the test suite.\n\t */\n\tasync runAsync({\n\t\ttimeout = DEFAULT_TIMEOUT_IN_MS,\n\t\tconfig = {},\n\t\tnotifyFn = () => {},\n\t\tclock = Clock.create(),\n\t}: TestOptions = {}): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [[ undefined, {\n\t\t\ttimeout: [ undefined, Number ],\n\t\t\tconfig: [ undefined, Object ],\n\t\t\tnotifyFn: [ undefined, Function ],\n\t\t\tclock: [ undefined, Clock ],\n\t\t}]]);\n\n\t\treturn await this._recursiveRunAsync(TestMark.only, [], [], {\n\t\t\tclock,\n\t\t\tconfig,\n\t\t\tnotifyFn,\n\t\t\tname: [],\n\t\t\tfilename: this._filename,\n\t\t\ttimeout: this._timeout ?? timeout ?? DEFAULT_TIMEOUT_IN_MS,\n\t\t});\n\t}\n\n\t/** @private */\n\t_setFilename(filename: string) { this._filename = filename; }\n\n\t/** @private */\n\t_isDotOnly(): boolean {\n\t\treturn this._mark === TestMark.only || this._hasDotOnlyChildren;\n\t}\n\n\t/** @private */\n\t_isSkipped(): boolean {\n\t\treturn this._allChildrenSkipped;\n\t}\n\n\t/** @private */\n\tasync _recursiveRunAsync(\n\t\tparentMark: TestMarkValue,\n\t\tparentBeforeEachFns: BeforeAfterDefinition[],\n\t\tparentAfterEachFns: BeforeAfterDefinition[],\n\t\toptions: RecursiveRunOptions,\n\t) {\n\t\tconst name = [ ...options.name ];\n\t\tif (this._name !== \"\") name.push(this._name);\n\t\tconst filename = this._filename ?? options.filename;\n\t\tconst timeout = this._timeout ?? options.timeout;\n\t\toptions = { ...options, name, filename, timeout };\n\n\t\tlet myMark = this._mark;\n\t\tif (myMark === TestMark.none) myMark = parentMark;\n\t\tif (myMark === TestMark.only && this._hasDotOnlyChildren) myMark = TestMark.skip;\n\n\t\tconst beforeEachFns = [ ...parentBeforeEachFns, ...this._beforeEachFns ];\n\t\tconst afterEachFns = [ ...this._afterEachFns, ...parentAfterEachFns ];\n\n\t\tif (!this._allChildrenSkipped) {\n\t\t\tconst beforeResult = await runBeforeOrAfterFnsAsync(\n\t\t\t\t[ ...options.name, \"beforeAll()\" ], this._beforeAllFns, TestMark.none, options,\n\t\t\t);\n\t\t\tif (!isSuccess(beforeResult)) return TestResult.suite(options.name, [ beforeResult ], options.filename, this._mark);\n\t\t}\n\n\t\tconst results = [];\n\t\tfor await (const test of this._tests) {\n\t\t\tresults.push(await test._recursiveRunAsync(myMark, beforeEachFns, afterEachFns, options));\n\t\t}\n\n\t\tif (!this._allChildrenSkipped) {\n\t\t\tconst afterResult = await runBeforeOrAfterFnsAsync(\n\t\t\t\t[ ...options.name, \"afterAll()\" ], this._afterAllFns, TestMark.none, options\n\t\t\t);\n\t\t\tif (!isSuccess(afterResult)) results.push(afterResult);\n\t\t}\n\n\t\treturn TestResult.suite(options.name, results, options.filename, this._mark);\n\t}\n\n}\n\n\nclass TestCase implements Runnable {\n\n\tprotected _name: string;\n\tprivate _timeout?: Milliseconds;\n\tprivate _testFn?: ItFn;\n\tprivate _mark: TestMarkValue;\n\n\tconstructor(\n\t\tname: string,\n\t\toptionsOrTestFn: TestOptions | ItFn | undefined,\n\t\tpossibleTestFn: ItFn | undefined,\n\t\tmark: TestMarkValue\n\t) {\n\t\tensure.signature(arguments, [\n\t\t\tString,\n\t\t\t[ undefined, { timeout: [ undefined, Number ]}, Function ],\n\t\t\t[ undefined, Function ],\n\t\t\tString\n\t\t]);\n\n\t\tthis._name = name;\n\n\t\tswitch (typeof optionsOrTestFn) {\n\t\t\tcase \"object\":\n\t\t\t\tthis._timeout = optionsOrTestFn.timeout;\n\t\t\t\tbreak;\n\t\t\tcase \"function\":\n\t\t\t\tthis._testFn = optionsOrTestFn;\n\t\t\t\tbreak;\n\t\t\tcase \"undefined\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tensure.unreachable(`Unknown typeof optionsOrTestFn: ${typeof optionsOrTestFn}`);\n\t\t}\n\t\tif (possibleTestFn !== undefined) {\n\t\t\tensure.that(this._testFn === undefined, \"Received two test function parameters\");\n\t\t\tthis._testFn = possibleTestFn;\n\t\t}\n\n\t\tthis._mark = mark;\n\t}\n\n\t/** @private */\n\t_isDotOnly(): boolean {\n\t\tensure.signature(arguments, []);\n\t\treturn this._mark === TestMark.only;\n\t}\n\n\t/** @private */\n\t_isSkipped(parentMark: TestMarkValue): boolean {\n\t\tconst inheritedMark = this._mark === TestMark.none ? parentMark : this._mark;\n\t\treturn inheritedMark === TestMark.skip;\n\t}\n\n\t/** @private */\n\tasync _recursiveRunAsync(\n\t\tparentMark: TestMarkValue,\n\t\tbeforeEachFns: BeforeAfterDefinition[],\n\t\tafterEachFns: BeforeAfterDefinition[],\n\t\toptions: RecursiveRunOptions,\n\t): Promise<TestCaseResult> {\n\t\tconst name = [ ...options.name ];\n\t\tname.push(this._name !== \"\" ? this._name : \"(unnamed)\");\n\t\toptions = { ...options, name };\n\n\t\tlet result;\n\t\tif (this._testFn !== undefined) {\n\t\t\tif (!this._isSkipped(parentMark)) {\n\t\t\t\tresult = await runTestAsync(this);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = TestResult.skip(name, options.filename, this._mark);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (this._mark !== TestMark.only) {\n\t\t\t\tresult = TestResult.skip(name, options.filename, TestMark.skip);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = TestResult.fail(name, \"Test is marked '.only', but it has no body\", options.filename, this._mark);\n\t\t\t}\n\t\t}\n\n\t\toptions.notifyFn(result);\n\t\treturn result;\n\n\t\tasync function runTestAsync(self: TestCase): Promise<TestCaseResult> {\n\t\t\tconst beforeResult = await runBeforeOrAfterFnsAsync(options.name, beforeEachFns, self._mark, options);\n\t\t\tif (!isSuccess(beforeResult)) return beforeResult;\n\n\t\t\tconst itResult = await runTestFnAsync(options.name, self._testFn!, self._mark, self._timeout, options);\n\t\t\tconst afterResult = await runBeforeOrAfterFnsAsync(options.name, afterEachFns, self._mark, options);\n\n\t\t\tif (!isSuccess(itResult)) return itResult;\n\t\t\telse return afterResult;\n\t\t}\n\t}\n}\n\n\nclass FailureTestCase extends TestCase {\n\n\tprivate _filename?: string;\n\tprivate _error: unknown;\n\n\tconstructor(name: string, error: unknown, filename?: string) {\n\t\tsuper(name, undefined, undefined, TestMark.none);\n\n\t\tthis._filename = filename;\n\t\tthis._error = error;\n\t}\n\n\toverride async _recursiveRunAsync(\n\t\tparentMark: TestMarkValue,\n\t\tbeforeEachFns: BeforeAfterDefinition[],\n\t\tafterEachFns: BeforeAfterDefinition[],\n\t\toptions: RecursiveRunOptions,\n\t): Promise<TestCaseResult> {\n\t\tconst result = TestResult.fail([ this._name ], this._error, this._filename);\n\t\toptions.notifyFn(result);\n\t\treturn await result;\n\t}\n\n}\n\n\nasync function runBeforeOrAfterFnsAsync(\n\tname: string[],\n\tbeforeAfterArray: BeforeAfterDefinition[],\n\tmark: TestMarkValue,\n\toptions: RecursiveRunOptions,\n): Promise<TestCaseResult> {\n\tfor await (const beforeAfter of beforeAfterArray) {\n\t\tconst result = await runTestFnAsync(name, beforeAfter.fnAsync, mark, beforeAfter.options.timeout, options);\n\t\tif (!isSuccess(result)) return result;\n\t}\n\treturn TestResult.pass(name, options.filename, mark);\n}\n\nasync function runTestFnAsync(\n\tname: string[],\n\tfn: ItFn,\n\tmark: TestMarkValue,\n\ttestTimeout: Milliseconds | undefined,\n\t{ clock, filename, timeout, config }: RecursiveRunOptions,\n): Promise<TestCaseResult> {\n\tconst getConfig = <T>(name: string) => {\n\t\tif (config[name] === undefined) throw new Error(`No test config found for name '${name}'`);\n\t\treturn config[name] as T;\n\t};\n\n\ttimeout = testTimeout ?? timeout;\n\n\treturn await clock.timeoutAsync(timeout, async () => {\n\t\ttry {\n\t\t\tawait fn({ getConfig });\n\t\t\treturn TestResult.pass(name, filename, mark);\n\t\t}\n\t\tcatch (err) {\n\t\t\treturn TestResult.fail(name, err, filename, mark);\n\t\t}\n\t}, async () => {\n\t\treturn await TestResult.timeout(name, timeout, filename, mark);\n\t});\n}\n\nfunction isSuccess(result: TestCaseResult) {\n\treturn result.status === TestStatus.pass || result.status === TestStatus.skip;\n}\n\n/**\n * Defines a test suite. Add `.skip` to skip this test suite and `.only` to only run this test suite.\n * @param {string} [optionalName] The name of the test suite. You can skip this parameter and pass\n *   {@link optionalOptions} or {@link fn} instead.\n * @param {DescribeOptions} [optionalOptions] The test suite options. You can skip this parameter and pass {@link fn}\n *   instead.\n * @param {function} [fn] The body of the test suite. In the body, call {@link describe}, {@link it}, {@link\n *   beforeAll}, {@link afterAll}, {@link beforeEach}, and {@link afterEach} to define the tests in the suite. If\n *   undefined, this test suite will be skipped.\n * @returns {TestSuite} The test suite. You’ll typically ignore the return value.\n */\nexport function describe(\n\toptionalName?: string | DescribeOptions | DescribeFn,\n\toptionalOptions?: DescribeOptions | DescribeFn,\n\tfn?: DescribeFn,\n) {\n\treturn startTest(optionalName, optionalOptions, fn, TestMark.none);\n}\n\ndescribe.skip = function(\n\toptionalName?: string | DescribeOptions | DescribeFn,\n\toptionalOptions?: DescribeOptions | DescribeFn,\n\tfn?: DescribeFn,\n) {\n\treturn startTest(optionalName, optionalOptions, fn, TestMark.skip);\n};\n\ndescribe.only = function(\n\toptionalName?: string | DescribeOptions | DescribeFn,\n\toptionalOptions?: DescribeOptions | DescribeFn,\n\tfn?: DescribeFn,\n) {\n\treturn startTest(optionalName, optionalOptions, fn, TestMark.only);\n};\n\nfunction startTest(\n\toptionalName: string | DescribeOptions | DescribeFn | undefined,\n\toptionalOptions: DescribeOptions | DescribeFn | undefined,\n\tfn: DescribeFn | undefined,\n\tmark: TestMarkValue,\n): TestSuite {\n\treturn testContext.length === 0 ?\n\t\tTestSuite._create(optionalName, optionalOptions, fn, mark) :\n\t\tcurrentContext(\"describe\").describe(optionalName, optionalOptions, fn, mark);\n}\n\n/**\n * Adds a test to the current test suite. Must be run inside of a {@link test} or {@link describe} function. Add\n * `.skip` to skip this test and `.only` to only run this test.\n * @param {string} name The name of the test.\n * @param {ItOptions} [optionalOptions] The test options. You can skip this parameter and pass {@link fnAsync} instead.\n * @param {function} [fnAsync] The body of the test. May be synchronous or asynchronous. If undefined, this test will be\n *   skipped.\n */\nexport function it(name: string, optionalOptions?: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it(name, optionalOptions, fnAsync, TestMark.none);\n}\n\nit.skip = function it(name: string, optionalOptions?: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it(name, optionalOptions, fnAsync, TestMark.skip);\n};\n\nit.only = function it(name: string, optionalOptions?: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it(name, optionalOptions, fnAsync, TestMark.only);\n};\n\n/**\n * Adds a function to run before all the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} fnAsync The function to run. May be synchronous or asynchronous.\n */\nexport function beforeAll(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"beforeAll\").beforeAll(optionalOptions, fnAsync);\n}\n\n/**\n * Adds a function to run after all the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} [fnAsync] The function to run. May be synchronous or asynchronous.\n */\nexport function afterAll(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"afterAll\").afterAll(optionalOptions, fnAsync);\n}\n\n/**\n * Adds a function to run bfeore each of the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} [fnAsync] The function to run. May be synchronous or asynchronous.\n */\nexport function beforeEach(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"beforeEach\").beforeEach(optionalOptions, fnAsync);\n}\n\n/**\n * Adds a function to run after each of the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} [fnAsync] The function to run. May be synchronous or asynchronous.\n */\nexport function afterEach(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"afterEach\").afterEach(optionalOptions, fnAsync);\n}\n\nfunction currentContext(functionName: string) {\n\tensure.that(testContext.length > 0, `${functionName}() must be run inside describe()`);\n\n\treturn testContext[testContext.length - 1];\n}"],"names":["ensure","Clock","TestMark","TestResult","TestStatus","path","DEFAULT_TIMEOUT_IN_MS","testContext","TestSuite","_name","_mark","_tests","_hasDotOnlyChildren","_allChildrenSkipped","_beforeAllFns","_afterAllFns","_beforeEachFns","_afterEachFns","_timeout","_filename","fromModulesAsync","moduleFilenames","signature","arguments","Array","suites","Promise","all","map","filename","loadModuleAsync","none","tests","errorName","basename","isAbsolute","createFailure","default","suite","_setFilename","err","code","name","error","FailureTestCase","_create","nameOrOptionsOrDescribeFn","optionsOrDescribeFn","possibleDescribeFn","mark","DescribeOptionsType","timeout","Number","undefined","String","Function","options","fn","decipherOverloadedParameters","only","skip","unreachable","that","describeFn","beforeAllFns","afterAllFns","beforeEachFns","afterEachFns","push","describe","optionalName","optionalOptions","pushTest","it","testCaseFn","TestCase","beforeAll","defineBeforeAfterFn","afterAll","beforeEach","afterEach","pop","test","beforeAfterArray","optionsOrFnAsync","possibleFnAsync","fnAsync","constructor","some","_isDotOnly","every","_isSkipped","runAsync","config","notifyFn","clock","create","Object","_recursiveRunAsync","parentMark","parentBeforeEachFns","parentAfterEachFns","myMark","beforeResult","runBeforeOrAfterFnsAsync","isSuccess","results","afterResult","_testFn","optionsOrTestFn","possibleTestFn","inheritedMark","result","runTestAsync","fail","self","itResult","runTestFnAsync","_error","beforeAfter","pass","testTimeout","getConfig","Error","timeoutAsync","status","startTest","length","currentContext","functionName"],"mappings":"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"}