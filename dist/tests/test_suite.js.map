{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_suite.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport { Clock } from \"../infrastructure/clock.js\";\nimport { TestCaseResult, TestMark, TestMarkValue, TestResult, TestStatus, TestSuiteResult } from \"./test_result.js\";\nimport path from \"node:path\";\n\n// A simple but full-featured test runner. It allows me to get away from Mocha's idiosyncracies and have\n// more control over test execution, while also shielding me from dependency churn.\n\n\nconst DEFAULT_TIMEOUT_IN_MS = 2000;\n\nexport interface TestOptions {\n\tconfig?: Record<string, unknown>,\n\tnotifyFn?: NotifyFn,\n\tclock?: Clock,\n}\n\nexport type NotifyFn = (testResult: TestCaseResult) => void;\n\nexport interface Describe {\n\t(optionalName?: string | DescribeFn, describeFn?: DescribeFn): TestSuite,\n\tskip: (optionalName?: string | DescribeFn, descrbeFn?: DescribeFn) => TestSuite,\n\tonly: (optionalName?: string | DescribeFn, describeFn?: DescribeFn) => TestSuite,\n}\n\ninterface It {\n\t(name: string, itFn?: ItFn): void;\n\tskip: (name: string, itFn?: ItFn) => void,\n\tonly: (name: string, itFn?: ItFn) => void,\n}\n\ntype BeforeAfter = (fn: Test) => void;\n\nexport interface SuiteParameters {\n\tdescribe: Describe,\n\tit: It,\n\tbeforeAll: BeforeAfter,\n\tafterAll: BeforeAfter,\n\tbeforeEach: BeforeAfter,\n\tafterEach: BeforeAfter,\n\tsetTimeout: (newTimeout: Milliseconds) => void,\n}\n\nexport interface TestParameters {\n\tgetConfig: <T>(key: string) => T,\n}\n\nexport type DescribeFn = (suiteUtilities: SuiteParameters) => void;\nexport type Test = (testUtilities: TestParameters) => Promise<void> | void;\nexport type ItFn = Test;\nexport type BeforeAfterFn = Test;\ntype Milliseconds = number;\n\nexport interface TestConfig {\n\t[name: string]: unknown,\n}\n\ninterface RecursiveRunOptions {\n\tname: string[];\n\tfilename?: string;\n\tclock: Clock,\n\tnotifyFn: NotifyFn,\n\ttimeout: Milliseconds,\n\tconfig: TestConfig,\n}\n\ninterface Runnable {\n\t_recursiveRunAsync: (\n\t\tparentMark: TestMarkValue,\n\t\tparentBeforeEachFns: Test[],\n\t\tparentAfterEachFns: Test[],\n\t\toptions: RecursiveRunOptions,\n\t) => Promise<TestResult> | TestResult;\n\t_isDotOnly: () => boolean,\n\t_isSkipped: (mark: TestMarkValue) => boolean,\n}\n\nlet testContext: Omit<SuiteParameters, \"setTimeout\">[] = [];\n\n/**\n * A simple but full-featured test runner. It's notable for not using globals.\n */\nexport class TestSuite implements Runnable {\n\n\tstatic get DEFAULT_TIMEOUT_IN_MS() {\n\t\treturn DEFAULT_TIMEOUT_IN_MS;\n\t}\n\n\t/**\n\t * @returns {function} A function for creating a test suite. In your test module, call this function and export the\n\t *   result.\n\t */\n\tstatic get create(): Describe {\n\t\tconst result: Describe = (optionalName, suiteFn) => this._create(optionalName, suiteFn, TestMark.none);\n\t\tresult.skip = (optionalName, suiteFn) => this._create(optionalName, suiteFn, TestMark.skip);\n\t\tresult.only = (optionalName, suiteFn) => this._create(optionalName, suiteFn, TestMark.only);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Convert a list of test modules into a test suite. Each module needs to export a test suite by using\n\t * {@link TestSuite.create}.\n\t * @param {string[]} moduleFilenames The filenames of the test modules.\n\t * @returns {TestSuite} The test suite.\n\t */\n\tstatic async fromModulesAsync(moduleFilenames: string[]): Promise<TestSuite> {\n\t\tensure.signature(arguments, [ Array ]);\n\n\t\tconst suites = await Promise.all(moduleFilenames.map(filename => loadModuleAsync(filename)));\n\t\treturn new TestSuite(\"\", TestMark.none, { tests: suites });\n\n\t\tasync function loadModuleAsync(filename: string): Promise<TestSuite> {\n\t\t\tconst errorName = `error when importing ${path.basename(filename)}`;\n\n\t\t\tif (!path.isAbsolute(filename)) {\n\t\t\t\treturn createFailure(errorName, `Test module filenames must use absolute paths: ${filename}`);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst { default: suite } = await import(filename);\n\t\t\t\tif (suite instanceof TestSuite) {\n\t\t\t\t\tsuite._setFilename(filename);\n\t\t\t\t\treturn suite;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn createFailure(errorName, `Test module doesn't export a test suite: ${filename}`, filename);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(err) {\n\t\t\t\tconst code = (err as { code: string })?.code;\n\t\t\t\tif (code === \"ERR_MODULE_NOT_FOUND\") {\n\t\t\t\t\treturn createFailure(errorName, `Test module not found: ${filename}`, filename);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn createFailure(errorName, err, filename);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createFailure(name: string, error: unknown, filename?: string) {\n\t\t\treturn new TestSuite(\"\", TestMark.none, { tests: [ new FailureTestCase(name, error, filename) ] });\n\t\t}\n\t}\n\n\tstatic _create(\n\t\tnameOrSuiteFn: string | DescribeFn | undefined,\n\t\tpossibleSuiteFn: DescribeFn | undefined,\n\t\tmark: TestMarkValue,\n\t): TestSuite {\n\t\tensure.signature(arguments, [ [ undefined, String, Function ], [ undefined, Function ], String ]);\n\n\t\tlet name: string;\n\t\tlet suiteFn: DescribeFn | undefined;\n\n\t\tif (nameOrSuiteFn instanceof Function || (nameOrSuiteFn === undefined && possibleSuiteFn === undefined)) {\n\t\t\tname = \"\";\n\t\t\tsuiteFn = nameOrSuiteFn;\n\t\t}\n\t\telse {\n\t\t\tname = nameOrSuiteFn ?? \"\";\n\t\t\tsuiteFn = possibleSuiteFn;\n\t\t}\n\n\t\tif (suiteFn !== undefined) {\n\t\t\treturn this.#runDescribeFunction(suiteFn, name, mark);\n\t\t}\n\t\telse if (mark === TestMark.only) {\n\t\t\treturn new TestSuite(name, mark, {\n\t\t\t\ttests: [ new FailureTestCase(name, \"Test suite is marked '.only', but has no body\") ],\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn new TestSuite(name, TestMark.skip, {});\n\t\t}\n\t}\n\n\tstatic #runDescribeFunction(\n\t\tdescribeFn: DescribeFn,\n\t\tname: string,\n\t\tmark: TestMarkValue,\n\t): TestSuite {\n\t\tconst tests: Runnable[] = [];\n\t\tconst beforeAllFns: Test[] = [];\n\t\tconst afterAllFns: Test[] = [];\n\t\tconst beforeEachFns: Test[] = [];\n\t\tconst afterEachFns: Test[] = [];\n\t\tlet timeout: number | undefined;\n\n\t\tconst pushTest = <T extends Runnable>(test: T): T => {\n\t\t\ttests.push(test);\n\t\t\treturn test;\n\t\t};\n\n\t\tconst result: Describe = (optionalName, suiteFn) => this._create(optionalName, suiteFn, TestMark.none);\n\t\tresult.skip = (optionalName, suiteFn) => this._create(optionalName, suiteFn, TestMark.skip);\n\t\tresult.only = (optionalName, suiteFn) => this._create(optionalName, suiteFn, TestMark.only);\n\n\t\tconst describe: Describe = (optionalName, suiteFn) => pushTest(TestSuite._create(optionalName, suiteFn, TestMark.none));\n\t\tdescribe.skip = (optionalName, describeFn) => pushTest(TestSuite._create(optionalName, describeFn, TestMark.skip));\n\t\tdescribe.only = (optionalName, suiteFn) => pushTest(TestSuite._create(optionalName, suiteFn, TestMark.only));\n\n\t\tconst it: It = (name, testCaseFn) => pushTest(new TestCase(name, testCaseFn, TestMark.none));\n\t\tit.skip = (name, testCaseFn) => pushTest(new TestCase(name, testCaseFn, TestMark.skip));\n\t\tit.only = (name, testCaseFn) => pushTest(new TestCase(name, testCaseFn, TestMark.only));\n\n\t\ttestContext.push({\n\t\t\tdescribe,\n\t\t\tit,\n\t\t\tbeforeAll: (fnAsync) => { beforeAllFns.push(fnAsync); },\n\t\t\tafterAll: (fnAsync) => { afterAllFns.push(fnAsync); },\n\t\t\tbeforeEach: (fnAsync) => { beforeEachFns.push(fnAsync); },\n\t\t\tafterEach: (fnAsync) => { afterEachFns.push(fnAsync); },\n\t\t});\n\n\t\ttry {\n\t\t\tdescribeFn({\n\t\t\t\tdescribe,\n\t\t\t\tit,\n\t\t\t\tbeforeAll: (fnAsync) => { beforeAllFns.push(fnAsync); },\n\t\t\t\tafterAll: (fnAsync) => { afterAllFns.push(fnAsync); },\n\t\t\t\tbeforeEach: (fnAsync) => { beforeEachFns.push(fnAsync); },\n\t\t\t\tafterEach: (fnAsync) => { afterEachFns.push(fnAsync); },\n\t\t\t\tsetTimeout: (newTimeoutInMs) => { timeout = newTimeoutInMs; },\n\t\t\t});\n\t\t}\n\t\tfinally {\n\t\t\ttestContext.pop();\n\t\t}\n\n\t\treturn new TestSuite(name, mark, { tests, beforeAllFns, afterAllFns, beforeEachFns, afterEachFns, timeout });\n\t}\n\n\tprivate _name: string;\n\tprivate _mark: TestMarkValue;\n\tprivate _tests: Runnable[];\n\tprivate _hasDotOnlyChildren: boolean;\n\tprivate _allChildrenSkipped: boolean;\n\tprivate _beforeAllFns: BeforeAfterFn[];\n\tprivate _afterAllFns: BeforeAfterFn[];\n\tprivate _beforeEachFns: BeforeAfterFn[];\n\tprivate _afterEachFns: BeforeAfterFn[];\n\tprivate _timeout?: Milliseconds;\n\tprivate _filename?: string;\n\n\t/** Internal use only. (Use {@link TestSuite.create} or {@link TestSuite.fromModulesAsync} instead.) */\n\tconstructor(name: string, mark: TestMarkValue, {\n\t\ttests = [],\n\t\tbeforeAllFns = [],\n\t\tafterAllFns = [],\n\t\tbeforeEachFns = [],\n\t\tafterEachFns = [],\n\t\ttimeout,\n\t}: {\n\t\ttests?: Runnable[],\n\t\tbeforeAllFns?: BeforeAfterFn[],\n\t\tafterAllFns?: BeforeAfterFn[],\n\t\tbeforeEachFns?: BeforeAfterFn[],\n\t\tafterEachFns?: BeforeAfterFn[],\n\t\ttimeout?: Milliseconds,\n\t}) {\n\n\t\tthis._name = name;\n\t\tthis._mark = mark;\n\t\tthis._tests = tests;\n\t\tthis._hasDotOnlyChildren = this._tests.some(test => test._isDotOnly());\n\t\tthis._allChildrenSkipped = this._tests.every(test => test._isSkipped(this._mark));\n\t\tthis._beforeAllFns = beforeAllFns;\n\t\tthis._afterAllFns = afterAllFns;\n\t\tthis._beforeEachFns = beforeEachFns;\n\t\tthis._afterEachFns = afterEachFns;\n\t\tthis._timeout = timeout;\n\t}\n\n\t/**\n\t * Run the tests in this suite.\n\t * @param {object} [config={}] Configuration data to provide to tests.\n\t * @param {(result: TestResult) => ()} [notifyFn] A function to call each time a test completes. The `result`\n\t *   parameter describes the result of the testâ€”whether it passed, failed, etc.\n\t * @param {Clock} [clock] The clock to use. Meant for internal use.\n\t * @returns {Promise<TestSuiteResult>} The results of the test suite.\n\t */\n\tasync runAsync({\n\t\tconfig = {},\n\t\tnotifyFn = () => {},\n\t\tclock = Clock.create(),\n\t}: TestOptions = {}): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [[ undefined, {\n\t\t\tconfig: [ undefined, Object ],\n\t\t\tnotifyFn: [ undefined, Function ],\n\t\t\tclock: [ undefined, Clock ],\n\t\t}]]);\n\n\t\treturn await this._recursiveRunAsync(TestMark.only, [], [], {\n\t\t\tclock,\n\t\t\tconfig,\n\t\t\tnotifyFn,\n\t\t\tname: [],\n\t\t\tfilename: this._filename,\n\t\t\ttimeout: this._timeout ?? DEFAULT_TIMEOUT_IN_MS,\n\t\t});\n\t}\n\n\t/** @private */\n\t_setFilename(filename: string) { this._filename = filename; }\n\n\t/** @private */\n\t_isDotOnly(): boolean {\n\t\treturn this._mark === TestMark.only || this._hasDotOnlyChildren;\n\t}\n\n\t/** @private */\n\t_isSkipped(): boolean {\n\t\treturn this._allChildrenSkipped;\n\t}\n\n\t/** @private */\n\tasync _recursiveRunAsync(\n\t\tparentMark: TestMarkValue,\n\t\tparentBeforeEachFns: Test[],\n\t\tparentAfterEachFns: Test[],\n\t\toptions: RecursiveRunOptions,\n\t) {\n\t\tconst name = [ ...options.name ];\n\t\tif (this._name !== \"\") name.push(this._name);\n\t\tconst filename = this._filename ?? options.filename;\n\t\tconst timeout = this._timeout ?? options.timeout;\n\t\toptions = { ...options, name, filename, timeout };\n\n\t\tlet myMark = this._mark;\n\t\tif (myMark === TestMark.none) myMark = parentMark;\n\t\tif (myMark === TestMark.only && this._hasDotOnlyChildren) myMark = TestMark.skip;\n\n\t\tconst beforeEachFns = [ ...parentBeforeEachFns, ...this._beforeEachFns ];\n\t\tconst afterEachFns = [ ...this._afterEachFns, ...parentAfterEachFns ];\n\n\t\tif (!this._allChildrenSkipped) {\n\t\t\tconst beforeResult = await runBeforeOrAfterFnsAsync(\n\t\t\t\t[ ...options.name, \"beforeAll()\" ], this._beforeAllFns, TestMark.none, options,\n\t\t\t);\n\t\t\tif (!isSuccess(beforeResult)) return TestResult.suite(options.name, [ beforeResult ], options.filename, this._mark);\n\t\t}\n\n\t\tconst results = [];\n\t\tfor await (const test of this._tests) {\n\t\t\tresults.push(await test._recursiveRunAsync(myMark, beforeEachFns, afterEachFns, options));\n\t\t}\n\n\t\tif (!this._allChildrenSkipped) {\n\t\t\tconst afterResult = await runBeforeOrAfterFnsAsync(\n\t\t\t\t[ ...options.name, \"afterAll()\" ], this._afterAllFns, TestMark.none, options\n\t\t\t);\n\t\t\tif (!isSuccess(afterResult)) results.push(afterResult);\n\t\t}\n\n\t\treturn TestResult.suite(options.name, results, options.filename, this._mark);\n\t}\n\n}\n\n\nclass TestCase implements Runnable {\n\n\tprotected _name: string;\n\tprivate _testFn?: ItFn;\n\tprivate _mark: TestMarkValue;\n\n\tconstructor(name: string, testFn: ItFn | undefined, mark: TestMarkValue) {\n\t\tensure.signature(arguments, [ String, [ undefined, Function ], String ]);\n\n\t\tthis._name = name;\n\t\tthis._testFn = testFn;\n\t\tthis._mark = mark;\n\t}\n\n\t/** @private */\n\t_isDotOnly(): boolean {\n\t\tensure.signature(arguments, []);\n\t\treturn this._mark === TestMark.only;\n\t}\n\n\t/** @private */\n\t_isSkipped(parentMark: TestMarkValue): boolean {\n\t\tconst inheritedMark = this._mark === TestMark.none ? parentMark : this._mark;\n\t\treturn inheritedMark === TestMark.skip;\n\t}\n\n\t/** @private */\n\tasync _recursiveRunAsync(\n\t\tparentMark: TestMarkValue,\n\t\tbeforeEachFns: Test[],\n\t\tafterEachFns: Test[],\n\t\toptions: RecursiveRunOptions,\n\t): Promise<TestCaseResult> {\n\t\tconst name = [ ...options.name ];\n\t\tname.push(this._name !== \"\" ? this._name : \"(unnamed)\");\n\t\toptions = { ...options, name };\n\n\t\tlet result;\n\t\tif (this._testFn !== undefined) {\n\t\t\tif (!this._isSkipped(parentMark)) {\n\t\t\t\tresult = await runTestAsync(this);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = TestResult.skip(name, options.filename, this._mark);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (this._mark !== TestMark.only) {\n\t\t\t\tresult = TestResult.skip(name, options.filename, TestMark.skip);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = TestResult.fail(name, \"Test is marked '.only', but it has no body\", options.filename, this._mark);\n\t\t\t}\n\t\t}\n\n\t\toptions.notifyFn(result);\n\t\treturn result;\n\n\t\tasync function runTestAsync(self: TestCase): Promise<TestCaseResult> {\n\t\t\tconst beforeResult = await runBeforeOrAfterFnsAsync(options.name, beforeEachFns, self._mark, options);\n\t\t\tif (!isSuccess(beforeResult)) return beforeResult;\n\n\t\t\tconst itResult = await runTestFnAsync(options.name, self._testFn!, self._mark, options);\n\t\t\tconst afterResult = await runBeforeOrAfterFnsAsync(options.name, afterEachFns, self._mark, options);\n\n\t\t\tif (!isSuccess(itResult)) return itResult;\n\t\t\telse return afterResult;\n\t\t}\n\t}\n}\n\n\nclass FailureTestCase extends TestCase {\n\n\tprivate _filename?: string;\n\tprivate _error: unknown;\n\n\tconstructor(name: string, error: unknown, filename?: string) {\n\t\tsuper(name, undefined, TestMark.none);\n\n\t\tthis._filename = filename;\n\t\tthis._error = error;\n\t}\n\n\toverride async _recursiveRunAsync(\n\t\tparentMark: TestMarkValue,\n\t\tbeforeEachFns: Test[],\n\t\tafterEachFns: Test[],\n\t\toptions: RecursiveRunOptions,\n\t): Promise<TestCaseResult> {\n\t\tconst result = TestResult.fail([ this._name ], this._error, this._filename);\n\t\toptions.notifyFn(result);\n\t\treturn await result;\n\t}\n\n}\n\n\nasync function runBeforeOrAfterFnsAsync(\n\tname: string[],\n\tfns: Test[],\n\tmark: TestMarkValue,\n\toptions: RecursiveRunOptions,\n): Promise<TestCaseResult> {\n\tfor await (const fn of fns) {\n\t\tconst result = await runTestFnAsync(name, fn, mark, options);\n\t\tif (!isSuccess(result)) return result;\n\t}\n\treturn TestResult.pass(name, options.filename, mark);\n}\n\nasync function runTestFnAsync(\n\tname: string[],\n\tfn: Test,\n\tmark: TestMarkValue,\n\t{ clock, filename, timeout, config }: RecursiveRunOptions,\n): Promise<TestCaseResult> {\n\tconst getConfig = <T>(name: string) => {\n\t\tif (config[name] === undefined) throw new Error(`No test config found for name '${name}'`);\n\t\treturn config[name] as T;\n\t};\n\n\treturn await clock.timeoutAsync(timeout, async () => {\n\t\ttry {\n\t\t\tawait fn({ getConfig });\n\t\t\treturn TestResult.pass(name, filename, mark);\n\t\t}\n\t\tcatch (err) {\n\t\t\treturn TestResult.fail(name, err, filename, mark);\n\t\t}\n\t}, async () => {\n\t\treturn await TestResult.timeout(name, timeout, filename, mark);\n\t});\n}\n\nfunction isSuccess(result: TestCaseResult) {\n\treturn result.status === TestStatus.pass || result.status === TestStatus.skip;\n}\n\n\nfunction startTest(\n\tnameOrSuiteFn: string | DescribeFn | undefined,\n\tpossibleSuiteFn: DescribeFn | undefined,\n\tmark: TestMarkValue,\n): TestSuite {\n\tensure.that(testContext.length === 0, \"test() is not re-entrant [don't run test() inside of test()]\");\n\ttestContext = [];   // delete this line when the above is uncommented\n\n\ttry {\n\t\treturn TestSuite._create(nameOrSuiteFn, possibleSuiteFn, mark);\n\t}\n\tfinally {\n\t\tensure.that(testContext.length === 0, \"test() didn't clear its context; must be an error in ergotest\");\n\t}\n}\n\nexport function test(optionalName?: string | DescribeFn, fn?: DescribeFn) {\n\treturn startTest(optionalName, fn, TestMark.none);\n}\n\ntest.skip = function(optionalName?: string | DescribeFn, fn?: DescribeFn) {\n\treturn startTest(optionalName, fn, TestMark.skip);\n};\n\ntest.only = function(optionalName?: string | DescribeFn, fn?: DescribeFn) {\n\treturn startTest(optionalName, fn, TestMark.only);\n};\n\nexport function describe(optionalName?: string | DescribeFn, fn?: DescribeFn) {\n\tcurrentContext(\"describe\").describe(optionalName, fn);\n}\n\ndescribe.skip = function(optionalName?: string | DescribeFn, fn?: DescribeFn) {\n\tcurrentContext(\"describe\").describe.skip(optionalName, fn);\n};\n\ndescribe.only = function(optionalName?: string | DescribeFn, fn?: DescribeFn) {\n\tcurrentContext(\"describe\").describe.only(optionalName, fn);\n};\n\nexport function it(name: string, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it(name, fnAsync);\n}\n\nit.skip = function(name: string, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it.skip(name, fnAsync);\n};\n\nit.only = function(name: string, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it.only(name, fnAsync);\n};\n\nexport function beforeAll(fnAsync: Test) {\n\tcurrentContext(\"beforeAll\").beforeAll(fnAsync);\n}\n\nexport function afterAll(fnAsync: Test) {\n\tcurrentContext(\"afterAll\").afterAll(fnAsync);\n}\n\nexport function beforeEach(fnAsync: Test) {\n\tcurrentContext(\"beforeEach\").beforeEach(fnAsync);\n}\n\nexport function afterEach(fnAsync: Test) {\n\tcurrentContext(\"afterEach\").afterEach(fnAsync);\n}\n\nfunction currentContext(functionName: string) {\n\tensure.that(testContext.length > 0, `${functionName}() must be run inside test()`);\n\n\treturn testContext[testContext.length - 1];\n}"],"names":["ensure","Clock","TestMark","TestResult","TestStatus","path","DEFAULT_TIMEOUT_IN_MS","testContext","TestSuite","create","result","optionalName","suiteFn","_create","none","skip","only","fromModulesAsync","moduleFilenames","signature","arguments","Array","suites","Promise","all","map","filename","loadModuleAsync","tests","errorName","basename","isAbsolute","createFailure","default","suite","_setFilename","err","code","name","error","FailureTestCase","nameOrSuiteFn","possibleSuiteFn","mark","undefined","String","Function","describeFn","beforeAllFns","afterAllFns","beforeEachFns","afterEachFns","timeout","pushTest","test","push","describe","it","testCaseFn","TestCase","beforeAll","fnAsync","afterAll","beforeEach","afterEach","setTimeout","newTimeoutInMs","pop","_name","_mark","_tests","_hasDotOnlyChildren","_allChildrenSkipped","_beforeAllFns","_afterAllFns","_beforeEachFns","_afterEachFns","_timeout","_filename","constructor","some","_isDotOnly","every","_isSkipped","runAsync","config","notifyFn","clock","Object","_recursiveRunAsync","parentMark","parentBeforeEachFns","parentAfterEachFns","options","myMark","beforeResult","runBeforeOrAfterFnsAsync","isSuccess","results","afterResult","_testFn","testFn","inheritedMark","runTestAsync","fail","self","itResult","runTestFnAsync","_error","fns","fn","pass","getConfig","Error","timeoutAsync","status","startTest","that","length","currentContext","functionName"],"mappings":"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"}