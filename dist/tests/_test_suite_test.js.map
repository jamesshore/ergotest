{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_suite_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport { assert, test, describe, it } from \"../tests.js\";\nimport {\n\tTestSuite,\n\ttest as test_sut,\n\tdescribe as describe_sut,\n\tit as it_sut,\n\tbeforeAll as beforeAll_sut,\n\tafterAll as afterAll_sut,\n\tbeforeEach as beforeEach_sut,\n\tafterEach as afterEach_sut,\n} from \"./test_suite.js\";\nimport { Clock } from \"../infrastructure/clock.js\";\nimport { TestStatus, TestResult, TestCaseResult, TestMark, TestMarkValue } from \"./test_result.js\";\nimport path from \"node:path\";\n// dependency: ./_module_passes.js\n// dependency: ./_module_throws.js\n// dependency: ./_module_no_export.js\n\n// Tests for my test library. (How meta.)\n\nconst SUCCESS_MODULE_PATH = path.resolve(import.meta.dirname, \"./_module_passes.js\");\nconst THROWS_MODULE_PATH = path.resolve(import.meta.dirname, \"./_module_throws.js\");\nconst NO_EXPORT_MODULE_PATH = path.resolve(import.meta.dirname, \"./_module_no_export.js\");\n\nconst IRRELEVANT_NAME = \"irrelevant name\";\nconst DEFAULT_TIMEOUT = TestSuite.DEFAULT_TIMEOUT_IN_MS;\nconst EXCEED_TIMEOUT = DEFAULT_TIMEOUT + 1;\n\nexport default test(() => {\n\n\tdescribe(\"test modules\", () => {\n\n\t\tit(\"creates test suite from a module (and sets filename on result)\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ SUCCESS_MODULE_PATH, SUCCESS_MODULE_PATH ]);\n\n\t\t\tconst testCaseResult = TestResult.pass(\"passes\", SUCCESS_MODULE_PATH);\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.suite([], [ testCaseResult ], SUCCESS_MODULE_PATH),\n\t\t\t\t\tTestResult.suite([], [ testCaseResult ], SUCCESS_MODULE_PATH),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"fails gracefully if module isn't an absolute path\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"./_module_passes.js\" ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing _module_passes.js\" ]);\n\t\t\tassert.isUndefined(result.filename);\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.equal(result.error, \"Test module filenames must use absolute paths: ./_module_passes.js\");\n\t\t});\n\n\t\tit(\"fails gracefully if module doesn't exist\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"/no_such_module.js\" ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing no_such_module.js\" ]);\n\t\t\tassert.equal(result.filename, \"/no_such_module.js\");\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.equal(result.error, `Test module not found: /no_such_module.js`);\n\t\t});\n\n\t\tit(\"fails gracefully if module fails to require()\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ THROWS_MODULE_PATH ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing _module_throws.js\" ]);\n\t\t\tassert.equal(result.filename, THROWS_MODULE_PATH);\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.match((result.error as { message: string }).message, /my require error/);\n\t\t});\n\n\t\tit(\"fails gracefully if module doesn't export a test suite\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ NO_EXPORT_MODULE_PATH ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing _module_no_export.js\" ]);\n\t\t\tassert.equal(result.filename, NO_EXPORT_MODULE_PATH);\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.equal(result.error, `Test module doesn't export a test suite: ${NO_EXPORT_MODULE_PATH}`);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test suites\", () => {\n\n\t\tit(\"executes immediately (but tests don't)\", () => {\n\t\t\tlet suiteRan = false;\n\t\t\tlet testRan = false;\n\t\t\ttest_sut(() => {\n\t\t\t\tsuiteRan = true;\n\t\t\t\tit_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(suiteRan, true, \"should run suite\");\n\t\t\tassert.equal(testRan, false, \"should not run test\");\n\t\t});\n\n\t\tit(\"returns test results when run\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(\"test 1\", () => {});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t\tit_sut(\"test 3\", () => {});\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"test 1\"),\n\t\t\t\t\tTestResult.pass(\"test 2\"),\n\t\t\t\t\tTestResult.pass(\"test 3\"),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"can be nested\", async () => {\n\t\t\tconst top = test_sut(\"top\", () => {\n\t\t\t\tdescribe_sut(\"middle\", () => {\n\t\t\t\t\tdescribe_sut(\"bottom\", () => {\n\t\t\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await top.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\tTestResult.suite([ \"top\", \"middle\" ], [\n\t\t\t\t\t\tTestResult.suite([ \"top\", \"middle\", \"bottom\" ], [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"bottom\", \"my test\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"retains correct context as nesting expands and contracts\", async () => {\n\t\t\tconst top = test_sut(\"top\", () => {\n\t\t\t\tit_sut(\"top.1\", () => {});\n\t\t\t\tdescribe_sut(\"middle\", () => {\n\t\t\t\t\tit_sut(\"middle.1\", () => {});\n\t\t\t\t\tdescribe_sut(\"bottom\", () => {\n\t\t\t\t\t\tit_sut(\"bottom.1\", () => {});\n\t\t\t\t\t});\n\t\t\t\t\tit_sut(\"middle.2\", () => {});\n\t\t\t\t});\n\t\t\t\tit_sut(\"top.2\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await top.runAsync(),\n\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\tTestResult.pass([ \"top\", \"top.1\" ]),\n\t\t\t\t\tTestResult.suite([ \"top\", \"middle\" ], [\n\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"middle.1\" ]),\n\t\t\t\t\t\tTestResult.suite([ \"top\", \"middle\", \"bottom\" ], [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"bottom\", \"bottom.1\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"middle.2\" ]),\n\t\t\t\t\t]),\n\t\t\t\t\tTestResult.pass([ \"top\", \"top.2\" ]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"retains correct context even if a nested describe block throws an exception\", async () => {\n\t\t\tconst parent = test_sut(\"parent\", () => {\n\t\t\t\tit_sut(\"parent.1\", () => {});\n\t\t\t\ttry {\n\t\t\t\t\tdescribe_sut(\"child\", () => {\n\t\t\t\t\t\tthrow new Error(\"my exception\");\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch {\n\t\t\t\t\t// ignored\n\t\t\t\t}\n\t\t\t\tit_sut(\"parent.2\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await parent.runAsync(),\n\t\t\t\tTestResult.suite(\"parent\", [\n\t\t\t\t\tTestResult.pass([ \"parent\", \"parent.1\" ]),\n\t\t\t\t\tTestResult.pass([ \"parent\", \"parent.2\" ]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"can be run multiple times\", () => {\n\t\t\ttest_sut();\n\t\t\ttest_sut();\n\t\t});\n\n\t\tit(\"can be run multiple times even if a previous run results in an exception\", () => {\n\t\t\ttry {\n\t\t\t\ttest_sut(() => {\n\t\t\t\t\tthrow new Error(\"my exception\");\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch {\n\t\t\t\t// ignored\n\t\t\t}\n\n\t\t\ttest_sut();\n\t\t});\n\n\t\tit(\"propagates filename into children's test results\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst filename = \"my_filename\";\n\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(\"pass\", () => {});\n\t\t\t\tit_sut.skip(\"skip\", () => {});\n\t\t\t\tit_sut(\"fail\", () => { throw Error(\"fail\"); });\n\t\t\t\tit_sut(\"timeout\", async () => { await clock.waitAsync(EXCEED_TIMEOUT); });\n\t\t\t\tit_sut(\"test without body\");\n\t\t\t\tdescribe_sut(\"suite without body\");\n\t\t\t});\n\t\t\tsuite._setFilename(filename);\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tclock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.equal(await actualPromise, TestResult.suite([], [\n\t\t\t\tcreatePass({ name: \"pass\", filename }),\n\t\t\t\tcreateSkip({ name: \"skip\", mark: TestMark.skip, filename }),\n\t\t\t\tcreateFail({ name: \"fail\", error: new Error(\"fail\"), filename }),\n\t\t\t\tcreateTimeout({ name: \"timeout\", timeout: DEFAULT_TIMEOUT, filename }),\n\t\t\t\tcreateSkip({ name: \"test without body\", mark: TestMark.skip, filename }),\n\t\t\t\tcreateSuite({ name: \"suite without body\", mark: TestMark.skip, filename }),\n\t\t\t], filename));\n\t\t});\n\n\t\tit.skip(\"fails when test() is run within test()\", () => {\n\t\t\ttest_sut(() => {\n\t\t\t\tassert.error(\n\t\t\t\t\t() => test_sut(),\n\t\t\t\t\t\"test() is not re-entrant [don't run test() inside of test()]\",\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\tit(\"fails when describe() is run outside of test()\", () => {\n\t\t\tassert.error(\n\t\t\t\t() => describe_sut(),\n\t\t\t\t\"describe() must be run inside test()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => describe_sut.skip(),\n\t\t\t\t\"describe() must be run inside test()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => describe_sut.only(),\n\t\t\t\t\"describe() must be run inside test()\",\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test cases\", () => {\n\n\t\tit(\"runs when its parent suite is run\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(testRan, false, \"before suite runs\");\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(testRan, true, \"after suite runs\");\n\t\t});\n\n\t\tit(\"works with asynchronous code\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, async () => {\n\t\t\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\t\t\tsetImmediate(() => {\n\t\t\t\t\t\t\ttestRan = true;\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(testRan, true);\n\t\t});\n\n\t\tit(\"passes when test doesn't throw exception\", async () => {\n\t\t\tconst result = await runTestAsync(\"my test\", () => {});\n\t\t\tassert.dotEquals(result, TestResult.pass(\"my test\"));\n\t\t});\n\n\t\tit(\"fails when test throws exception\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst result = await runTestAsync(\"my test\", () => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t\t\tassert.dotEquals(result, TestResult.fail(\"my test\", error));\n\t\t});\n\n\t\tit(\"can retrieve config variables\", async () => {\n\t\t\tconst myConfig = { myConfig: \"my_config\" };\n\t\t\tlet receivedConfig;\n\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, ({ getConfig }) => {\n\t\t\t\t\treceivedConfig = getConfig(\"myConfig\");\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync({ config: myConfig });\n\t\t\tassert.equal(receivedConfig, \"my_config\");\n\t\t});\n\n\t\tit(\"fails fast when no config defined\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, ({ getConfig }) => {\n\t\t\t\t\tgetConfig(\"no_such_config\");\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst results = await suite.runAsync({});\n\t\t\tassert.equal(results, TestResult.suite([], [\n\t\t\t\tTestResult.fail(IRRELEVANT_NAME, new Error(\"No test config found for name 'no_such_config'\")),\n\t\t\t]));\n\t\t});\n\n\t\tit(\"fails fast when config defined, but config variable not found\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, ({ getConfig }) => {\n\t\t\t\t\tgetConfig(\"no_such_config\");\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst results = await suite.runAsync({ config: {} });\n\t\t\tassert.equal(results, TestResult.suite([], [\n\t\t\t\tTestResult.fail(IRRELEVANT_NAME, new Error(\"No test config found for name 'no_such_config'\")),\n\t\t\t]));\n\t\t});\n\n\t\tit(\"fails when run outside of a test()\", () => {\n\t\t\tassert.error(\n\t\t\t\t() => it_sut(IRRELEVANT_NAME),\n\t\t\t\t\"it() must be run inside test()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => it_sut.skip(IRRELEVANT_NAME),\n\t\t\t\t\"it() must be run inside test()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => it_sut.only(IRRELEVANT_NAME),\n\t\t\t\t\"it() must be run inside test()\",\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"naming\", () => {\n\n\t\tit(\"test suites can be created with and without a name\", async () => {\n\t\t\tconst name = test_sut(\"named\", () => {\n\t\t\t\tit_sut(\"has a name\", () => {});\n\t\t\t});\n\t\t\tconst noName = test_sut(() => {\n\t\t\t\tit_sut(\"has no name\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await name.runAsync(), TestResult.suite(\"named\", [ TestResult.pass([ \"named\", \"has a name\" ]) ]));\n\t\t\tassert.dotEquals(await noName.runAsync(), TestResult.suite([], [ TestResult.pass(\"has no name\") ]));\n\t\t});\n\n\t\tit(\"test cases without names are given a default\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(\"\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(), TestResult.suite([], [ TestResult.pass(\"(unnamed)\") ]));\n\t\t});\n\n\t\tit(\"sets name of test result to include nested suites\", async () => {\n\t\t\tconst top = test_sut(\"top\", () => {\n\t\t\t\tdescribe_sut(\"middle\", () => {\n\t\t\t\t\tdescribe_sut(\"bottom\", () => {\n\t\t\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await top.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite([ \"top\" ], [\n\t\t\t\t\tTestResult.suite([ \"top\", \"middle\" ], [\n\t\t\t\t\t\tTestResult.suite([ \"top\", \"middle\", \"bottom\" ], [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"bottom\", \"my test\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"collapses unnamed suites when setting test result name\", async () => {\n\t\t\tconst top = test_sut(\"top\", () => {\n\t\t\t\tdescribe_sut(\"\", () => {\n\t\t\t\t\tdescribe_sut(\"\", () => {\n\t\t\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await top.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"my test\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"before/after\", () => {\n\n\t\tit(\"runs function before and after all tests in a suite\", async () => {\n\t\t\tconst ordering: string[] = [];\n\t\t\tconst pushFn: ((message: string) => () => void) = (message: string) => {\n\t\t\t\treturn () => ordering.push(message);\n\t\t\t};\n\n\t\t\tconst suite = test_sut(IRRELEVANT_NAME, () => {\n\t\t\t\tbeforeAll_sut(pushFn(\"parent before 1\"));\n\t\t\t\tbeforeAll_sut(pushFn(\"parent before 2\"));\n\t\t\t\tafterAll_sut(pushFn(\"parent after 1\"));\n\t\t\t\tafterAll_sut(pushFn(\"parent after 2\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 1\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 2\"));\n\t\t\t\tdescribe_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\tbeforeAll_sut(pushFn(\"child before\"));\n\t\t\t\t\tafterAll_sut(pushFn(\"child after\"));\n\t\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 3\"));\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(ordering, [\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"test 1\",\n\t\t\t\t\"test 2\",\n\t\t\t\t\"child before\",\n\t\t\t\t\"test 3\",\n\t\t\t\t\"child after\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t]);\n\t\t});\n\n\t\tit(\"runs function before and after each test in a suite\", async () => {\n\t\t\tconst ordering: string[] = [];\n\t\t\tconst pushFn: ((message: string) => () => void) = (message) => {\n\t\t\t\treturn () => ordering.push(message);\n\t\t\t};\n\n\t\t\tconst suite = test_sut(IRRELEVANT_NAME, () => {\n\t\t\t\tbeforeEach_sut(pushFn(\"parent before 1\"));\n\t\t\t\tbeforeEach_sut(pushFn(\"parent before 2\"));\n\t\t\t\tafterEach_sut(pushFn(\"parent after 1\"));\n\t\t\t\tafterEach_sut(pushFn(\"parent after 2\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 1\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 2\"));\n\t\t\t\tdescribe_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\tbeforeEach_sut(pushFn(\"child before\"));\n\t\t\t\t\tafterEach_sut(pushFn(\"child after\"));\n\t\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 3\"));\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(ordering, [\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"test 1\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"test 2\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"child before\",\n\t\t\t\t\"test 3\",\n\t\t\t\t\"child after\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t]);\n\t\t});\n\n\t\tit(\"provides config\", async () => {\n\t\t\tconst myConfig = { myConfig: \"my_config\" };\n\t\t\tlet beforeAllReceived, beforeEachReceived, afterEachReceived, afterAllReceived;\n\n\t\t\tconst suite = test_sut(IRRELEVANT_NAME, () => {\n\t\t\t\tbeforeAll_sut(({ getConfig }) => { beforeAllReceived = getConfig(\"myConfig\"); });\n\t\t\t\tbeforeEach_sut(({ getConfig }) => { beforeEachReceived = getConfig(\"myConfig\"); });\n\t\t\t\tit_sut(IRRELEVANT_NAME, () => {});\n\t\t\t\tafterEach_sut(({ getConfig }) => { afterEachReceived = getConfig(\"myConfig\"); });\n\t\t\t\tafterAll_sut(({ getConfig }) => { afterAllReceived = getConfig(\"myConfig\"); });\n\t\t\t});\n\n\t\t\tawait suite.runAsync({ config: myConfig });\n\n\t\t\tassert.equal(beforeAllReceived, \"my_config\", \"beforeAll\");\n\t\t\tassert.equal(beforeEachReceived, \"my_config\", \"beforeEach\");\n\t\t\tassert.equal(afterEachReceived, \"my_config\", \"afterEach\");\n\t\t\tassert.equal(afterAllReceived, \"my_config\", \"afterAll\");\n\t\t});\n\n\t\tit(\"doesn't run beforeAll and afterAll when all children are skipped\", async () => {\n\t\t\tlet beforeRan = false;\n\t\t\tlet afterRan = false;\n\t\t\tconst suite = test_sut(\"my suite\", () => {\n\t\t\t\tbeforeAll_sut(() => {\n\t\t\t\t\tbeforeRan = true;\n\t\t\t\t});\n\t\t\t\tafterAll_sut(() => {\n\t\t\t\t\tafterRan = true;\n\t\t\t\t});\n\t\t\t\tit_sut.skip(\"test 1\", async () => {});\n\t\t\t\tit_sut.skip(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(beforeRan, false, \"shouldn't run beforeAll()\");\n\t\t\tassert.equal(afterRan, false, \"shouldn't run afterAll()\");\n\t\t});\n\n\t\tit(\"doesn't run beforeEach and afterEach when the test is skipped\", async () => {\n\t\t\tlet beforeRan = false;\n\t\t\tlet afterRan = false;\n\t\t\tconst suite = test_sut(\"my suite\", () => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tbeforeRan = true;\n\t\t\t\t});\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterRan = true;\n\t\t\t\t});\n\t\t\t\tit_sut.skip(\"test 1\", async () => {});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(beforeRan, false, \"shouldn't run beforeEach()\");\n\t\t\tassert.equal(afterRan, false, \"shouldn't run afterEach()\");\n\t\t});\n\n\t\tit(\"handles exception in beforeAll\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = test_sut(\"my suite\", () => {\n\t\t\t\tbeforeAll_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", async () => {});\n\t\t\t\tit_sut(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tcreateSuite({ name: \"my suite\", children: [\n\t\t\t\t\tcreateFail({ name: [ \"my suite\", \"beforeAll()\" ], error }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"handles exception in afterAll\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = test_sut(\"my suite\", () => {\n\t\t\t\tafterAll_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", async () => {});\n\t\t\t\tit_sut(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tcreateSuite({ name: \"my suite\", children: [\n\t\t\t\t\tcreatePass({ name: [ \"my suite\", \"test 1\" ]}),\n\t\t\t\t\tcreatePass({ name: [ \"my suite\", \"test 2\" ]}),\n\t\t\t\t\tcreateFail({ name: [ \"my suite\", \"afterAll()\" ], error }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"handles exception in beforeEach\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", async () => {});\n\t\t\t\tit_sut(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.fail(\"test 1\", error),\n\t\t\t\t\tTestResult.fail(\"test 2\", error),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't run test when beforeEach throws exception\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = test_sut(\"my suite\", () => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(testRan, false);\n\t\t});\n\n\t\tit(\"handles exception in afterEach\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", () => {});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.fail(\"test 1\", error),\n\t\t\t\t\tTestResult.fail(\"test 2\", error),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"runs afterEach() even when test throws exception\", async() => {\n\t\t\tlet afterEachRan = false;\n\t\t\tconst suite = test_sut(\"my suite\", () => {\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterEachRan = true;\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(afterEachRan, true);\n\t\t});\n\n\t\tit(\"only reports test exception when both test and afterEach throw exceptions\", async () => {\n\t\t\tconst afterEachError = new Error(\"afterEach error\");\n\t\t\tconst testError = new Error(\"test error\");\n\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tthrow afterEachError;\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\tthrow testError;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.fail(\"my test\", testError),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"fails when run outside of a test()\", () => {\n\t\t\tassert.error(\n\t\t\t\t() => beforeAll_sut(() => {}),\n\t\t\t\t\"beforeAll() must be run inside test()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => beforeEach_sut(() => {}),\n\t\t\t\t\"beforeEach() must be run inside test()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => afterAll_sut(() => {}),\n\t\t\t\t\"afterAll() must be run inside test()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => afterEach_sut(() => {}),\n\t\t\t\t\"afterEach() must be run inside test()\",\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"timeouts\", () => {\n\n\t\tit(\"times out when test doesn't complete in expected amount of time\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet beforeTime = null;\n\t\t\tlet afterTime = null;\n\t\t\tconst suite = test_sut(({ it, beforeEach, afterEach }) => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tbeforeTime = clock.now();\n\t\t\t\t});\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", async () => {\n\t\t\t\t\tawait clock.waitAsync(EXCEED_TIMEOUT);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.timeout(\"my test\", DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(beforeTime, 0, \"beforeEach() should run immediately\");\n\t\t\tassert.equal(afterTime, DEFAULT_TIMEOUT, \"afterEach() should run as soon as it() times out\");\n\t\t});\n\n\t\tit(\"times out when beforeAll doesn't complete in expected amount of time\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet itTime = null;\n\t\t\tlet afterTime = null;\n\t\t\tconst suite = test_sut(\"my suite\", ({ it, beforeAll, afterAll }) => {\n\t\t\t\tbeforeAll_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(EXCEED_TIMEOUT);\n\t\t\t\t});\n\t\t\t\tafterAll_sut(() => {\n\t\t\t\t\tafterTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite(\"my suite\", [\n\t\t\t\t\tTestResult.timeout([ \"my suite\", \"beforeAll()\" ], DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(itTime, null, \"it() should not run\");\n\t\t\tassert.equal(afterTime, null, \"afterAll() should not run\");\n\t\t});\n\n\t\tit(\"times out when afterAll doesn't complete in expected amount of time\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet beforeTime = null;\n\t\t\tlet itTime = null;\n\t\t\tconst suite = test_sut(({ it, beforeAll, afterAll }) => {\n\t\t\t\tbeforeAll_sut(() => {\n\t\t\t\t\tbeforeTime = clock.now();\n\t\t\t\t});\n\t\t\t\tafterAll_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(EXCEED_TIMEOUT);\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"test 1\"),\n\t\t\t\t\tTestResult.pass(\"test 2\"),\n\t\t\t\t\tTestResult.timeout(\"afterAll()\", DEFAULT_TIMEOUT),\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(beforeTime, 0, \"beforeAll() should run immediately\");\n\t\t\tassert.equal(itTime, 0, \"it() should run immediately\");\n\t\t});\n\n\t\tit(\"times out when beforeEach doesn't complete in expected amount of time\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet itTime = null;\n\t\t\tlet afterTime = null;\n\t\t\tconst suite = test_sut(({ it, beforeEach, afterEach }) => {\n\t\t\t\tbeforeEach_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(EXCEED_TIMEOUT);\n\t\t\t\t});\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.timeout(\"my test\", DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(itTime, null, \"it() should not run\");\n\t\t\tassert.equal(afterTime, null, \"afterEach() should not run\");\n\t\t});\n\n\t\tit(\"times out when afterEach doesn't complete in expected amount of time\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet beforeTime = null;\n\t\t\tlet itTime = null;\n\t\t\tconst suite = test_sut(({ it, beforeEach, afterEach }) => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tbeforeTime = clock.now();\n\t\t\t\t});\n\t\t\t\tafterEach_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(EXCEED_TIMEOUT);\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.timeout(\"my test\", DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(beforeTime, 0, \"beforeEach() should run immediately\");\n\t\t\tassert.equal(itTime, 0, \"it() should run immediately\");\n\t\t});\n\n\t\tit(\"times out each function separately\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst notQuiteTimeoutFn = async () => {\n\t\t\t\tawait clock.waitAsync(DEFAULT_TIMEOUT - 1);\n\t\t\t};\n\n\t\t\tconst suite = test_sut(({ it, beforeAll, afterAll, beforeEach, afterEach }) => {\n\t\t\t\tbeforeAll_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeAll_sut(notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut(notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut(notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut(notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut(notQuiteTimeoutFn);\n\t\t\t\tit_sut(\"test 1\", notQuiteTimeoutFn);\n\t\t\t\tit_sut(\"test 2\", notQuiteTimeoutFn);\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"test 1\"),  // all tests pass because nothing timed out\n\t\t\t\t\tTestResult.pass(\"test 2\"),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"allows suites to configure timeout\", async () => {\n\t\t\tconst NEW_TIMEOUT = DEFAULT_TIMEOUT * 10;\n\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst notQuiteTimeoutFn = async () => {\n\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT - 1);\n\t\t\t};\n\n\t\t\tconst suite = test_sut(({\n\t\t\t\tit, setTimeout, beforeAll, afterAll, beforeEach, afterEach\n\t\t\t}) => {\n\t\t\t\tsetTimeout(NEW_TIMEOUT);\n\t\t\t\tbeforeAll_sut(notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut(notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut(notQuiteTimeoutFn);\n\t\t\t\tit_sut(\"my test\", notQuiteTimeoutFn);\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"my test\"),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"inherits parent's timeout\", async () => {\n\t\t\tconst NEW_TIMEOUT = DEFAULT_TIMEOUT * 10;\n\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst suite = test_sut(({ setTimeout }) => {\n\t\t\t\tsetTimeout(NEW_TIMEOUT);\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"my test\", async () => {\n\t\t\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT - 1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.suite([], [\n\t\t\t\t\t\tTestResult.pass(\"my test\"),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\".skip\", () => {\n\n\t\tit(\"skips and marks tests that have no function\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(\"my test\");\n\t\t\t});\n\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.dotEquals(result, createSkip({ name: \"my test\", mark: TestMark.skip }), \"should be skipped\");\n\t\t});\n\n\t\tit(\"skips and marks tests that have '.skip'\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut.skip(\"my test\", () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\t\t\tassert.equal(testRan, false, \"should not run test\");\n\t\t\tassert.dotEquals(result, createSkip({ name: \"my test\", mark: TestMark.skip }));\n\t\t\tassert.equal(result.mark, TestMark.skip, \"should be marked\");\n\t\t});\n\n\t\tit(\"skips suites that have no function\", async () => {\n\t\t\tconst suite = await test_sut(\"my suite\").runAsync();\n\t\t\tconst noName = await test_sut().runAsync();\n\n\t\t\tassert.dotEquals(suite, createSuite({ name: \"my suite\", mark: TestMark.skip }));\n\t\t\tassert.dotEquals(noName, createSuite({ name: [], mark: TestMark.skip }));\n\t\t});\n\n\t\tit(\"recursively skips everything within a suite that has '.skip'\", async () => {\n\t\t\tconst suite = test_sut.skip(() => {\n\t\t\t\tit_sut(\"test 1\", () => {});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"test 3\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tTestResult.skip(\"test 1\"),\n\t\t\t\t\tTestResult.skip(\"test 2\"),\n\t\t\t\t\tTestResult.suite([], [\n\t\t\t\t\t\tTestResult.skip(\"test 3\"),\n\t\t\t\t\t]),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't mark skipped tests and suites that aren't explicitly marked '.skip'\", async () => {\n\t\t\tconst suite = test_sut.skip(() => {\n\t\t\t\tit_sut(\"test\", () => {});\n\t\t\t\tdescribe_sut(\"suite\", () => {});\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tcreateSkip({ name: \"test\", mark: TestMark.none }),\n\t\t\t\t\tcreateSuite({ name: \"suite\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"generates failure when a suite is marked 'only' but has no body\", async () => {\n\t\t\tconst suite = test_sut.only(\"my suite\");\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ name: \"my suite\", mark: TestMark.only, children: [\n\t\t\t\t\tcreateFail({ name: \"my suite\", error: \"Test suite is marked '.only', but it has no body\" }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"generates failure when a test is marked 'only' but has no body\", async () => {\n\t\t\tconst suite = test_sut(\"my suite\", () => {\n\t\t\t\tit_sut.only(\"my test\");\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ name: \"my suite\", children: [\n\t\t\t\t\tcreateFail({\n\t\t\t\t\t\tname: [ \"my suite\", \"my test\" ],\n\t\t\t\t\t\terror: \"Test is marked '.only', but it has no body\",\n\t\t\t\t\t\tmark: TestMark.only,\n\t\t\t\t\t}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\".only\", () => {\n\n\t\tit(\"if any tests are marked .only, it only runs those tests\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut.only(\".only\", () => {});\n\t\t\t\tit_sut(\"not .only\", () => {});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreatePass({ name: \".only\", mark: TestMark.only }),\n\t\t\t\t\tcreateSkip({ name: \"not .only\" }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"marks test results as '.only'\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut.only(\"pass\", () => {});\n\t\t\t\tit_sut.only(\"fail\", () => { throw new Error(\"my error\"); });\n\t\t\t\tit_sut.only(\"timeout\", async () => { await clock.waitAsync(EXCEED_TIMEOUT); });\n\t\t\t});\n\n\t\t\tconst resultPromise = suite.runAsync({ clock });\n\t\t\tclock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.equal(await resultPromise,\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreatePass({ name: \"pass\", mark: TestMark.only }),\n\t\t\t\t\tcreateFail({ name: \"fail\", error: new Error(\"my error\"), mark: TestMark.only }),\n\t\t\t\t\tcreateTimeout({ name: \"timeout\", timeout: DEFAULT_TIMEOUT, mark: TestMark.only }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and none of its tests are, runs all of those tests\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tdescribe_sut(\"not .only\", () => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t\tdescribe_sut.only(\".only\", () => {\n\t\t\t\t\tit_sut(\"test3\", () => {});\n\t\t\t\t\tit_sut(\"test4\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.suite(\"not .only\", [\n\t\t\t\t\t\tTestResult.skip([ \"not .only\", \"test1\" ]),\n\t\t\t\t\t\tTestResult.skip([ \"not .only\", \"test2\" ]),\n\t\t\t\t\t]),\n\t\t\t\t\tcreateSuite({ name: \".only\", mark: TestMark.only, children: [\n\t\t\t\t\t\tTestResult.pass([ \".only\", \"test3\" ]),\n\t\t\t\t\t\tTestResult.pass([ \".only\", \"test4\" ]),\n\t\t\t\t\t]}),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and none of its children are, run those tests recursively\", async () => {\n\t\t\tconst suite = test_sut.only(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"test\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tTestResult.suite([], [\n\t\t\t\t\t\tTestResult.pass(\"test\"),\n\t\t\t\t\t]),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and one of its children is also, only run that test\", async () => {\n\t\t\tconst suite = test_sut.only(() => {\n\t\t\t\tit_sut(\"not only\", () => {});\n\t\t\t\tit_sut.only(\"only\", () => {});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSkip({ name: \"not only\" }),\n\t\t\t\t\tcreatePass({ name: \"only\", mark: TestMark.only }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and one of its grandchildren is also, only run that test\", async () => {\n\t\t\tconst suite = test_sut.only(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"not only\", () => {});\n\t\t\t\t\tit_sut.only(\"only\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\t\tcreateSkip({ name: \"not only\" }),\n\t\t\t\t\t\tcreatePass({ name: \"only\", mark: TestMark.only }),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and one of its child suites is also, only run that suite\", async () => {\n\t\t\tconst suite = test_sut.only(() => {\n\t\t\t\tdescribe_sut(\"not only\", () => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t});\n\t\t\t\tdescribe_sut.only(\"only\", () => {\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tTestResult.suite(\"not only\", [\n\t\t\t\t\t\tTestResult.skip([ \"not only\", \"test1\" ]),\n\t\t\t\t\t]),\n\t\t\t\t\tcreateSuite({ name: \"only\", mark: TestMark.only, children: [\n\t\t\t\t\t\tTestResult.pass([ \"only\", \"test2\" ]),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and a child is marked .skip, skip the child\", async () => {\n\t\t\tconst suite = test_sut.only(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut.skip(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\t\tcreateSkip({ name: \"test1\", mark: TestMark.skip }),\n\t\t\t\t\t\tTestResult.pass(\"test2\"),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .skip and a child is marked .only, run the child\", async () => {\n\t\t\tconst suite = test_sut.skip(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut.only(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\t\tcreatePass({ name: \"test1\", mark: TestMark.only }),\n\t\t\t\t\t\tcreateSkip({ name: \"test2\" }),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and a child suite is marked .skip, skip its children\", async () => {\n\t\t\tconst suite = test_sut.only(() => {\n\t\t\t\tdescribe_sut.skip(() => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\t\tTestResult.skip(\"test1\"),\n\t\t\t\t\t\tTestResult.skip(\"test2\"),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .skip and a child suite is marked .only, run its children\", async () => {\n\t\t\tconst suite = test_sut.skip(() => {\n\t\t\t\tdescribe_sut.only(() => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\t\tTestResult.pass(\"test1\"),\n\t\t\t\t\t\tTestResult.pass(\"test2\"),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"marks suites even if they fail 'beforeAll'\", async () => {\n\t\t\tconst suite = test_sut.only(\"my suite\", ({ beforeAll, it }) => {\n\t\t\t\tbeforeAll_sut(() => { throw new Error(\"my error\"); });\n\t\t\t\tit_sut(\"my test\");\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ name: \"my suite\", mark: TestMark.only, children: [\n\t\t\t\t\tcreateFail({\n\t\t\t\t\t\tname: [ \"my suite\", \"beforeAll()\" ],\n\t\t\t\t\t\terror: new Error(\"my error\"),\n\t\t\t\t\t}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"notification\", () => {\n\n\t\tit(\"runs notify function when test completes\", async () => {\n\t\t\tconst suite = test_sut(() => {\n\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t});\n\n\t\t\tlet testResult;\n\t\t\tfunction notifyFn(result: TestResult) {\n\t\t\t\ttestResult = result;\n\t\t\t}\n\n\t\t\tawait suite.runAsync({ notifyFn });\n\t\t\tassert.dotEquals(testResult, TestResult.pass(\"my test\"));\n\t\t});\n\n\t\tit(\"runs notify function if module fails to require()\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"./_module_throws.js\" ]);\n\n\t\t\tlet testResult: TestCaseResult;\n\t\t\tfunction notifyFn(result: TestCaseResult) {\n\t\t\t\ttestResult = result;\n\t\t\t}\n\n\t\t\tawait suite.runAsync({ notifyFn });\n\t\t\tassert.equal(testResult!.name, [ \"error when importing _module_throws.js\" ]);\n\t\t});\n\n\t\tit(\"runs notify function if module doesn't export a test suite\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"./_module_no_export.js\" ]);\n\n\t\t\tlet testResult: TestCaseResult;\n\n\t\t\tfunction notifyFn(result: TestCaseResult) {\n\t\t\t\ttestResult = result;\n\t\t\t}\n\n\t\t\tawait suite.runAsync({ notifyFn });\n\t\t\tassert.equal(testResult!.name, [ \"error when importing _module_no_export.js\" ]);\n\t\t});\n\n\t});\n\n});\n\n\nasync function runTestAsync(testName: string, testFn: () => void) {\n\tconst suite = test_sut(() => {\n\t\tit_sut(testName, testFn);\n\t});\n\tconst result = await suite.runAsync();\n\treturn result.children[0];\n}\n\nfunction createSuite({\n\tname = [],\n\tchildren = [],\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tchildren?: TestResult[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.suite(name, children, filename, mark);\n}\n\nfunction createPass({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.pass(name, filename, mark);\n}\n\nfunction createFail({\n\tname = \"irrelevant name\",\n\terror = new Error(\"irrelevant error\"),\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\terror?: string | Error,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.fail(name, error, filename, mark);\n}\n\nfunction createSkip({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.skip(name, filename, mark);\n}\n\nfunction createTimeout({\n\tname = \"irrelevant name\",\n\ttimeout = 42,\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\ttimeout?: number,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.timeout(name, timeout, filename, mark);\n}"],"names":["assert","test","describe","it","TestSuite","test_sut","describe_sut","it_sut","beforeAll","beforeAll_sut","afterAll","afterAll_sut","beforeEach","beforeEach_sut","afterEach","afterEach_sut","Clock","TestStatus","TestResult","TestMark","path","SUCCESS_MODULE_PATH","resolve","dirname","THROWS_MODULE_PATH","NO_EXPORT_MODULE_PATH","IRRELEVANT_NAME","DEFAULT_TIMEOUT","DEFAULT_TIMEOUT_IN_MS","EXCEED_TIMEOUT","suite","fromModulesAsync","testCaseResult","pass","dotEquals","runAsync","result","allTests","equal","name","isUndefined","filename","status","fail","error","match","message","suiteRan","testRan","top","parent","Error","clock","createNullAsync","skip","waitAsync","_setFilename","actualPromise","tickUntilTimersExpireAsync","createPass","createSkip","mark","createFail","createTimeout","timeout","createSuite","only","Promise","setImmediate","runTestAsync","myConfig","receivedConfig","getConfig","config","results","noName","ordering","pushFn","push","beforeAllReceived","beforeEachReceived","afterEachReceived","afterAllReceived","beforeRan","afterRan","children","afterEachRan","afterEachError","testError","beforeTime","afterTime","now","itTime","notQuiteTimeoutFn","NEW_TIMEOUT","setTimeout","none","resultPromise","testResult","notifyFn","testName","testFn","undefined"],"mappings":"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"}