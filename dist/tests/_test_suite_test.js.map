{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_suite_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\nimport { assert, describe, it, test } from \"../tests.js\";\nimport {\n\tafterAll as afterAll_sut,\n\tafterEach as afterEach_sut,\n\tbeforeAll as beforeAll_sut,\n\tbeforeEach as beforeEach_sut,\n\tdescribe as describe_sut,\n\tit as it_sut,\n\tTestSuite,\n} from \"./test_suite.js\";\nimport { Clock } from \"../infrastructure/clock.js\";\nimport { TestCaseResult, TestMark, TestMarkValue, TestResult, TestStatus } from \"./test_result.js\";\nimport path from \"node:path\";\n// dependency: ./_module_passes.js\n// dependency: ./_module_throws.js\n// dependency: ./_module_no_export.js\n\n// Tests for my test library. (How meta.)\n\nconst SUCCESS_MODULE_PATH = path.resolve(import.meta.dirname, \"./_module_passes.js\");\nconst THROWS_MODULE_PATH = path.resolve(import.meta.dirname, \"./_module_throws.js\");\nconst NO_EXPORT_MODULE_PATH = path.resolve(import.meta.dirname, \"./_module_no_export.js\");\n\nconst IRRELEVANT_NAME = \"irrelevant name\";\nconst DEFAULT_TIMEOUT = TestSuite.DEFAULT_TIMEOUT_IN_MS;\nexport default test(() => {\n\n\tdescribe(\"test modules\", () => {\n\n\t\tit(\"creates test suite from a module (and sets filename on result)\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ SUCCESS_MODULE_PATH, SUCCESS_MODULE_PATH ]);\n\n\t\t\tconst testCaseResult = TestResult.pass(\"passes\", SUCCESS_MODULE_PATH);\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.suite([], [ testCaseResult ], SUCCESS_MODULE_PATH),\n\t\t\t\t\tTestResult.suite([], [ testCaseResult ], SUCCESS_MODULE_PATH),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"fails gracefully if module isn't an absolute path\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"./_module_passes.js\" ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing _module_passes.js\" ]);\n\t\t\tassert.isUndefined(result.filename);\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.equal(result.error, \"Test module filenames must use absolute paths: ./_module_passes.js\");\n\t\t});\n\n\t\tit(\"fails gracefully if module doesn't exist\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"/no_such_module.js\" ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing no_such_module.js\" ]);\n\t\t\tassert.equal(result.filename, \"/no_such_module.js\");\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.equal(result.error, `Test module not found: /no_such_module.js`);\n\t\t});\n\n\t\tit(\"fails gracefully if module fails to require()\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ THROWS_MODULE_PATH ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing _module_throws.js\" ]);\n\t\t\tassert.equal(result.filename, THROWS_MODULE_PATH);\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.match((result.error as { message: string }).message, /my require error/);\n\t\t});\n\n\t\tit(\"fails gracefully if module doesn't export a test suite\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ NO_EXPORT_MODULE_PATH ]);\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.equal(result.name, [ \"error when importing _module_no_export.js\" ]);\n\t\t\tassert.equal(result.filename, NO_EXPORT_MODULE_PATH);\n\t\t\tassert.equal(result.status, TestStatus.fail);\n\t\t\tassert.equal(result.error, `Test module doesn't export a test suite: ${NO_EXPORT_MODULE_PATH}`);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test suites\", () => {\n\n\t\tit(\"executes immediately (but tests don't)\", () => {\n\t\t\tlet suiteRan = false;\n\t\t\tlet testRan = false;\n\t\t\tdescribe_sut(() => {\n\t\t\t\tsuiteRan = true;\n\t\t\t\tit_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(suiteRan, true, \"should run suite\");\n\t\t\tassert.equal(testRan, false, \"should not run test\");\n\t\t});\n\n\t\tit(\"returns test results when run\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(\"test 1\", () => {});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t\tit_sut(\"test 3\", () => {});\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"test 1\"),\n\t\t\t\t\tTestResult.pass(\"test 2\"),\n\t\t\t\t\tTestResult.pass(\"test 3\"),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"can be nested\", async () => {\n\t\t\tconst top = describe_sut(\"top\", () => {\n\t\t\t\tdescribe_sut(\"middle\", () => {\n\t\t\t\t\tdescribe_sut(\"bottom\", () => {\n\t\t\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await top.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\tTestResult.suite([ \"top\", \"middle\" ], [\n\t\t\t\t\t\tTestResult.suite([ \"top\", \"middle\", \"bottom\" ], [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"bottom\", \"my test\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"retains correct context as nesting expands and contracts\", async () => {\n\t\t\tconst top = describe_sut(\"top\", () => {\n\t\t\t\tit_sut(\"top.1\", () => {});\n\t\t\t\tdescribe_sut(\"middle\", () => {\n\t\t\t\t\tit_sut(\"middle.1\", () => {});\n\t\t\t\t\tdescribe_sut(\"bottom\", () => {\n\t\t\t\t\t\tit_sut(\"bottom.1\", () => {});\n\t\t\t\t\t});\n\t\t\t\t\tit_sut(\"middle.2\", () => {});\n\t\t\t\t});\n\t\t\t\tit_sut(\"top.2\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await top.runAsync(),\n\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\tTestResult.pass([ \"top\", \"top.1\" ]),\n\t\t\t\t\tTestResult.suite([ \"top\", \"middle\" ], [\n\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"middle.1\" ]),\n\t\t\t\t\t\tTestResult.suite([ \"top\", \"middle\", \"bottom\" ], [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"bottom\", \"bottom.1\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"middle.2\" ]),\n\t\t\t\t\t]),\n\t\t\t\t\tTestResult.pass([ \"top\", \"top.2\" ]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"retains correct context even if a nested describe block throws an exception\", async () => {\n\t\t\tconst parent = describe_sut(\"parent\", () => {\n\t\t\t\tit_sut(\"parent.1\", () => {});\n\t\t\t\ttry {\n\t\t\t\t\tdescribe_sut(\"child\", () => {\n\t\t\t\t\t\tthrow new Error(\"my exception\");\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcatch {\n\t\t\t\t\t// ignored\n\t\t\t\t}\n\t\t\t\tit_sut(\"parent.2\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await parent.runAsync(),\n\t\t\t\tTestResult.suite(\"parent\", [\n\t\t\t\t\tTestResult.pass([ \"parent\", \"parent.1\" ]),\n\t\t\t\t\tTestResult.pass([ \"parent\", \"parent.2\" ]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"can be run multiple times\", () => {\n\t\t\tdescribe_sut();\n\t\t\tdescribe_sut();\n\t\t});\n\n\t\tit(\"can be run multiple times even if a previous run results in an exception\", () => {\n\t\t\ttry {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tthrow new Error(\"my exception\");\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch {\n\t\t\t\t// ignored\n\t\t\t}\n\n\t\t\tdescribe_sut();\n\t\t});\n\n\t\tit(\"propagates filename into children's test results\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst filename = \"my_filename\";\n\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(\"pass\", () => {});\n\t\t\t\tit_sut.skip(\"skip\", () => {});\n\t\t\t\tit_sut(\"fail\", () => { throw Error(\"fail\"); });\n\t\t\t\tit_sut(\"timeout\", async () => { await clock.waitAsync(DEFAULT_TIMEOUT + 1); });\n\t\t\t\tit_sut(\"test without body\");\n\t\t\t\tdescribe_sut(\"suite without body\");\n\t\t\t});\n\t\t\tsuite._setFilename(filename);\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tclock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.equal(await actualPromise, TestResult.suite([], [\n\t\t\t\tcreatePass({ name: \"pass\", filename }),\n\t\t\t\tcreateSkip({ name: \"skip\", mark: TestMark.skip, filename }),\n\t\t\t\tcreateFail({ name: \"fail\", error: new Error(\"fail\"), filename }),\n\t\t\t\tcreateTimeout({ name: \"timeout\", timeout: DEFAULT_TIMEOUT, filename }),\n\t\t\t\tcreateSkip({ name: \"test without body\", mark: TestMark.skip, filename }),\n\t\t\t\tcreateSuite({ name: \"suite without body\", mark: TestMark.skip, filename }),\n\t\t\t], filename));\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test cases\", () => {\n\n\t\tit(\"runs when its parent suite is run\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(testRan, false, \"before suite runs\");\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(testRan, true, \"after suite runs\");\n\t\t});\n\n\t\tit(\"works with asynchronous code\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, async () => {\n\t\t\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\t\t\tsetImmediate(() => {\n\t\t\t\t\t\t\ttestRan = true;\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(testRan, true);\n\t\t});\n\n\t\tit(\"passes when test doesn't throw exception\", async () => {\n\t\t\tconst result = await runTestAsync(\"my test\", () => {});\n\t\t\tassert.dotEquals(result, TestResult.pass(\"my test\"));\n\t\t});\n\n\t\tit(\"fails when test throws exception\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst result = await runTestAsync(\"my test\", () => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t\t\tassert.dotEquals(result, TestResult.fail(\"my test\", error));\n\t\t});\n\n\t\tit(\"can retrieve config variables\", async () => {\n\t\t\tconst myConfig = { myConfig: \"my_config\" };\n\t\t\tlet receivedConfig;\n\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, ({ getConfig }) => {\n\t\t\t\t\treceivedConfig = getConfig(\"myConfig\");\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync({ config: myConfig });\n\t\t\tassert.equal(receivedConfig, \"my_config\");\n\t\t});\n\n\t\tit(\"fails fast when no config defined\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, ({ getConfig }) => {\n\t\t\t\t\tgetConfig(\"no_such_config\");\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst results = await suite.runAsync({});\n\t\t\tassert.equal(results, TestResult.suite([], [\n\t\t\t\tTestResult.fail(IRRELEVANT_NAME, new Error(\"No test config found for name 'no_such_config'\")),\n\t\t\t]));\n\t\t});\n\n\t\tit(\"fails fast when config defined, but config variable not found\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(IRRELEVANT_NAME, ({ getConfig }) => {\n\t\t\t\t\tgetConfig(\"no_such_config\");\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst results = await suite.runAsync({ config: {} });\n\t\t\tassert.equal(results, TestResult.suite([], [\n\t\t\t\tTestResult.fail(IRRELEVANT_NAME, new Error(\"No test config found for name 'no_such_config'\")),\n\t\t\t]));\n\t\t});\n\n\t\tit(\"fails when run outside of describe()\", () => {\n\t\t\tassert.error(\n\t\t\t\t() => it_sut(IRRELEVANT_NAME),\n\t\t\t\t\"it() must be run inside describe()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => it_sut.skip(IRRELEVANT_NAME),\n\t\t\t\t\"it() must be run inside describe()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => it_sut.only(IRRELEVANT_NAME),\n\t\t\t\t\"it() must be run inside describe()\",\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"naming\", () => {\n\n\t\tit(\"test suites can be created with and without a name\", async () => {\n\t\t\tconst name = describe_sut(\"named\", () => {\n\t\t\t\tit_sut(\"has a name\", () => {});\n\t\t\t});\n\t\t\tconst noName = describe_sut(() => {\n\t\t\t\tit_sut(\"has no name\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await name.runAsync(), TestResult.suite(\"named\", [ TestResult.pass([ \"named\", \"has a name\" ]) ]));\n\t\t\tassert.dotEquals(await noName.runAsync(), TestResult.suite([], [ TestResult.pass(\"has no name\") ]));\n\t\t});\n\n\t\tit(\"test cases without names are given a default\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(\"\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(), TestResult.suite([], [ TestResult.pass(\"(unnamed)\") ]));\n\t\t});\n\n\t\tit(\"sets name of test result to include nested suites\", async () => {\n\t\t\tconst top = describe_sut(\"top\", () => {\n\t\t\t\tdescribe_sut(\"middle\", () => {\n\t\t\t\t\tdescribe_sut(\"bottom\", () => {\n\t\t\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await top.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite([ \"top\" ], [\n\t\t\t\t\tTestResult.suite([ \"top\", \"middle\" ], [\n\t\t\t\t\t\tTestResult.suite([ \"top\", \"middle\", \"bottom\" ], [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"middle\", \"bottom\", \"my test\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"collapses unnamed suites when setting test result name\", async () => {\n\t\t\tconst top = describe_sut(\"top\", () => {\n\t\t\t\tdescribe_sut(\"\", () => {\n\t\t\t\t\tdescribe_sut(\"\", () => {\n\t\t\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await top.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\t\tTestResult.suite(\"top\", [\n\t\t\t\t\t\t\tTestResult.pass([ \"top\", \"my test\" ]),\n\t\t\t\t\t\t]),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"before/after\", () => {\n\n\t\tit(\"runs function before and after all tests in a suite\", async () => {\n\t\t\tconst ordering: string[] = [];\n\t\t\tconst pushFn: ((message: string) => () => void) = (message: string) => {\n\t\t\t\treturn () => ordering.push(message);\n\t\t\t};\n\n\t\t\tconst suite = describe_sut(IRRELEVANT_NAME, () => {\n\t\t\t\tbeforeAll_sut(pushFn(\"parent before 1\"));\n\t\t\t\tbeforeAll_sut(pushFn(\"parent before 2\"));\n\t\t\t\tafterAll_sut(pushFn(\"parent after 1\"));\n\t\t\t\tafterAll_sut(pushFn(\"parent after 2\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 1\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 2\"));\n\t\t\t\tdescribe_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\tbeforeAll_sut(pushFn(\"child before\"));\n\t\t\t\t\tafterAll_sut(pushFn(\"child after\"));\n\t\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 3\"));\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(ordering, [\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"test 1\",\n\t\t\t\t\"test 2\",\n\t\t\t\t\"child before\",\n\t\t\t\t\"test 3\",\n\t\t\t\t\"child after\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t]);\n\t\t});\n\n\t\tit(\"runs function before and after each test in a suite\", async () => {\n\t\t\tconst ordering: string[] = [];\n\t\t\tconst pushFn: ((message: string) => () => void) = (message) => {\n\t\t\t\treturn () => ordering.push(message);\n\t\t\t};\n\n\t\t\tconst suite = describe_sut(IRRELEVANT_NAME, () => {\n\t\t\t\tbeforeEach_sut(pushFn(\"parent before 1\"));\n\t\t\t\tbeforeEach_sut(pushFn(\"parent before 2\"));\n\t\t\t\tafterEach_sut(pushFn(\"parent after 1\"));\n\t\t\t\tafterEach_sut(pushFn(\"parent after 2\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 1\"));\n\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 2\"));\n\t\t\t\tdescribe_sut(IRRELEVANT_NAME, () => {\n\t\t\t\t\tbeforeEach_sut(pushFn(\"child before\"));\n\t\t\t\t\tafterEach_sut(pushFn(\"child after\"));\n\t\t\t\t\tit_sut(IRRELEVANT_NAME, pushFn(\"test 3\"));\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(ordering, [\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"test 1\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"test 2\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t\t\"parent before 1\",\n\t\t\t\t\"parent before 2\",\n\t\t\t\t\"child before\",\n\t\t\t\t\"test 3\",\n\t\t\t\t\"child after\",\n\t\t\t\t\"parent after 1\",\n\t\t\t\t\"parent after 2\",\n\t\t\t]);\n\t\t});\n\n\t\tit(\"provides config\", async () => {\n\t\t\tconst myConfig = { myConfig: \"my_config\" };\n\t\t\tlet beforeAllReceived, beforeEachReceived, afterEachReceived, afterAllReceived;\n\n\t\t\tconst suite = describe_sut(IRRELEVANT_NAME, () => {\n\t\t\t\tbeforeAll_sut(({ getConfig }) => { beforeAllReceived = getConfig(\"myConfig\"); });\n\t\t\t\tbeforeEach_sut(({ getConfig }) => { beforeEachReceived = getConfig(\"myConfig\"); });\n\t\t\t\tit_sut(IRRELEVANT_NAME, () => {});\n\t\t\t\tafterEach_sut(({ getConfig }) => { afterEachReceived = getConfig(\"myConfig\"); });\n\t\t\t\tafterAll_sut(({ getConfig }) => { afterAllReceived = getConfig(\"myConfig\"); });\n\t\t\t});\n\n\t\t\tawait suite.runAsync({ config: myConfig });\n\n\t\t\tassert.equal(beforeAllReceived, \"my_config\", \"beforeAll\");\n\t\t\tassert.equal(beforeEachReceived, \"my_config\", \"beforeEach\");\n\t\t\tassert.equal(afterEachReceived, \"my_config\", \"afterEach\");\n\t\t\tassert.equal(afterAllReceived, \"my_config\", \"afterAll\");\n\t\t});\n\n\t\tit(\"doesn't run beforeAll and afterAll when all children are skipped\", async () => {\n\t\t\tlet beforeRan = false;\n\t\t\tlet afterRan = false;\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tbeforeAll_sut(() => {\n\t\t\t\t\tbeforeRan = true;\n\t\t\t\t});\n\t\t\t\tafterAll_sut(() => {\n\t\t\t\t\tafterRan = true;\n\t\t\t\t});\n\t\t\t\tit_sut.skip(\"test 1\", async () => {});\n\t\t\t\tit_sut.skip(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(beforeRan, false, \"shouldn't run beforeAll()\");\n\t\t\tassert.equal(afterRan, false, \"shouldn't run afterAll()\");\n\t\t});\n\n\t\tit(\"doesn't run beforeEach and afterEach when the test is skipped\", async () => {\n\t\t\tlet beforeRan = false;\n\t\t\tlet afterRan = false;\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tbeforeRan = true;\n\t\t\t\t});\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterRan = true;\n\t\t\t\t});\n\t\t\t\tit_sut.skip(\"test 1\", async () => {});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(beforeRan, false, \"shouldn't run beforeEach()\");\n\t\t\tassert.equal(afterRan, false, \"shouldn't run afterEach()\");\n\t\t});\n\n\t\tit(\"handles exception in beforeAll\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tbeforeAll_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", async () => {});\n\t\t\t\tit_sut(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tcreateSuite({ name: \"my suite\", children: [\n\t\t\t\t\tcreateFail({ name: [ \"my suite\", \"beforeAll()\" ], error }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"handles exception in afterAll\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tafterAll_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", async () => {});\n\t\t\t\tit_sut(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tcreateSuite({ name: \"my suite\", children: [\n\t\t\t\t\tcreatePass({ name: [ \"my suite\", \"test 1\" ]}),\n\t\t\t\t\tcreatePass({ name: [ \"my suite\", \"test 2\" ]}),\n\t\t\t\t\tcreateFail({ name: [ \"my suite\", \"afterAll()\" ], error }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"handles exception in beforeEach\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", async () => {});\n\t\t\t\tit_sut(\"test 2\", async () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.fail(\"test 1\", error),\n\t\t\t\t\tTestResult.fail(\"test 2\", error),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't run test when beforeEach throws exception\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(testRan, false);\n\t\t});\n\n\t\tit(\"handles exception in afterEach\", async () => {\n\t\t\tconst error = new Error(\"my error\");\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", () => {});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.fail(\"test 1\", error),\n\t\t\t\t\tTestResult.fail(\"test 2\", error),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"runs afterEach() even when test throws exception\", async() => {\n\t\t\tlet afterEachRan = false;\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterEachRan = true;\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tawait suite.runAsync();\n\t\t\tassert.equal(afterEachRan, true);\n\t\t});\n\n\t\tit(\"only reports test exception when both test and afterEach throw exceptions\", async () => {\n\t\t\tconst afterEachError = new Error(\"afterEach error\");\n\t\t\tconst testError = new Error(\"test error\");\n\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tthrow afterEachError;\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\tthrow testError;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.dotEquals(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.fail(\"my test\", testError),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"fails when run outside of describe()\", () => {\n\t\t\tassert.error(\n\t\t\t\t() => beforeAll_sut(() => {}),\n\t\t\t\t\"beforeAll() must be run inside describe()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => beforeEach_sut(() => {}),\n\t\t\t\t\"beforeEach() must be run inside describe()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => afterAll_sut(() => {}),\n\t\t\t\t\"afterAll() must be run inside describe()\",\n\t\t\t);\n\t\t\tassert.error(\n\t\t\t\t() => afterEach_sut(() => {}),\n\t\t\t\t\"afterEach() must be run inside describe()\",\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"timeouts\", () => {\n\n\t\tit(\"times out when test doesn't complete before default timeout\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet beforeTime = null;\n\t\t\tlet afterTime = null;\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tbeforeTime = clock.now();\n\t\t\t\t});\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", async () => {\n\t\t\t\t\tawait clock.waitAsync(DEFAULT_TIMEOUT + 1);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.timeout(\"my test\", DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(beforeTime, 0, \"beforeEach() should run immediately\");\n\t\t\tassert.equal(afterTime, DEFAULT_TIMEOUT, \"afterEach() should run as soon as it() times out\");\n\t\t});\n\n\t\tit(\"times out when beforeAll doesn't complete before default timeout\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet itTime = null;\n\t\t\tlet afterTime = null;\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tbeforeAll_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(DEFAULT_TIMEOUT + 1);\n\t\t\t\t});\n\t\t\t\tafterAll_sut(() => {\n\t\t\t\t\tafterTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite(\"my suite\", [\n\t\t\t\t\tTestResult.timeout([ \"my suite\", \"beforeAll()\" ], DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(itTime, null, \"it() should not run\");\n\t\t\tassert.equal(afterTime, null, \"afterAll() should not run\");\n\t\t});\n\n\t\tit(\"times out when afterAll doesn't complete before default timeout\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet beforeTime = null;\n\t\t\tlet itTime = null;\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tbeforeAll_sut(() => {\n\t\t\t\t\tbeforeTime = clock.now();\n\t\t\t\t});\n\t\t\t\tafterAll_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(DEFAULT_TIMEOUT + 1);\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 1\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"test 1\"),\n\t\t\t\t\tTestResult.pass(\"test 2\"),\n\t\t\t\t\tTestResult.timeout(\"afterAll()\", DEFAULT_TIMEOUT),\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(beforeTime, 0, \"beforeAll() should run immediately\");\n\t\t\tassert.equal(itTime, 0, \"it() should run immediately\");\n\t\t});\n\n\t\tit(\"times out when beforeEach doesn't complete before default timeout\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet itTime = null;\n\t\t\tlet afterTime = null;\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tbeforeEach_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(DEFAULT_TIMEOUT + 1);\n\t\t\t\t});\n\t\t\t\tafterEach_sut(() => {\n\t\t\t\t\tafterTime = clock.now();\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.timeout(\"my test\", DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(itTime, null, \"it() should not run\");\n\t\t\tassert.equal(afterTime, null, \"afterEach() should not run\");\n\t\t});\n\n\t\tit(\"times out when afterEach doesn't complete before default timeout\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tlet beforeTime = null;\n\t\t\tlet itTime = null;\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tbeforeEach_sut(() => {\n\t\t\t\t\tbeforeTime = clock.now();\n\t\t\t\t});\n\t\t\t\tafterEach_sut(async () => {\n\t\t\t\t\tawait clock.waitAsync(DEFAULT_TIMEOUT + 1);\n\t\t\t\t});\n\t\t\t\tit_sut(\"my test\", () => {\n\t\t\t\t\titTime = clock.now();\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.timeout(\"my test\", DEFAULT_TIMEOUT)\n\t\t\t\t]),\n\t\t\t\t\"result\",\n\t\t\t);\n\t\t\tassert.equal(beforeTime, 0, \"beforeEach() should run immediately\");\n\t\t\tassert.equal(itTime, 0, \"it() should run immediately\");\n\t\t});\n\n\t\tit(\"times out each function separately\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst notQuiteTimeoutFn = async () => {\n\t\t\t\tawait clock.waitAsync(DEFAULT_TIMEOUT - 1);\n\t\t\t};\n\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tbeforeAll_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeAll_sut(notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut(notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut(notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut(notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut(notQuiteTimeoutFn);\n\t\t\t\tit_sut(\"test 1\", notQuiteTimeoutFn);\n\t\t\t\tit_sut(\"test 2\", notQuiteTimeoutFn);\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"test 1\"),  // all tests pass because nothing timed out\n\t\t\t\t\tTestResult.pass(\"test 2\"),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"allows runner to configure default timeout\", async () => {\n\t\t\tconst NEW_TIMEOUT = DEFAULT_TIMEOUT * 2;\n\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(\"no timeout\", async () => {\n\t\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT - 1);\n\t\t\t\t});\n\t\t\t\tit_sut(\"timeout\", async () => {\n\t\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT + 1);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ timeout: NEW_TIMEOUT, clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(\n\t\t\t\tawait actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"no timeout\"),\n\t\t\t\t\tTestResult.timeout(\"timeout\", NEW_TIMEOUT),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"allows suites to configure custom timeout\", async () => {\n\t\t\tconst NEW_TIMEOUT = DEFAULT_TIMEOUT * 2;\n\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst notQuiteTimeoutFn = async () => {\n\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT - 1);\n\t\t\t};\n\n\t\t\tconst suite = describe_sut({ timeout: NEW_TIMEOUT }, () => {\n\t\t\t\tbeforeAll_sut(notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut(notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut(notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut(notQuiteTimeoutFn);\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"my test\", notQuiteTimeoutFn);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.suite([], [\n\t\t\t\t\t\tTestResult.pass(\"my test\"),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"allows nested suites to override parent suite's timeout\", async () => {\n\t\t\tconst NEW_TIMEOUT = DEFAULT_TIMEOUT * 10;\n\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst suite = describe_sut({ timeout: NEW_TIMEOUT / 2 }, () => {\n\t\t\t\tdescribe_sut(\"my suite\", { timeout: NEW_TIMEOUT }, () => {\n\t\t\t\t\tit_sut(\"my test\", async () => {\n\t\t\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT - 1);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.suite(\"my suite\", [\n\t\t\t\t\t\tTestResult.pass([ \"my suite\", \"my test\" ]),\n\t\t\t\t\t]),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"allows tests to configure custom timeout\", async () => {\n\t\t\tconst NEW_TIMEOUT = DEFAULT_TIMEOUT * 10;\n\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(\"my test\", { timeout: NEW_TIMEOUT }, async () => {\n\t\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT - 1);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"my test\"),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"allows before/after functions to configure custom timeout\", async() => {\n\t\t\tconst NEW_TIMEOUT = DEFAULT_TIMEOUT * 10;\n\n\t\t\tconst clock = await Clock.createNullAsync();\n\t\t\tconst notQuiteTimeoutFn = async () => {\n\t\t\t\tawait clock.waitAsync(NEW_TIMEOUT - 1);\n\t\t\t};\n\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tbeforeAll_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tbeforeAll_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tafterAll_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tbeforeEach_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tafterEach_sut({ timeout: NEW_TIMEOUT }, notQuiteTimeoutFn);\n\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t});\n\n\t\t\tconst actualPromise = suite.runAsync({ clock });\n\t\t\tawait clock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.dotEquals(await actualPromise,\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"my test\"),  // all tests pass because nothing timed out\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\t});\n\n\n\tdescribe(\".skip\", () => {\n\n\t\tit(\"skips and marks tests that have no function\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(\"my test\");\n\t\t\t});\n\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\n\t\t\tassert.dotEquals(result, createSkip({ name: \"my test\", mark: TestMark.skip }), \"should be skipped\");\n\t\t});\n\n\t\tit(\"skips and marks tests that have '.skip'\", async () => {\n\t\t\tlet testRan = false;\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut.skip(\"my test\", () => {\n\t\t\t\t\ttestRan = true;\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = (await suite.runAsync()).allTests()[0];\n\t\t\tassert.equal(testRan, false, \"should not run test\");\n\t\t\tassert.dotEquals(result, createSkip({ name: \"my test\", mark: TestMark.skip }));\n\t\t\tassert.equal(result.mark, TestMark.skip, \"should be marked\");\n\t\t});\n\n\t\tit(\"skips suites that have no function\", async () => {\n\t\t\tconst suite = await describe_sut(\"my suite\").runAsync();\n\t\t\tconst noName = await describe_sut().runAsync();\n\n\t\t\tassert.dotEquals(suite, createSuite({ name: \"my suite\", mark: TestMark.skip }));\n\t\t\tassert.dotEquals(noName, createSuite({ name: [], mark: TestMark.skip }));\n\t\t});\n\n\t\tit(\"recursively skips everything within a suite that has '.skip'\", async () => {\n\t\t\tconst suite = describe_sut.skip(() => {\n\t\t\t\tit_sut(\"test 1\", () => {});\n\t\t\t\tit_sut(\"test 2\", () => {});\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"test 3\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tTestResult.skip(\"test 1\"),\n\t\t\t\t\tTestResult.skip(\"test 2\"),\n\t\t\t\t\tTestResult.suite([], [\n\t\t\t\t\t\tTestResult.skip(\"test 3\"),\n\t\t\t\t\t]),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't mark skipped tests and suites that aren't explicitly marked '.skip'\", async () => {\n\t\t\tconst suite = describe_sut.skip(() => {\n\t\t\t\tit_sut(\"test\", () => {});\n\t\t\t\tdescribe_sut(\"suite\", () => {});\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tcreateSkip({ name: \"test\", mark: TestMark.none }),\n\t\t\t\t\tcreateSuite({ name: \"suite\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"generates failure when a suite is marked 'only' but has no body\", async () => {\n\t\t\tconst suite = describe_sut.only(\"my suite\");\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ name: \"my suite\", mark: TestMark.only, children: [\n\t\t\t\t\tcreateFail({ name: \"my suite\", error: \"Test suite is marked '.only', but it has no body\" }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"generates failure when a test is marked 'only' but has no body\", async () => {\n\t\t\tconst suite = describe_sut(\"my suite\", () => {\n\t\t\t\tit_sut.only(\"my test\");\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ name: \"my suite\", children: [\n\t\t\t\t\tcreateFail({\n\t\t\t\t\t\tname: [ \"my suite\", \"my test\" ],\n\t\t\t\t\t\terror: \"Test is marked '.only', but it has no body\",\n\t\t\t\t\t\tmark: TestMark.only,\n\t\t\t\t\t}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\".only\", () => {\n\n\t\tit(\"if any tests are marked .only, it only runs those tests\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut.only(\".only\", () => {});\n\t\t\t\tit_sut(\"not .only\", () => {});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreatePass({ name: \".only\", mark: TestMark.only }),\n\t\t\t\t\tcreateSkip({ name: \"not .only\" }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"marks test results as '.only'\", async () => {\n\t\t\tconst clock = await Clock.createNullAsync();\n\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut.only(\"pass\", () => {});\n\t\t\t\tit_sut.only(\"fail\", () => { throw new Error(\"my error\"); });\n\t\t\t\tit_sut.only(\"timeout\", async () => { await clock.waitAsync(DEFAULT_TIMEOUT + 1); });\n\t\t\t});\n\n\t\t\tconst resultPromise = suite.runAsync({ clock });\n\t\t\tclock.tickUntilTimersExpireAsync();\n\n\t\t\tassert.equal(await resultPromise,\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreatePass({ name: \"pass\", mark: TestMark.only }),\n\t\t\t\t\tcreateFail({ name: \"fail\", error: new Error(\"my error\"), mark: TestMark.only }),\n\t\t\t\t\tcreateTimeout({ name: \"timeout\", timeout: DEFAULT_TIMEOUT, mark: TestMark.only }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and none of its tests are, runs all of those tests\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tdescribe_sut(\"not .only\", () => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t\tdescribe_sut.only(\".only\", () => {\n\t\t\t\t\tit_sut(\"test3\", () => {});\n\t\t\t\t\tit_sut(\"test4\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.suite(\"not .only\", [\n\t\t\t\t\t\tTestResult.skip([ \"not .only\", \"test1\" ]),\n\t\t\t\t\t\tTestResult.skip([ \"not .only\", \"test2\" ]),\n\t\t\t\t\t]),\n\t\t\t\t\tcreateSuite({ name: \".only\", mark: TestMark.only, children: [\n\t\t\t\t\t\tTestResult.pass([ \".only\", \"test3\" ]),\n\t\t\t\t\t\tTestResult.pass([ \".only\", \"test4\" ]),\n\t\t\t\t\t]}),\n\t\t\t\t]),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and none of its children are, run those tests recursively\", async () => {\n\t\t\tconst suite = describe_sut.only(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"test\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tTestResult.suite([], [\n\t\t\t\t\t\tTestResult.pass(\"test\"),\n\t\t\t\t\t]),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and one of its children is also, only run that test\", async () => {\n\t\t\tconst suite = describe_sut.only(() => {\n\t\t\t\tit_sut(\"not only\", () => {});\n\t\t\t\tit_sut.only(\"only\", () => {});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSkip({ name: \"not only\" }),\n\t\t\t\t\tcreatePass({ name: \"only\", mark: TestMark.only }),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and one of its grandchildren is also, only run that test\", async () => {\n\t\t\tconst suite = describe_sut.only(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut(\"not only\", () => {});\n\t\t\t\t\tit_sut.only(\"only\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\t\tcreateSkip({ name: \"not only\" }),\n\t\t\t\t\t\tcreatePass({ name: \"only\", mark: TestMark.only }),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and one of its child suites is also, only run that suite\", async () => {\n\t\t\tconst suite = describe_sut.only(() => {\n\t\t\t\tdescribe_sut(\"not only\", () => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t});\n\t\t\t\tdescribe_sut.only(\"only\", () => {\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tTestResult.suite(\"not only\", [\n\t\t\t\t\t\tTestResult.skip([ \"not only\", \"test1\" ]),\n\t\t\t\t\t]),\n\t\t\t\t\tcreateSuite({ name: \"only\", mark: TestMark.only, children: [\n\t\t\t\t\t\tTestResult.pass([ \"only\", \"test2\" ]),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and a child is marked .skip, skip the child\", async () => {\n\t\t\tconst suite = describe_sut.only(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut.skip(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\t\tcreateSkip({ name: \"test1\", mark: TestMark.skip }),\n\t\t\t\t\t\tTestResult.pass(\"test2\"),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .skip and a child is marked .only, run the child\", async () => {\n\t\t\tconst suite = describe_sut.skip(() => {\n\t\t\t\tdescribe_sut(() => {\n\t\t\t\t\tit_sut.only(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\t\tcreatePass({ name: \"test1\", mark: TestMark.only }),\n\t\t\t\t\t\tcreateSkip({ name: \"test2\" }),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .only and a child suite is marked .skip, skip its children\", async () => {\n\t\t\tconst suite = describe_sut.only(() => {\n\t\t\t\tdescribe_sut.skip(() => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\t\tTestResult.skip(\"test1\"),\n\t\t\t\t\t\tTestResult.skip(\"test2\"),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"if a suite is marked .skip and a child suite is marked .only, run its children\", async () => {\n\t\t\tconst suite = describe_sut.skip(() => {\n\t\t\t\tdescribe_sut.only(() => {\n\t\t\t\t\tit_sut(\"test1\", () => {});\n\t\t\t\t\tit_sut(\"test2\", () => {});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tassert.equal(await suite.runAsync(),\n\t\t\t\tcreateSuite({ mark: TestMark.skip, children: [\n\t\t\t\t\tcreateSuite({ mark: TestMark.only, children: [\n\t\t\t\t\t\tTestResult.pass(\"test1\"),\n\t\t\t\t\t\tTestResult.pass(\"test2\"),\n\t\t\t\t\t]}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t\tit(\"marks suites even if they fail 'beforeAll'\", async () => {\n\t\t\tconst suite = describe_sut.only(\"my suite\", () => {\n\t\t\t\tbeforeAll_sut(() => { throw new Error(\"my error\"); });\n\t\t\t\tit_sut(\"my test\");\n\t\t\t});\n\n\t\t\tconst result = await suite.runAsync();\n\t\t\tassert.dotEquals(result,\n\t\t\t\tcreateSuite({ name: \"my suite\", mark: TestMark.only, children: [\n\t\t\t\t\tcreateFail({\n\t\t\t\t\t\tname: [ \"my suite\", \"beforeAll()\" ],\n\t\t\t\t\t\terror: new Error(\"my error\"),\n\t\t\t\t\t}),\n\t\t\t\t]}),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"notification\", () => {\n\n\t\tit(\"runs notify function when test completes\", async () => {\n\t\t\tconst suite = describe_sut(() => {\n\t\t\t\tit_sut(\"my test\", () => {});\n\t\t\t});\n\n\t\t\tlet testResult;\n\t\t\tfunction notifyFn(result: TestResult) {\n\t\t\t\ttestResult = result;\n\t\t\t}\n\n\t\t\tawait suite.runAsync({ notifyFn });\n\t\t\tassert.dotEquals(testResult, TestResult.pass(\"my test\"));\n\t\t});\n\n\t\tit(\"runs notify function if module fails to require()\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"./_module_throws.js\" ]);\n\n\t\t\tlet testResult: TestCaseResult;\n\t\t\tfunction notifyFn(result: TestCaseResult) {\n\t\t\t\ttestResult = result;\n\t\t\t}\n\n\t\t\tawait suite.runAsync({ notifyFn });\n\t\t\tassert.equal(testResult!.name, [ \"error when importing _module_throws.js\" ]);\n\t\t});\n\n\t\tit(\"runs notify function if module doesn't export a test suite\", async () => {\n\t\t\tconst suite = await TestSuite.fromModulesAsync([ \"./_module_no_export.js\" ]);\n\n\t\t\tlet testResult: TestCaseResult;\n\n\t\t\tfunction notifyFn(result: TestCaseResult) {\n\t\t\t\ttestResult = result;\n\t\t\t}\n\n\t\t\tawait suite.runAsync({ notifyFn });\n\t\t\tassert.equal(testResult!.name, [ \"error when importing _module_no_export.js\" ]);\n\t\t});\n\n\t});\n\n});\n\n\nasync function runTestAsync(testName: string, testFn: () => void) {\n\tconst suite = describe_sut(() => {\n\t\tit_sut(testName, testFn);\n\t});\n\tconst result = await suite.runAsync();\n\treturn result.children[0];\n}\n\nfunction createSuite({\n\tname = [],\n\tchildren = [],\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tchildren?: TestResult[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.suite(name, children, filename, mark);\n}\n\nfunction createPass({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.pass(name, filename, mark);\n}\n\nfunction createFail({\n\tname = \"irrelevant name\",\n\terror = new Error(\"irrelevant error\"),\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\terror?: string | Error,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.fail(name, error, filename, mark);\n}\n\nfunction createSkip({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.skip(name, filename, mark);\n}\n\nfunction createTimeout({\n\tname = \"irrelevant name\",\n\ttimeout = 42,\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\ttimeout?: number,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.timeout(name, timeout, filename, mark);\n}"],"names":["assert","describe","it","test","afterAll","afterAll_sut","afterEach","afterEach_sut","beforeAll","beforeAll_sut","beforeEach","beforeEach_sut","describe_sut","it_sut","TestSuite","Clock","TestMark","TestResult","TestStatus","path","SUCCESS_MODULE_PATH","resolve","dirname","THROWS_MODULE_PATH","NO_EXPORT_MODULE_PATH","IRRELEVANT_NAME","DEFAULT_TIMEOUT","DEFAULT_TIMEOUT_IN_MS","suite","fromModulesAsync","testCaseResult","pass","dotEquals","runAsync","result","allTests","equal","name","isUndefined","filename","status","fail","error","match","message","suiteRan","testRan","top","parent","Error","clock","createNullAsync","skip","waitAsync","_setFilename","actualPromise","tickUntilTimersExpireAsync","createPass","createSkip","mark","createFail","createTimeout","timeout","createSuite","Promise","setImmediate","runTestAsync","myConfig","receivedConfig","getConfig","config","results","only","noName","ordering","pushFn","push","beforeAllReceived","beforeEachReceived","afterEachReceived","afterAllReceived","beforeRan","afterRan","children","afterEachRan","afterEachError","testError","beforeTime","afterTime","now","itTime","notQuiteTimeoutFn","NEW_TIMEOUT","none","resultPromise","testResult","notifyFn","testName","testFn","undefined"],"mappings":"AAAA,iFAAiF;AACjF,SAASA,MAAM,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,IAAI,QAAQ,cAAc;AACzD,SACCC,YAAYC,YAAY,EACxBC,aAAaC,aAAa,EAC1BC,aAAaC,aAAa,EAC1BC,cAAcC,cAAc,EAC5BV,YAAYW,YAAY,EACxBV,MAAMW,MAAM,EACZC,SAAS,QACH,kBAAkB;AACzB,SAASC,KAAK,QAAQ,6BAA6B;AACnD,SAAyBC,QAAQ,EAAiBC,UAAU,EAAEC,UAAU,QAAQ,mBAAmB;AACnG,OAAOC,UAAU,YAAY;AAC7B,kCAAkC;AAClC,kCAAkC;AAClC,qCAAqC;AAErC,yCAAyC;AAEzC,MAAMC,sBAAsBD,KAAKE,OAAO,CAAC,YAAYC,OAAO,EAAE;AAC9D,MAAMC,qBAAqBJ,KAAKE,OAAO,CAAC,YAAYC,OAAO,EAAE;AAC7D,MAAME,wBAAwBL,KAAKE,OAAO,CAAC,YAAYC,OAAO,EAAE;AAEhE,MAAMG,kBAAkB;AACxB,MAAMC,kBAAkBZ,UAAUa,qBAAqB;AACvD,eAAexB,KAAK;IAEnBF,SAAS,gBAAgB;QAExBC,GAAG,kEAAkE;YACpE,MAAM0B,QAAQ,MAAMd,UAAUe,gBAAgB,CAAC;gBAAET;gBAAqBA;aAAqB;YAE3F,MAAMU,iBAAiBb,WAAWc,IAAI,CAAC,UAAUX;YACjDpB,OAAOgC,SAAS,CAAC,MAAMJ,MAAMK,QAAQ,IACpChB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWW,KAAK,CAAC,EAAE,EAAE;oBAAEE;iBAAgB,EAAEV;gBACzCH,WAAWW,KAAK,CAAC,EAAE,EAAE;oBAAEE;iBAAgB,EAAEV;aACzC;QAEH;QAEAlB,GAAG,qDAAqD;YACvD,MAAM0B,QAAQ,MAAMd,UAAUe,gBAAgB,CAAC;gBAAE;aAAuB;YACxE,MAAMK,SAAS,AAAC,CAAA,MAAMN,MAAMK,QAAQ,EAAC,EAAGE,QAAQ,EAAE,CAAC,EAAE;YAErDnC,OAAOoC,KAAK,CAACF,OAAOG,IAAI,EAAE;gBAAE;aAA0C;YACtErC,OAAOsC,WAAW,CAACJ,OAAOK,QAAQ;YAClCvC,OAAOoC,KAAK,CAACF,OAAOM,MAAM,EAAEtB,WAAWuB,IAAI;YAC3CzC,OAAOoC,KAAK,CAACF,OAAOQ,KAAK,EAAE;QAC5B;QAEAxC,GAAG,4CAA4C;YAC9C,MAAM0B,QAAQ,MAAMd,UAAUe,gBAAgB,CAAC;gBAAE;aAAsB;YACvE,MAAMK,SAAS,AAAC,CAAA,MAAMN,MAAMK,QAAQ,EAAC,EAAGE,QAAQ,EAAE,CAAC,EAAE;YAErDnC,OAAOoC,KAAK,CAACF,OAAOG,IAAI,EAAE;gBAAE;aAA0C;YACtErC,OAAOoC,KAAK,CAACF,OAAOK,QAAQ,EAAE;YAC9BvC,OAAOoC,KAAK,CAACF,OAAOM,MAAM,EAAEtB,WAAWuB,IAAI;YAC3CzC,OAAOoC,KAAK,CAACF,OAAOQ,KAAK,EAAE,CAAC,yCAAyC,CAAC;QACvE;QAEAxC,GAAG,iDAAiD;YACnD,MAAM0B,QAAQ,MAAMd,UAAUe,gBAAgB,CAAC;gBAAEN;aAAoB;YACrE,MAAMW,SAAS,AAAC,CAAA,MAAMN,MAAMK,QAAQ,EAAC,EAAGE,QAAQ,EAAE,CAAC,EAAE;YAErDnC,OAAOoC,KAAK,CAACF,OAAOG,IAAI,EAAE;gBAAE;aAA0C;YACtErC,OAAOoC,KAAK,CAACF,OAAOK,QAAQ,EAAEhB;YAC9BvB,OAAOoC,KAAK,CAACF,OAAOM,MAAM,EAAEtB,WAAWuB,IAAI;YAC3CzC,OAAO2C,KAAK,CAAC,AAACT,OAAOQ,KAAK,CAAyBE,OAAO,EAAE;QAC7D;QAEA1C,GAAG,0DAA0D;YAC5D,MAAM0B,QAAQ,MAAMd,UAAUe,gBAAgB,CAAC;gBAAEL;aAAuB;YACxE,MAAMU,SAAS,AAAC,CAAA,MAAMN,MAAMK,QAAQ,EAAC,EAAGE,QAAQ,EAAE,CAAC,EAAE;YAErDnC,OAAOoC,KAAK,CAACF,OAAOG,IAAI,EAAE;gBAAE;aAA6C;YACzErC,OAAOoC,KAAK,CAACF,OAAOK,QAAQ,EAAEf;YAC9BxB,OAAOoC,KAAK,CAACF,OAAOM,MAAM,EAAEtB,WAAWuB,IAAI;YAC3CzC,OAAOoC,KAAK,CAACF,OAAOQ,KAAK,EAAE,CAAC,yCAAyC,EAAElB,sBAAsB,CAAC;QAC/F;IAED;IAGAvB,SAAS,eAAe;QAEvBC,GAAG,0CAA0C;YAC5C,IAAI2C,WAAW;YACf,IAAIC,UAAU;YACdlC,aAAa;gBACZiC,WAAW;gBACXhC,OAAOY,iBAAiB;oBACvBqB,UAAU;gBACX;YACD;YAEA9C,OAAOoC,KAAK,CAACS,UAAU,MAAM;YAC7B7C,OAAOoC,KAAK,CAACU,SAAS,OAAO;QAC9B;QAEA5C,GAAG,iCAAiC;YACnC,MAAM0B,QAAQhB,aAAa;gBAC1BC,OAAO,UAAU,KAAO;gBACxBA,OAAO,UAAU,KAAO;gBACxBA,OAAO,UAAU,KAAO;YACzB;YAEA,MAAMqB,SAAS,MAAMN,MAAMK,QAAQ;YACnCjC,OAAOgC,SAAS,CAACE,QAChBjB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWc,IAAI,CAAC;gBAChBd,WAAWc,IAAI,CAAC;gBAChBd,WAAWc,IAAI,CAAC;aAChB;QAEH;QAEA7B,GAAG,iBAAiB;YACnB,MAAM6C,MAAMnC,aAAa,OAAO;gBAC/BA,aAAa,UAAU;oBACtBA,aAAa,UAAU;wBACtBC,OAAO,WAAW,KAAO;oBAC1B;gBACD;YACD;YAEA,MAAMqB,SAAS,MAAMa,IAAId,QAAQ;YACjCjC,OAAOgC,SAAS,CAACE,QAChBjB,WAAWW,KAAK,CAAC,OAAO;gBACvBX,WAAWW,KAAK,CAAC;oBAAE;oBAAO;iBAAU,EAAE;oBACrCX,WAAWW,KAAK,CAAC;wBAAE;wBAAO;wBAAU;qBAAU,EAAE;wBAC/CX,WAAWc,IAAI,CAAC;4BAAE;4BAAO;4BAAU;4BAAU;yBAAW;qBACxD;iBACD;aACD;QAEH;QAEA7B,GAAG,4DAA4D;YAC9D,MAAM6C,MAAMnC,aAAa,OAAO;gBAC/BC,OAAO,SAAS,KAAO;gBACvBD,aAAa,UAAU;oBACtBC,OAAO,YAAY,KAAO;oBAC1BD,aAAa,UAAU;wBACtBC,OAAO,YAAY,KAAO;oBAC3B;oBACAA,OAAO,YAAY,KAAO;gBAC3B;gBACAA,OAAO,SAAS,KAAO;YACxB;YAEAb,OAAOgC,SAAS,CAAC,MAAMe,IAAId,QAAQ,IAClChB,WAAWW,KAAK,CAAC,OAAO;gBACvBX,WAAWc,IAAI,CAAC;oBAAE;oBAAO;iBAAS;gBAClCd,WAAWW,KAAK,CAAC;oBAAE;oBAAO;iBAAU,EAAE;oBACrCX,WAAWc,IAAI,CAAC;wBAAE;wBAAO;wBAAU;qBAAY;oBAC/Cd,WAAWW,KAAK,CAAC;wBAAE;wBAAO;wBAAU;qBAAU,EAAE;wBAC/CX,WAAWc,IAAI,CAAC;4BAAE;4BAAO;4BAAU;4BAAU;yBAAY;qBACzD;oBACDd,WAAWc,IAAI,CAAC;wBAAE;wBAAO;wBAAU;qBAAY;iBAC/C;gBACDd,WAAWc,IAAI,CAAC;oBAAE;oBAAO;iBAAS;aAClC;QAEH;QAEA7B,GAAG,+EAA+E;YACjF,MAAM8C,SAASpC,aAAa,UAAU;gBACrCC,OAAO,YAAY,KAAO;gBAC1B,IAAI;oBACHD,aAAa,SAAS;wBACrB,MAAM,IAAIqC,MAAM;oBACjB;gBACD,EACA,OAAM;gBACL,UAAU;gBACX;gBACApC,OAAO,YAAY,KAAO;YAC3B;YAEAb,OAAOgC,SAAS,CAAC,MAAMgB,OAAOf,QAAQ,IACrChB,WAAWW,KAAK,CAAC,UAAU;gBAC1BX,WAAWc,IAAI,CAAC;oBAAE;oBAAU;iBAAY;gBACxCd,WAAWc,IAAI,CAAC;oBAAE;oBAAU;iBAAY;aACxC;QAEH;QAEA7B,GAAG,6BAA6B;YAC/BU;YACAA;QACD;QAEAV,GAAG,4EAA4E;YAC9E,IAAI;gBACHU,aAAa;oBACZ,MAAM,IAAIqC,MAAM;gBACjB;YACD,EACA,OAAM;YACL,UAAU;YACX;YAEArC;QACD;QAEAV,GAAG,oDAAoD;YACtD,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YACzC,MAAMZ,WAAW;YAEjB,MAAMX,QAAQhB,aAAa;gBAC1BC,OAAO,QAAQ,KAAO;gBACtBA,OAAOuC,IAAI,CAAC,QAAQ,KAAO;gBAC3BvC,OAAO,QAAQ;oBAAQ,MAAMoC,MAAM;gBAAS;gBAC5CpC,OAAO,WAAW;oBAAc,MAAMqC,MAAMG,SAAS,CAAC3B,kBAAkB;gBAAI;gBAC5Eb,OAAO;gBACPD,aAAa;YACd;YACAgB,MAAM0B,YAAY,CAACf;YAEnB,MAAMgB,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7CA,MAAMM,0BAA0B;YAEhCxD,OAAOoC,KAAK,CAAC,MAAMmB,eAAetC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACtD6B,WAAW;oBAAEpB,MAAM;oBAAQE;gBAAS;gBACpCmB,WAAW;oBAAErB,MAAM;oBAAQsB,MAAM3C,SAASoC,IAAI;oBAAEb;gBAAS;gBACzDqB,WAAW;oBAAEvB,MAAM;oBAAQK,OAAO,IAAIO,MAAM;oBAASV;gBAAS;gBAC9DsB,cAAc;oBAAExB,MAAM;oBAAWyB,SAASpC;oBAAiBa;gBAAS;gBACpEmB,WAAW;oBAAErB,MAAM;oBAAqBsB,MAAM3C,SAASoC,IAAI;oBAAEb;gBAAS;gBACtEwB,YAAY;oBAAE1B,MAAM;oBAAsBsB,MAAM3C,SAASoC,IAAI;oBAAEb;gBAAS;aACxE,EAAEA;QACJ;IAED;IAGAtC,SAAS,cAAc;QAEtBC,GAAG,qCAAqC;YACvC,IAAI4C,UAAU;YACd,MAAMlB,QAAQhB,aAAa;gBAC1BC,OAAOY,iBAAiB;oBACvBqB,UAAU;gBACX;YACD;YAEA9C,OAAOoC,KAAK,CAACU,SAAS,OAAO;YAC7B,MAAMlB,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAACU,SAAS,MAAM;QAC7B;QAEA5C,GAAG,gCAAgC;YAClC,IAAI4C,UAAU;YACd,MAAMlB,QAAQhB,aAAa;gBAC1BC,OAAOY,iBAAiB;oBACvB,MAAM,IAAIuC,QAAc,CAAC3C;wBACxB4C,aAAa;4BACZnB,UAAU;4BACVzB;wBACD;oBACD;gBACD;YACD;YAEA,MAAMO,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAACU,SAAS;QACvB;QAEA5C,GAAG,4CAA4C;YAC9C,MAAMgC,SAAS,MAAMgC,aAAa,WAAW,KAAO;YACpDlE,OAAOgC,SAAS,CAACE,QAAQjB,WAAWc,IAAI,CAAC;QAC1C;QAEA7B,GAAG,oCAAoC;YACtC,MAAMwC,QAAQ,IAAIO,MAAM;YACxB,MAAMf,SAAS,MAAMgC,aAAa,WAAW;gBAC5C,MAAMxB;YACP;YACA1C,OAAOgC,SAAS,CAACE,QAAQjB,WAAWwB,IAAI,CAAC,WAAWC;QACrD;QAEAxC,GAAG,iCAAiC;YACnC,MAAMiE,WAAW;gBAAEA,UAAU;YAAY;YACzC,IAAIC;YAEJ,MAAMxC,QAAQhB,aAAa;gBAC1BC,OAAOY,iBAAiB,CAAC,EAAE4C,SAAS,EAAE;oBACrCD,iBAAiBC,UAAU;gBAC5B;YACD;YAEA,MAAMzC,MAAMK,QAAQ,CAAC;gBAAEqC,QAAQH;YAAS;YACxCnE,OAAOoC,KAAK,CAACgC,gBAAgB;QAC9B;QAEAlE,GAAG,qCAAqC;YACvC,MAAM0B,QAAQhB,aAAa;gBAC1BC,OAAOY,iBAAiB,CAAC,EAAE4C,SAAS,EAAE;oBACrCA,UAAU;gBACX;YACD;YAEA,MAAME,UAAU,MAAM3C,MAAMK,QAAQ,CAAC,CAAC;YACtCjC,OAAOoC,KAAK,CAACmC,SAAStD,WAAWW,KAAK,CAAC,EAAE,EAAE;gBAC1CX,WAAWwB,IAAI,CAAChB,iBAAiB,IAAIwB,MAAM;aAC3C;QACF;QAEA/C,GAAG,iEAAiE;YACnE,MAAM0B,QAAQhB,aAAa;gBAC1BC,OAAOY,iBAAiB,CAAC,EAAE4C,SAAS,EAAE;oBACrCA,UAAU;gBACX;YACD;YAEA,MAAME,UAAU,MAAM3C,MAAMK,QAAQ,CAAC;gBAAEqC,QAAQ,CAAC;YAAE;YAClDtE,OAAOoC,KAAK,CAACmC,SAAStD,WAAWW,KAAK,CAAC,EAAE,EAAE;gBAC1CX,WAAWwB,IAAI,CAAChB,iBAAiB,IAAIwB,MAAM;aAC3C;QACF;QAEA/C,GAAG,wCAAwC;YAC1CF,OAAO0C,KAAK,CACX,IAAM7B,OAAOY,kBACb;YAEDzB,OAAO0C,KAAK,CACX,IAAM7B,OAAOuC,IAAI,CAAC3B,kBAClB;YAEDzB,OAAO0C,KAAK,CACX,IAAM7B,OAAO2D,IAAI,CAAC/C,kBAClB;QAEF;IAED;IAGAxB,SAAS,UAAU;QAElBC,GAAG,sDAAsD;YACxD,MAAMmC,OAAOzB,aAAa,SAAS;gBAClCC,OAAO,cAAc,KAAO;YAC7B;YACA,MAAM4D,SAAS7D,aAAa;gBAC3BC,OAAO,eAAe,KAAO;YAC9B;YAEAb,OAAOgC,SAAS,CAAC,MAAMK,KAAKJ,QAAQ,IAAIhB,WAAWW,KAAK,CAAC,SAAS;gBAAEX,WAAWc,IAAI,CAAC;oBAAE;oBAAS;iBAAc;aAAG;YAChH/B,OAAOgC,SAAS,CAAC,MAAMyC,OAAOxC,QAAQ,IAAIhB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBAAEX,WAAWc,IAAI,CAAC;aAAgB;QAClG;QAEA7B,GAAG,gDAAgD;YAClD,MAAM0B,QAAQhB,aAAa;gBAC1BC,OAAO,IAAI,KAAO;YACnB;YAEAb,OAAOgC,SAAS,CAAC,MAAMJ,MAAMK,QAAQ,IAAIhB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBAAEX,WAAWc,IAAI,CAAC;aAAc;QAC/F;QAEA7B,GAAG,qDAAqD;YACvD,MAAM6C,MAAMnC,aAAa,OAAO;gBAC/BA,aAAa,UAAU;oBACtBA,aAAa,UAAU;wBACtBC,OAAO,WAAW,KAAO;oBAC1B;gBACD;YACD;YAEA,MAAMqB,SAAS,MAAMa,IAAId,QAAQ;YACjCjC,OAAOgC,SAAS,CAACE,QAChBjB,WAAWW,KAAK,CAAC;gBAAE;aAAO,EAAE;gBAC3BX,WAAWW,KAAK,CAAC;oBAAE;oBAAO;iBAAU,EAAE;oBACrCX,WAAWW,KAAK,CAAC;wBAAE;wBAAO;wBAAU;qBAAU,EAAE;wBAC/CX,WAAWc,IAAI,CAAC;4BAAE;4BAAO;4BAAU;4BAAU;yBAAW;qBACxD;iBACD;aACD;QAEH;QAEA7B,GAAG,0DAA0D;YAC5D,MAAM6C,MAAMnC,aAAa,OAAO;gBAC/BA,aAAa,IAAI;oBAChBA,aAAa,IAAI;wBAChBC,OAAO,WAAW,KAAO;oBAC1B;gBACD;YACD;YAEA,MAAMqB,SAAS,MAAMa,IAAId,QAAQ;YACjCjC,OAAOgC,SAAS,CAACE,QAChBjB,WAAWW,KAAK,CAAC,OAAO;gBACvBX,WAAWW,KAAK,CAAC,OAAO;oBACvBX,WAAWW,KAAK,CAAC,OAAO;wBACvBX,WAAWc,IAAI,CAAC;4BAAE;4BAAO;yBAAW;qBACpC;iBACD;aACD;QAEH;IAED;IAGA9B,SAAS,gBAAgB;QAExBC,GAAG,uDAAuD;YACzD,MAAMwE,WAAqB,EAAE;YAC7B,MAAMC,SAA4C,CAAC/B;gBAClD,OAAO,IAAM8B,SAASE,IAAI,CAAChC;YAC5B;YAEA,MAAMhB,QAAQhB,aAAaa,iBAAiB;gBAC3ChB,cAAckE,OAAO;gBACrBlE,cAAckE,OAAO;gBACrBtE,aAAasE,OAAO;gBACpBtE,aAAasE,OAAO;gBACpB9D,OAAOY,iBAAiBkD,OAAO;gBAC/B9D,OAAOY,iBAAiBkD,OAAO;gBAC/B/D,aAAaa,iBAAiB;oBAC7BhB,cAAckE,OAAO;oBACrBtE,aAAasE,OAAO;oBACpB9D,OAAOY,iBAAiBkD,OAAO;gBAChC;YACD;YAEA,MAAM/C,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAACsC,UAAU;gBACtB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACA;QACF;QAEAxE,GAAG,uDAAuD;YACzD,MAAMwE,WAAqB,EAAE;YAC7B,MAAMC,SAA4C,CAAC/B;gBAClD,OAAO,IAAM8B,SAASE,IAAI,CAAChC;YAC5B;YAEA,MAAMhB,QAAQhB,aAAaa,iBAAiB;gBAC3Cd,eAAegE,OAAO;gBACtBhE,eAAegE,OAAO;gBACtBpE,cAAcoE,OAAO;gBACrBpE,cAAcoE,OAAO;gBACrB9D,OAAOY,iBAAiBkD,OAAO;gBAC/B9D,OAAOY,iBAAiBkD,OAAO;gBAC/B/D,aAAaa,iBAAiB;oBAC7Bd,eAAegE,OAAO;oBACtBpE,cAAcoE,OAAO;oBACrB9D,OAAOY,iBAAiBkD,OAAO;gBAChC;YACD;YAEA,MAAM/C,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAACsC,UAAU;gBACtB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;aACA;QACF;QAEAxE,GAAG,mBAAmB;YACrB,MAAMiE,WAAW;gBAAEA,UAAU;YAAY;YACzC,IAAIU,mBAAmBC,oBAAoBC,mBAAmBC;YAE9D,MAAMpD,QAAQhB,aAAaa,iBAAiB;gBAC3ChB,cAAc,CAAC,EAAE4D,SAAS,EAAE;oBAAOQ,oBAAoBR,UAAU;gBAAa;gBAC9E1D,eAAe,CAAC,EAAE0D,SAAS,EAAE;oBAAOS,qBAAqBT,UAAU;gBAAa;gBAChFxD,OAAOY,iBAAiB,KAAO;gBAC/BlB,cAAc,CAAC,EAAE8D,SAAS,EAAE;oBAAOU,oBAAoBV,UAAU;gBAAa;gBAC9EhE,aAAa,CAAC,EAAEgE,SAAS,EAAE;oBAAOW,mBAAmBX,UAAU;gBAAa;YAC7E;YAEA,MAAMzC,MAAMK,QAAQ,CAAC;gBAAEqC,QAAQH;YAAS;YAExCnE,OAAOoC,KAAK,CAACyC,mBAAmB,aAAa;YAC7C7E,OAAOoC,KAAK,CAAC0C,oBAAoB,aAAa;YAC9C9E,OAAOoC,KAAK,CAAC2C,mBAAmB,aAAa;YAC7C/E,OAAOoC,KAAK,CAAC4C,kBAAkB,aAAa;QAC7C;QAEA9E,GAAG,oEAAoE;YACtE,IAAI+E,YAAY;YAChB,IAAIC,WAAW;YACf,MAAMtD,QAAQhB,aAAa,YAAY;gBACtCH,cAAc;oBACbwE,YAAY;gBACb;gBACA5E,aAAa;oBACZ6E,WAAW;gBACZ;gBACArE,OAAOuC,IAAI,CAAC,UAAU,WAAa;gBACnCvC,OAAOuC,IAAI,CAAC,UAAU,WAAa;YACpC;YAEA,MAAMxB,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAAC6C,WAAW,OAAO;YAC/BjF,OAAOoC,KAAK,CAAC8C,UAAU,OAAO;QAC/B;QAEAhF,GAAG,iEAAiE;YACnE,IAAI+E,YAAY;YAChB,IAAIC,WAAW;YACf,MAAMtD,QAAQhB,aAAa,YAAY;gBACtCD,eAAe;oBACdsE,YAAY;gBACb;gBACA1E,cAAc;oBACb2E,WAAW;gBACZ;gBACArE,OAAOuC,IAAI,CAAC,UAAU,WAAa;YACpC;YAEA,MAAMxB,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAAC6C,WAAW,OAAO;YAC/BjF,OAAOoC,KAAK,CAAC8C,UAAU,OAAO;QAC/B;QAEAhF,GAAG,kCAAkC;YACpC,MAAMwC,QAAQ,IAAIO,MAAM;YACxB,MAAMrB,QAAQhB,aAAa,YAAY;gBACtCH,cAAc;oBACb,MAAMiC;gBACP;gBACA7B,OAAO,UAAU,WAAa;gBAC9BA,OAAO,UAAU,WAAa;YAC/B;YAEAb,OAAOgC,SAAS,CAAC,MAAMJ,MAAMK,QAAQ,IACpC8B,YAAY;gBAAE1B,MAAM;gBAAY8C,UAAU;oBACzCvB,WAAW;wBAAEvB,MAAM;4BAAE;4BAAY;yBAAe;wBAAEK;oBAAM;iBACxD;YAAA;QAEH;QAEAxC,GAAG,iCAAiC;YACnC,MAAMwC,QAAQ,IAAIO,MAAM;YACxB,MAAMrB,QAAQhB,aAAa,YAAY;gBACtCP,aAAa;oBACZ,MAAMqC;gBACP;gBACA7B,OAAO,UAAU,WAAa;gBAC9BA,OAAO,UAAU,WAAa;YAC/B;YAEAb,OAAOgC,SAAS,CAAC,MAAMJ,MAAMK,QAAQ,IACpC8B,YAAY;gBAAE1B,MAAM;gBAAY8C,UAAU;oBACzC1B,WAAW;wBAAEpB,MAAM;4BAAE;4BAAY;yBAAU;oBAAA;oBAC3CoB,WAAW;wBAAEpB,MAAM;4BAAE;4BAAY;yBAAU;oBAAA;oBAC3CuB,WAAW;wBAAEvB,MAAM;4BAAE;4BAAY;yBAAc;wBAAEK;oBAAM;iBACvD;YAAA;QAEH;QAEAxC,GAAG,mCAAmC;YACrC,MAAMwC,QAAQ,IAAIO,MAAM;YACxB,MAAMrB,QAAQhB,aAAa;gBAC1BD,eAAe;oBACd,MAAM+B;gBACP;gBACA7B,OAAO,UAAU,WAAa;gBAC9BA,OAAO,UAAU,WAAa;YAC/B;YAEAb,OAAOgC,SAAS,CAAC,MAAMJ,MAAMK,QAAQ,IACpChB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWwB,IAAI,CAAC,UAAUC;gBAC1BzB,WAAWwB,IAAI,CAAC,UAAUC;aAC1B;QAEH;QAEAxC,GAAG,qDAAqD;YACvD,IAAI4C,UAAU;YACd,MAAMlB,QAAQhB,aAAa,YAAY;gBACtCD,eAAe;oBACd,MAAM,IAAIsC;gBACX;gBACApC,OAAO,WAAW;oBACjBiC,UAAU;gBACX;YACD;YAEA,MAAMlB,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAACU,SAAS;QACvB;QAEA5C,GAAG,kCAAkC;YACpC,MAAMwC,QAAQ,IAAIO,MAAM;YACxB,MAAMrB,QAAQhB,aAAa;gBAC1BL,cAAc;oBACb,MAAMmC;gBACP;gBACA7B,OAAO,UAAU,KAAO;gBACxBA,OAAO,UAAU,KAAO;YACzB;YAEAb,OAAOgC,SAAS,CAAC,MAAMJ,MAAMK,QAAQ,IACpChB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWwB,IAAI,CAAC,UAAUC;gBAC1BzB,WAAWwB,IAAI,CAAC,UAAUC;aAC1B;QAEH;QAEAxC,GAAG,oDAAoD;YACtD,IAAIkF,eAAe;YACnB,MAAMxD,QAAQhB,aAAa,YAAY;gBACtCL,cAAc;oBACb6E,eAAe;gBAChB;gBACAvE,OAAO,WAAW;oBACjB,MAAM,IAAIoC;gBACX;YACD;YAEA,MAAMrB,MAAMK,QAAQ;YACpBjC,OAAOoC,KAAK,CAACgD,cAAc;QAC5B;QAEAlF,GAAG,6EAA6E;YAC/E,MAAMmF,iBAAiB,IAAIpC,MAAM;YACjC,MAAMqC,YAAY,IAAIrC,MAAM;YAE5B,MAAMrB,QAAQhB,aAAa;gBAC1BL,cAAc;oBACb,MAAM8E;gBACP;gBACAxE,OAAO,WAAW;oBACjB,MAAMyE;gBACP;YACD;YAEAtF,OAAOgC,SAAS,CAAC,MAAMJ,MAAMK,QAAQ,IACpChB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWwB,IAAI,CAAC,WAAW6C;aAC3B;QAEH;QAEApF,GAAG,wCAAwC;YAC1CF,OAAO0C,KAAK,CACX,IAAMjC,cAAc,KAAO,IAC3B;YAEDT,OAAO0C,KAAK,CACX,IAAM/B,eAAe,KAAO,IAC5B;YAEDX,OAAO0C,KAAK,CACX,IAAMrC,aAAa,KAAO,IAC1B;YAEDL,OAAO0C,KAAK,CACX,IAAMnC,cAAc,KAAO,IAC3B;QAEF;IAED;IAGAN,SAAS,YAAY;QAEpBC,GAAG,+DAA+D;YACjE,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YAEzC,IAAIoC,aAAa;YACjB,IAAIC,YAAY;YAChB,MAAM5D,QAAQhB,aAAa;gBAC1BD,eAAe;oBACd4E,aAAarC,MAAMuC,GAAG;gBACvB;gBACAlF,cAAc;oBACbiF,YAAYtC,MAAMuC,GAAG;gBACtB;gBACA5E,OAAO,WAAW;oBACjB,MAAMqC,MAAMG,SAAS,CAAC3B,kBAAkB;gBACzC;YACD;YAEA,MAAM6B,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAW6C,OAAO,CAAC,WAAWpC;aAC9B,GACD;YAED1B,OAAOoC,KAAK,CAACmD,YAAY,GAAG;YAC5BvF,OAAOoC,KAAK,CAACoD,WAAW9D,iBAAiB;QAC1C;QAEAxB,GAAG,oEAAoE;YACtE,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YAEzC,IAAIuC,SAAS;YACb,IAAIF,YAAY;YAChB,MAAM5D,QAAQhB,aAAa,YAAY;gBACtCH,cAAc;oBACb,MAAMyC,MAAMG,SAAS,CAAC3B,kBAAkB;gBACzC;gBACArB,aAAa;oBACZmF,YAAYtC,MAAMuC,GAAG;gBACtB;gBACA5E,OAAO,WAAW;oBACjB6E,SAASxC,MAAMuC,GAAG;gBACnB;YACD;YAEA,MAAMlC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,YAAY;gBAC5BX,WAAW6C,OAAO,CAAC;oBAAE;oBAAY;iBAAe,EAAEpC;aAClD,GACD;YAED1B,OAAOoC,KAAK,CAACsD,QAAQ,MAAM;YAC3B1F,OAAOoC,KAAK,CAACoD,WAAW,MAAM;QAC/B;QAEAtF,GAAG,mEAAmE;YACrE,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YAEzC,IAAIoC,aAAa;YACjB,IAAIG,SAAS;YACb,MAAM9D,QAAQhB,aAAa;gBAC1BH,cAAc;oBACb8E,aAAarC,MAAMuC,GAAG;gBACvB;gBACApF,aAAa;oBACZ,MAAM6C,MAAMG,SAAS,CAAC3B,kBAAkB;gBACzC;gBACAb,OAAO,UAAU;oBAChB6E,SAASxC,MAAMuC,GAAG;gBACnB;gBACA5E,OAAO,UAAU,KAAO;YACzB;YAEA,MAAM0C,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWc,IAAI,CAAC;gBAChBd,WAAWc,IAAI,CAAC;gBAChBd,WAAW6C,OAAO,CAAC,cAAcpC;aACjC,GACD;YAED1B,OAAOoC,KAAK,CAACmD,YAAY,GAAG;YAC5BvF,OAAOoC,KAAK,CAACsD,QAAQ,GAAG;QACzB;QAEAxF,GAAG,qEAAqE;YACvE,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YAEzC,IAAIuC,SAAS;YACb,IAAIF,YAAY;YAChB,MAAM5D,QAAQhB,aAAa;gBAC1BD,eAAe;oBACd,MAAMuC,MAAMG,SAAS,CAAC3B,kBAAkB;gBACzC;gBACAnB,cAAc;oBACbiF,YAAYtC,MAAMuC,GAAG;gBACtB;gBACA5E,OAAO,WAAW;oBACjB6E,SAASxC,MAAMuC,GAAG;gBACnB;YACD;YAEA,MAAMlC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAW6C,OAAO,CAAC,WAAWpC;aAC9B,GACD;YAED1B,OAAOoC,KAAK,CAACsD,QAAQ,MAAM;YAC3B1F,OAAOoC,KAAK,CAACoD,WAAW,MAAM;QAC/B;QAEAtF,GAAG,oEAAoE;YACtE,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YAEzC,IAAIoC,aAAa;YACjB,IAAIG,SAAS;YACb,MAAM9D,QAAQhB,aAAa;gBAC1BD,eAAe;oBACd4E,aAAarC,MAAMuC,GAAG;gBACvB;gBACAlF,cAAc;oBACb,MAAM2C,MAAMG,SAAS,CAAC3B,kBAAkB;gBACzC;gBACAb,OAAO,WAAW;oBACjB6E,SAASxC,MAAMuC,GAAG;gBACnB;YACD;YAEA,MAAMlC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAW6C,OAAO,CAAC,WAAWpC;aAC9B,GACD;YAED1B,OAAOoC,KAAK,CAACmD,YAAY,GAAG;YAC5BvF,OAAOoC,KAAK,CAACsD,QAAQ,GAAG;QACzB;QAEAxF,GAAG,sCAAsC;YACxC,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YACzC,MAAMwC,oBAAoB;gBACzB,MAAMzC,MAAMG,SAAS,CAAC3B,kBAAkB;YACzC;YAEA,MAAME,QAAQhB,aAAa;gBAC1BH,cAAckF;gBACdlF,cAAckF;gBACdtF,aAAasF;gBACbtF,aAAasF;gBACbhF,eAAegF;gBACfhF,eAAegF;gBACfpF,cAAcoF;gBACdpF,cAAcoF;gBACd9E,OAAO,UAAU8E;gBACjB9E,OAAO,UAAU8E;YAClB;YAEA,MAAMpC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWc,IAAI,CAAC;gBAChBd,WAAWc,IAAI,CAAC;aAChB;QAEH;QAEA7B,GAAG,8CAA8C;YAChD,MAAM0F,cAAclE,kBAAkB;YAEtC,MAAMwB,QAAQ,MAAMnC,MAAMoC,eAAe;YACzC,MAAMvB,QAAQhB,aAAa;gBAC1BC,OAAO,cAAc;oBACpB,MAAMqC,MAAMG,SAAS,CAACuC,cAAc;gBACrC;gBACA/E,OAAO,WAAW;oBACjB,MAAMqC,MAAMG,SAAS,CAACuC,cAAc;gBACrC;YACD;YAEA,MAAMrC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAE6B,SAAS8B;gBAAa1C;YAAM;YACnE,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CACf,MAAMuB,eACNtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWc,IAAI,CAAC;gBAChBd,WAAW6C,OAAO,CAAC,WAAW8B;aAC9B;QAEH;QAEA1F,GAAG,6CAA6C;YAC/C,MAAM0F,cAAclE,kBAAkB;YAEtC,MAAMwB,QAAQ,MAAMnC,MAAMoC,eAAe;YACzC,MAAMwC,oBAAoB;gBACzB,MAAMzC,MAAMG,SAAS,CAACuC,cAAc;YACrC;YAEA,MAAMhE,QAAQhB,aAAa;gBAAEkD,SAAS8B;YAAY,GAAG;gBACpDnF,cAAckF;gBACdtF,aAAasF;gBACbhF,eAAegF;gBACfpF,cAAcoF;gBACd/E,aAAa;oBACZC,OAAO,WAAW8E;gBACnB;YACD;YAEA,MAAMpC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWW,KAAK,CAAC,EAAE,EAAE;oBACpBX,WAAWc,IAAI,CAAC;iBAChB;aACD;QAEH;QAEA7B,GAAG,2DAA2D;YAC7D,MAAM0F,cAAclE,kBAAkB;YAEtC,MAAMwB,QAAQ,MAAMnC,MAAMoC,eAAe;YACzC,MAAMvB,QAAQhB,aAAa;gBAAEkD,SAAS8B,cAAc;YAAE,GAAG;gBACxDhF,aAAa,YAAY;oBAAEkD,SAAS8B;gBAAY,GAAG;oBAClD/E,OAAO,WAAW;wBACjB,MAAMqC,MAAMG,SAAS,CAACuC,cAAc;oBACrC;gBACD;YACD;YAEA,MAAMrC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWW,KAAK,CAAC,YAAY;oBAC5BX,WAAWc,IAAI,CAAC;wBAAE;wBAAY;qBAAW;iBACzC;aACD;QAEH;QAEA7B,GAAG,4CAA4C;YAC9C,MAAM0F,cAAclE,kBAAkB;YAEtC,MAAMwB,QAAQ,MAAMnC,MAAMoC,eAAe;YACzC,MAAMvB,QAAQhB,aAAa;gBAC1BC,OAAO,WAAW;oBAAEiD,SAAS8B;gBAAY,GAAG;oBAC3C,MAAM1C,MAAMG,SAAS,CAACuC,cAAc;gBACrC;YACD;YAEA,MAAMrC,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWc,IAAI,CAAC;aAChB;QAEH;QAEA7B,GAAG,6DAA6D;YAC/D,MAAM0F,cAAclE,kBAAkB;YAEtC,MAAMwB,QAAQ,MAAMnC,MAAMoC,eAAe;YACzC,MAAMwC,oBAAoB;gBACzB,MAAMzC,MAAMG,SAAS,CAACuC,cAAc;YACrC;YAEA,MAAMhE,QAAQhB,aAAa;gBAC1BH,cAAc;oBAAEqD,SAAS8B;gBAAY,GAAGD;gBACxClF,cAAc;oBAAEqD,SAAS8B;gBAAY,GAAGD;gBACxCtF,aAAa;oBAAEyD,SAAS8B;gBAAY,GAAGD;gBACvCtF,aAAa;oBAAEyD,SAAS8B;gBAAY,GAAGD;gBACvChF,eAAe;oBAAEmD,SAAS8B;gBAAY,GAAGD;gBACzChF,eAAe;oBAAEmD,SAAS8B;gBAAY,GAAGD;gBACzCpF,cAAc;oBAAEuD,SAAS8B;gBAAY,GAAGD;gBACxCpF,cAAc;oBAAEuD,SAAS8B;gBAAY,GAAGD;gBACxC9E,OAAO,WAAW,KAAO;YAC1B;YAEA,MAAM0C,gBAAgB3B,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7C,MAAMA,MAAMM,0BAA0B;YAEtCxD,OAAOgC,SAAS,CAAC,MAAMuB,eACtBtC,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWc,IAAI,CAAC;aAChB;QAEH;IACD;IAGA9B,SAAS,SAAS;QAEjBC,GAAG,+CAA+C;YACjD,MAAM0B,QAAQhB,aAAa;gBAC1BC,OAAO;YACR;YAEA,MAAMqB,SAAS,AAAC,CAAA,MAAMN,MAAMK,QAAQ,EAAC,EAAGE,QAAQ,EAAE,CAAC,EAAE;YAErDnC,OAAOgC,SAAS,CAACE,QAAQwB,WAAW;gBAAErB,MAAM;gBAAWsB,MAAM3C,SAASoC,IAAI;YAAC,IAAI;QAChF;QAEAlD,GAAG,2CAA2C;YAC7C,IAAI4C,UAAU;YACd,MAAMlB,QAAQhB,aAAa;gBAC1BC,OAAOuC,IAAI,CAAC,WAAW;oBACtBN,UAAU;gBACX;YACD;YAEA,MAAMZ,SAAS,AAAC,CAAA,MAAMN,MAAMK,QAAQ,EAAC,EAAGE,QAAQ,EAAE,CAAC,EAAE;YACrDnC,OAAOoC,KAAK,CAACU,SAAS,OAAO;YAC7B9C,OAAOgC,SAAS,CAACE,QAAQwB,WAAW;gBAAErB,MAAM;gBAAWsB,MAAM3C,SAASoC,IAAI;YAAC;YAC3EpD,OAAOoC,KAAK,CAACF,OAAOyB,IAAI,EAAE3C,SAASoC,IAAI,EAAE;QAC1C;QAEAlD,GAAG,sCAAsC;YACxC,MAAM0B,QAAQ,MAAMhB,aAAa,YAAYqB,QAAQ;YACrD,MAAMwC,SAAS,MAAM7D,eAAeqB,QAAQ;YAE5CjC,OAAOgC,SAAS,CAACJ,OAAOmC,YAAY;gBAAE1B,MAAM;gBAAYsB,MAAM3C,SAASoC,IAAI;YAAC;YAC5EpD,OAAOgC,SAAS,CAACyC,QAAQV,YAAY;gBAAE1B,MAAM,EAAE;gBAAEsB,MAAM3C,SAASoC,IAAI;YAAC;QACtE;QAEAlD,GAAG,gEAAgE;YAClE,MAAM0B,QAAQhB,aAAawC,IAAI,CAAC;gBAC/BvC,OAAO,UAAU,KAAO;gBACxBA,OAAO,UAAU,KAAO;gBACxBD,aAAa;oBACZC,OAAO,UAAU,KAAO;gBACzB;YACD;YAEA,MAAMqB,SAAS,MAAMN,MAAMK,QAAQ;YACnCjC,OAAOgC,SAAS,CAACE,QAChB6B,YAAY;gBAAEJ,MAAM3C,SAASoC,IAAI;gBAAE+B,UAAU;oBAC5ClE,WAAWmC,IAAI,CAAC;oBAChBnC,WAAWmC,IAAI,CAAC;oBAChBnC,WAAWW,KAAK,CAAC,EAAE,EAAE;wBACpBX,WAAWmC,IAAI,CAAC;qBAChB;iBACD;YAAA;QAEH;QAEAlD,GAAG,+EAA+E;YACjF,MAAM0B,QAAQhB,aAAawC,IAAI,CAAC;gBAC/BvC,OAAO,QAAQ,KAAO;gBACtBD,aAAa,SAAS,KAAO;YAC9B;YAEA,MAAMsB,SAAS,MAAMN,MAAMK,QAAQ;YACnCjC,OAAOgC,SAAS,CAACE,QAChB6B,YAAY;gBAAEJ,MAAM3C,SAASoC,IAAI;gBAAE+B,UAAU;oBAC5CzB,WAAW;wBAAErB,MAAM;wBAAQsB,MAAM3C,SAAS6E,IAAI;oBAAC;oBAC/C9B,YAAY;wBAAE1B,MAAM;wBAASsB,MAAM3C,SAAS6E,IAAI;oBAAC;iBACjD;YAAA;QAEH;QAEA3F,GAAG,mEAAmE;YACrE,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC;YAEhC,MAAMtC,SAAS,MAAMN,MAAMK,QAAQ;YACnCjC,OAAOgC,SAAS,CAACE,QAChB6B,YAAY;gBAAE1B,MAAM;gBAAYsB,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC9DvB,WAAW;wBAAEvB,MAAM;wBAAYK,OAAO;oBAAmD;iBACzF;YAAA;QAEH;QAEAxC,GAAG,kEAAkE;YACpE,MAAM0B,QAAQhB,aAAa,YAAY;gBACtCC,OAAO2D,IAAI,CAAC;YACb;YAEA,MAAMtC,SAAS,MAAMN,MAAMK,QAAQ;YACnCjC,OAAOgC,SAAS,CAACE,QAChB6B,YAAY;gBAAE1B,MAAM;gBAAY8C,UAAU;oBACzCvB,WAAW;wBACVvB,MAAM;4BAAE;4BAAY;yBAAW;wBAC/BK,OAAO;wBACPiB,MAAM3C,SAASwD,IAAI;oBACpB;iBACA;YAAA;QAEH;IAED;IAGAvE,SAAS,SAAS;QAEjBC,GAAG,2DAA2D;YAC7D,MAAM0B,QAAQhB,aAAa;gBAC1BC,OAAO2D,IAAI,CAAC,SAAS,KAAO;gBAC5B3D,OAAO,aAAa,KAAO;YAC5B;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEoB,UAAU;oBACvB1B,WAAW;wBAAEpB,MAAM;wBAASsB,MAAM3C,SAASwD,IAAI;oBAAC;oBAChDd,WAAW;wBAAErB,MAAM;oBAAY;iBAC/B;YAAA;QAEH;QAEAnC,GAAG,iCAAiC;YACnC,MAAMgD,QAAQ,MAAMnC,MAAMoC,eAAe;YAEzC,MAAMvB,QAAQhB,aAAa;gBAC1BC,OAAO2D,IAAI,CAAC,QAAQ,KAAO;gBAC3B3D,OAAO2D,IAAI,CAAC,QAAQ;oBAAQ,MAAM,IAAIvB,MAAM;gBAAa;gBACzDpC,OAAO2D,IAAI,CAAC,WAAW;oBAAc,MAAMtB,MAAMG,SAAS,CAAC3B,kBAAkB;gBAAI;YAClF;YAEA,MAAMoE,gBAAgBlE,MAAMK,QAAQ,CAAC;gBAAEiB;YAAM;YAC7CA,MAAMM,0BAA0B;YAEhCxD,OAAOoC,KAAK,CAAC,MAAM0D,eAClB/B,YAAY;gBAAEoB,UAAU;oBACvB1B,WAAW;wBAAEpB,MAAM;wBAAQsB,MAAM3C,SAASwD,IAAI;oBAAC;oBAC/CZ,WAAW;wBAAEvB,MAAM;wBAAQK,OAAO,IAAIO,MAAM;wBAAaU,MAAM3C,SAASwD,IAAI;oBAAC;oBAC7EX,cAAc;wBAAExB,MAAM;wBAAWyB,SAASpC;wBAAiBiC,MAAM3C,SAASwD,IAAI;oBAAC;iBAC/E;YAAA;QAEH;QAEAtE,GAAG,iFAAiF;YACnF,MAAM0B,QAAQhB,aAAa;gBAC1BA,aAAa,aAAa;oBACzBC,OAAO,SAAS,KAAO;oBACvBA,OAAO,SAAS,KAAO;gBACxB;gBACAD,aAAa4D,IAAI,CAAC,SAAS;oBAC1B3D,OAAO,SAAS,KAAO;oBACvBA,OAAO,SAAS,KAAO;gBACxB;YACD;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChChB,WAAWW,KAAK,CAAC,EAAE,EAAE;gBACpBX,WAAWW,KAAK,CAAC,aAAa;oBAC7BX,WAAWmC,IAAI,CAAC;wBAAE;wBAAa;qBAAS;oBACxCnC,WAAWmC,IAAI,CAAC;wBAAE;wBAAa;qBAAS;iBACxC;gBACDW,YAAY;oBAAE1B,MAAM;oBAASsB,MAAM3C,SAASwD,IAAI;oBAAEW,UAAU;wBAC3DlE,WAAWc,IAAI,CAAC;4BAAE;4BAAS;yBAAS;wBACpCd,WAAWc,IAAI,CAAC;4BAAE;4BAAS;yBAAS;qBACpC;gBAAA;aACD;QAEH;QAEA7B,GAAG,wFAAwF;YAC1F,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC;gBAC/B5D,aAAa;oBACZC,OAAO,QAAQ,KAAO;gBACvB;YACD;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC5ClE,WAAWW,KAAK,CAAC,EAAE,EAAE;wBACpBX,WAAWc,IAAI,CAAC;qBAChB;iBACD;YAAA;QAEH;QAEA7B,GAAG,kFAAkF;YACpF,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC;gBAC/B3D,OAAO,YAAY,KAAO;gBAC1BA,OAAO2D,IAAI,CAAC,QAAQ,KAAO;YAC5B;YAEAxE,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC5CzB,WAAW;wBAAErB,MAAM;oBAAW;oBAC9BoB,WAAW;wBAAEpB,MAAM;wBAAQsB,MAAM3C,SAASwD,IAAI;oBAAC;iBAC/C;YAAA;QAEH;QAEAtE,GAAG,uFAAuF;YACzF,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC;gBAC/B5D,aAAa;oBACZC,OAAO,YAAY,KAAO;oBAC1BA,OAAO2D,IAAI,CAAC,QAAQ,KAAO;gBAC5B;YACD;YAEAxE,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC5CpB,YAAY;wBAAEoB,UAAU;4BACvBzB,WAAW;gCAAErB,MAAM;4BAAW;4BAC9BoB,WAAW;gCAAEpB,MAAM;gCAAQsB,MAAM3C,SAASwD,IAAI;4BAAC;yBAC/C;oBAAA;iBACD;YAAA;QAEH;QAEAtE,GAAG,uFAAuF;YACzF,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC;gBAC/B5D,aAAa,YAAY;oBACxBC,OAAO,SAAS,KAAO;gBACxB;gBACAD,aAAa4D,IAAI,CAAC,QAAQ;oBACzB3D,OAAO,SAAS,KAAO;gBACxB;YACD;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC5ClE,WAAWW,KAAK,CAAC,YAAY;wBAC5BX,WAAWmC,IAAI,CAAC;4BAAE;4BAAY;yBAAS;qBACvC;oBACDW,YAAY;wBAAE1B,MAAM;wBAAQsB,MAAM3C,SAASwD,IAAI;wBAAEW,UAAU;4BAC1DlE,WAAWc,IAAI,CAAC;gCAAE;gCAAQ;6BAAS;yBACnC;oBAAA;iBACD;YAAA;QAEH;QAEA7B,GAAG,0EAA0E;YAC5E,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC;gBAC/B5D,aAAa;oBACZC,OAAOuC,IAAI,CAAC,SAAS,KAAO;oBAC5BvC,OAAO,SAAS,KAAO;gBACxB;YACD;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC5CpB,YAAY;wBAAEoB,UAAU;4BACvBzB,WAAW;gCAAErB,MAAM;gCAASsB,MAAM3C,SAASoC,IAAI;4BAAC;4BAChDnC,WAAWc,IAAI,CAAC;yBAChB;oBAAA;iBACD;YAAA;QAEH;QAEA7B,GAAG,yEAAyE;YAC3E,MAAM0B,QAAQhB,aAAawC,IAAI,CAAC;gBAC/BxC,aAAa;oBACZC,OAAO2D,IAAI,CAAC,SAAS,KAAO;oBAC5B3D,OAAO,SAAS,KAAO;gBACxB;YACD;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASoC,IAAI;gBAAE+B,UAAU;oBAC5CpB,YAAY;wBAAEoB,UAAU;4BACvB1B,WAAW;gCAAEpB,MAAM;gCAASsB,MAAM3C,SAASwD,IAAI;4BAAC;4BAChDd,WAAW;gCAAErB,MAAM;4BAAQ;yBAC3B;oBAAA;iBACD;YAAA;QAEH;QAEAnC,GAAG,mFAAmF;YACrF,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC;gBAC/B5D,aAAawC,IAAI,CAAC;oBACjBvC,OAAO,SAAS,KAAO;oBACvBA,OAAO,SAAS,KAAO;gBACxB;YACD;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC5CpB,YAAY;wBAAEJ,MAAM3C,SAASoC,IAAI;wBAAE+B,UAAU;4BAC5ClE,WAAWmC,IAAI,CAAC;4BAChBnC,WAAWmC,IAAI,CAAC;yBAChB;oBAAA;iBACD;YAAA;QAEH;QAEAlD,GAAG,kFAAkF;YACpF,MAAM0B,QAAQhB,aAAawC,IAAI,CAAC;gBAC/BxC,aAAa4D,IAAI,CAAC;oBACjB3D,OAAO,SAAS,KAAO;oBACvBA,OAAO,SAAS,KAAO;gBACxB;YACD;YAEAb,OAAOoC,KAAK,CAAC,MAAMR,MAAMK,QAAQ,IAChC8B,YAAY;gBAAEJ,MAAM3C,SAASoC,IAAI;gBAAE+B,UAAU;oBAC5CpB,YAAY;wBAAEJ,MAAM3C,SAASwD,IAAI;wBAAEW,UAAU;4BAC5ClE,WAAWc,IAAI,CAAC;4BAChBd,WAAWc,IAAI,CAAC;yBAChB;oBAAA;iBACD;YAAA;QAEH;QAEA7B,GAAG,8CAA8C;YAChD,MAAM0B,QAAQhB,aAAa4D,IAAI,CAAC,YAAY;gBAC3C/D,cAAc;oBAAQ,MAAM,IAAIwC,MAAM;gBAAa;gBACnDpC,OAAO;YACR;YAEA,MAAMqB,SAAS,MAAMN,MAAMK,QAAQ;YACnCjC,OAAOgC,SAAS,CAACE,QAChB6B,YAAY;gBAAE1B,MAAM;gBAAYsB,MAAM3C,SAASwD,IAAI;gBAAEW,UAAU;oBAC9DvB,WAAW;wBACVvB,MAAM;4BAAE;4BAAY;yBAAe;wBACnCK,OAAO,IAAIO,MAAM;oBAClB;iBACA;YAAA;QAEH;IAED;IAGAhD,SAAS,gBAAgB;QAExBC,GAAG,4CAA4C;YAC9C,MAAM0B,QAAQhB,aAAa;gBAC1BC,OAAO,WAAW,KAAO;YAC1B;YAEA,IAAIkF;YACJ,SAASC,SAAS9D,MAAkB;gBACnC6D,aAAa7D;YACd;YAEA,MAAMN,MAAMK,QAAQ,CAAC;gBAAE+D;YAAS;YAChChG,OAAOgC,SAAS,CAAC+D,YAAY9E,WAAWc,IAAI,CAAC;QAC9C;QAEA7B,GAAG,qDAAqD;YACvD,MAAM0B,QAAQ,MAAMd,UAAUe,gBAAgB,CAAC;gBAAE;aAAuB;YAExE,IAAIkE;YACJ,SAASC,SAAS9D,MAAsB;gBACvC6D,aAAa7D;YACd;YAEA,MAAMN,MAAMK,QAAQ,CAAC;gBAAE+D;YAAS;YAChChG,OAAOoC,KAAK,CAAC2D,WAAY1D,IAAI,EAAE;gBAAE;aAA0C;QAC5E;QAEAnC,GAAG,8DAA8D;YAChE,MAAM0B,QAAQ,MAAMd,UAAUe,gBAAgB,CAAC;gBAAE;aAA0B;YAE3E,IAAIkE;YAEJ,SAASC,SAAS9D,MAAsB;gBACvC6D,aAAa7D;YACd;YAEA,MAAMN,MAAMK,QAAQ,CAAC;gBAAE+D;YAAS;YAChChG,OAAOoC,KAAK,CAAC2D,WAAY1D,IAAI,EAAE;gBAAE;aAA6C;QAC/E;IAED;AAED,GAAG;AAGH,eAAe6B,aAAa+B,QAAgB,EAAEC,MAAkB;IAC/D,MAAMtE,QAAQhB,aAAa;QAC1BC,OAAOoF,UAAUC;IAClB;IACA,MAAMhE,SAAS,MAAMN,MAAMK,QAAQ;IACnC,OAAOC,OAAOiD,QAAQ,CAAC,EAAE;AAC1B;AAEA,SAASpB,YAAY,EACpB1B,OAAO,EAAE,EACT8C,WAAW,EAAE,EACb5C,WAAW4D,SAAS,EACpBxC,OAAOwC,SAAS,EAMhB,GAAG,CAAC,CAAC;IACL,OAAOlF,WAAWW,KAAK,CAACS,MAAM8C,UAAU5C,UAAUoB;AACnD;AAEA,SAASF,WAAW,EACnBpB,OAAO,iBAAiB,EACxBE,WAAW4D,SAAS,EACpBxC,OAAOwC,SAAS,EAKhB,GAAG,CAAC,CAAC;IACL,OAAOlF,WAAWc,IAAI,CAACM,MAAME,UAAUoB;AACxC;AAEA,SAASC,WAAW,EACnBvB,OAAO,iBAAiB,EACxBK,QAAQ,IAAIO,MAAM,mBAAmB,EACrCV,WAAW4D,SAAS,EACpBxC,OAAOwC,SAAS,EAMhB,GAAG,CAAC,CAAC;IACL,OAAOlF,WAAWwB,IAAI,CAACJ,MAAMK,OAAOH,UAAUoB;AAC/C;AAEA,SAASD,WAAW,EACnBrB,OAAO,iBAAiB,EACxBE,WAAW4D,SAAS,EACpBxC,OAAOwC,SAAS,EAKhB,GAAG,CAAC,CAAC;IACL,OAAOlF,WAAWmC,IAAI,CAACf,MAAME,UAAUoB;AACxC;AAEA,SAASE,cAAc,EACtBxB,OAAO,iBAAiB,EACxByB,UAAU,EAAE,EACZvB,WAAW4D,SAAS,EACpBxC,OAAOwC,SAAS,EAMhB,GAAG,CAAC,CAAC;IACL,OAAOlF,WAAW6C,OAAO,CAACzB,MAAMyB,SAASvB,UAAUoB;AACpD"}