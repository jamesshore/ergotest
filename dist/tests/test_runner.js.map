{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_runner.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport { NotifyFn, TestConfig, TestOptions, TestSuite } from \"./test_suite.js\";\nimport {\n\tSerializedTestCaseResult,\n\tSerializedTestSuiteResult,\n\tTestCaseResult,\n\tTestResult,\n\tTestSuiteResult,\n} from \"./test_result.js\";\nimport child_process, { ChildProcess } from \"node:child_process\";\nimport path from \"node:path\";\nimport { Clock } from \"../infrastructure/clock.js\";\n// dependency: ./test_runner_child_process.js\n\nconst WORKER_FILENAME = path.resolve(import.meta.dirname, \"./test_runner_child_process.js\");\nconst KEEPALIVE_TIMEOUT_IN_MS = TestSuite.DEFAULT_TIMEOUT_IN_MS;\n\n/** For internal use only. */\nexport interface WorkerInput {\n\tmodulePaths: string[],\n\tconfig?: Record<string, unknown>\n}\n\n/** For internal use only. */\nexport type WorkerOutput = {\n\ttype: \"keepalive\"\n} | {\n\ttype: \"progress\",\n\tresult: SerializedTestCaseResult,\n} | {\n\ttype: \"complete\",\n\tresult: SerializedTestSuiteResult,\n}\n\n/**\n * Loads and runs tests in an isolated process.\n */\nexport class TestRunner {\n\n\t/**\n\t * Factory method. Creates the test runner.\n\t * @returns {TestRunner} The test runner.\n\t */\n\tstatic create() {\n\t\treturn new TestRunner(Clock.create());\n\t}\n\n\tprivate readonly _clock: Clock;\n\n\t/** Only for use by TestRunner's tests. (Use a factory method instead.) */\n\tconstructor(clock: Clock) {\n\t\tthis._clock = clock;\n\t}\n\n\t/**\n\t * Load and run a set of test modules in the current process. Note that, because Node.js caches modules, this means\n\t * that you can't make changes to your tests. Future test runs won't see your changes because the previous modules\n\t * will have been cached.\n\t *\n\t * @param {string[]} modulePaths The test files to load and run.\n\t * @param {object} [config] Configuration data to provide to the tests as they run.\n\t * @param {(result: TestResult) => ()} [notifyFn] A function to call each time a test completes. The `result`\n\t *   parameter describes the result of the test—whether it passed, failed, etc.\n\t * @returns {Promise<TestSuiteResult>}\n\t */\n\tasync runInCurrentProcessAsync(modulePaths: string[], options?: TestOptions): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [ Array, [ undefined, {\n\t\t\tconfig: [ undefined, Object ],\n\t\t\tnotifyFn: [ undefined, Function ],\n\t\t}]]);\n\n\t\tconst suite = await TestSuite.fromModulesAsync(modulePaths);\n\t\treturn await suite.runAsync(options);\n\t}\n\n\t/**\n\t * Load and run a set of test modules in an isolated child process.\n\t *\n\t * @param {string[]} modulePaths The test files to load and run.\n\t * @param {object} [config] Configuration data to provide to the tests as they run.\n\t * @param {(result: TestResult) => ()} [notifyFn] A function to call each time a test completes. The `result`\n\t *   parameter describes the result of the test—whether it passed, failed, etc.\n\t * @returns {Promise<TestSuiteResult>}\n\t */\n\tasync runInChildProcessAsync(modulePaths: string[], {\n\t\tconfig,\n\t\tnotifyFn = () => {},\n\t}: TestOptions = {}): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [ Array, [ undefined, {\n\t\t\tconfig: [ undefined, Object ],\n\t\t\tnotifyFn: [ undefined, Function ],\n\t\t}]]);\n\n\t\tconst child = child_process.fork(WORKER_FILENAME);\n\t\tconst result = await runTestsInChildProcessAsync(child, this._clock, modulePaths, config, notifyFn);\n\t\tawait killChildProcess(child);\n\n\t\treturn result;\n\t}\n\n}\n\nasync function runTestsInChildProcessAsync(\n\tchild: ChildProcess,\n\tclock: Clock,\n\tmodulePaths: string[],\n\tconfig: TestConfig | undefined,\n\tnotifyFn: NotifyFn,\n): Promise<TestSuiteResult> {\n\tconst result = await new Promise<TestSuiteResult>((resolve, reject) => {\n\t\tconst workerData = { modulePaths, config };\n\t\tchild.send(workerData);\n\n\t\tchild.on(\"error\", error => reject(error));\n\t\tchild.on(\"close\", code => {\n\t\t\tif (code !== 0) reject(new Error(`Test runner exited with non-zero error code: ${code}`));\n\t\t});\n\n\t\tconst { aliveFn, cancelFn } = detectInfiniteLoops(clock, resolve);\n\t\tchild.on(\"message\", message => handleMessage(message as WorkerOutput, aliveFn, cancelFn, notifyFn, resolve));\n\t});\n\treturn result;\n}\n\nfunction detectInfiniteLoops(clock: Clock, resolve: (result: TestSuiteResult) => void) {\n\tconst { aliveFn, cancelFn } = clock.keepAlive(KEEPALIVE_TIMEOUT_IN_MS, () => {\n\t\tconst errorResult = TestResult.suite([], [\n\t\t\tTestResult.fail(\"Test runner watchdog\", \"Detected infinite loop in tests\"),\n\t\t]);\n\t\tresolve(errorResult);\n\t});\n\treturn { aliveFn, cancelFn };\n}\n\nfunction handleMessage(\n\tmessage: WorkerOutput,\n\taliveFn: () => void,\n\tcancelFn: () => void,\n\tnotifyFn: NotifyFn,\n\tresolve: (result: TestSuiteResult) => void,\n) {\n\tswitch (message.type) {\n\t\tcase \"keepalive\":\n\t\t\taliveFn();\n\t\t\tbreak;\n\t\tcase \"progress\":\n\t\t\tnotifyFn(TestCaseResult.deserialize(message.result));\n\t\t\tbreak;\n\t\tcase \"complete\":\n\t\t\tcancelFn();\n\t\t\tresolve(TestSuiteResult.deserialize(message.result));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// @ts-expect-error - TypeScript thinks this is unreachable, and so do I, but we still check it at runtime\n\t\t\tensure.unreachable(`Unknown message type '${message.type}' from test runner: ${JSON.stringify(message)}`);\n\t}\n}\n\nasync function killChildProcess(child: ChildProcess): Promise<void> {\n\tawait new Promise((resolve, reject) => {\n\t\tchild.kill(\"SIGKILL\");    // specific signal not tested\n\t\tchild.on(\"close\", resolve);\n\t\tchild.on(\"error\", reject);\n\t});\n}\n"],"names":["ensure","TestSuite","TestCaseResult","TestResult","TestSuiteResult","child_process","path","Clock","WORKER_FILENAME","resolve","dirname","KEEPALIVE_TIMEOUT_IN_MS","DEFAULT_TIMEOUT_IN_MS","TestRunner","create","_clock","constructor","clock","runInCurrentProcessAsync","modulePaths","options","signature","arguments","Array","undefined","config","Object","notifyFn","Function","suite","fromModulesAsync","runAsync","runInChildProcessAsync","child","fork","result","runTestsInChildProcessAsync","killChildProcess","Promise","reject","workerData","send","on","error","code","Error","aliveFn","cancelFn","detectInfiniteLoops","message","handleMessage","keepAlive","errorResult","fail","type","deserialize","unreachable","JSON","stringify","kill"],"mappings":"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"}