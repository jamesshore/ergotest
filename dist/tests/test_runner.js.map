{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_runner.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport { TestSuite, TestConfig } from \"./test_suite.js\";\nimport { SerializedTestResult, TestResult } from \"./test_result.js\";\nimport child_process, { ChildProcess } from \"node:child_process\";\nimport path from \"node:path\";\nimport { Clock } from \"../infrastructure/clock.js\";\n// dependency: ./test_runner_child_process.js\n\nconst WORKER_FILENAME = path.resolve(import.meta.dirname, \"./test_runner_child_process.js\");\nconst KEEPALIVE_TIMEOUT_IN_MS = TestSuite.DEFAULT_TIMEOUT_IN_MS;\n\n/** For internal use only. */\nexport interface WorkerInput {\n\tmodulePaths: string[],\n\tconfig?: Record<string, unknown>\n}\n\n/** For internal use only. */\nexport type WorkerOutput = {\n\ttype: \"keepalive\"\n} | {\n\ttype: \"progress\" | \"complete\",\n\tresult: SerializedTestResult,\n}\n\nexport type NotifyFn = (testResult: TestResult) => void;\n\n/**\n * Loads and runs tests in an isolated process.\n */\nexport class TestRunner {\n\n\t/**\n\t * Factory method. Creates the test runner.\n\t * @returns {TestRunner} The test runner.\n\t */\n\tstatic create() {\n\t\treturn new TestRunner(Clock.create());\n\t}\n\n\tprivate readonly _clock: Clock;\n\n\t/** Only for use by TestRunner's tests. (Use a factory method instead.) */\n\tconstructor(clock: Clock) {\n\t\tthis._clock = clock;\n\t}\n\n\t/**\n\t * Load and run a set of test modules in an isolated process.\n\t * @param {string[]} modulePaths The test files to load and run.\n\t * @param {object} [config] Configuration data to provide to the tests as they run.\n\t * @param {(result: TestResult) => ()} [notifyFn] A function to call each time a test completes. The `result`\n\t *   parameter describes the result of the testâ€”whether it passed, failed, etc.\n\t * @returns {Promise<void>}\n\t */\n\tasync runIsolatedAsync(modulePaths: string[], {\n\t\tconfig,\n\t\tnotifyFn = () => {},\n\t}: {\n\t\tconfig?: Record<string, unknown>,\n\t\tnotifyFn?: NotifyFn,\n\t} = {}) {\n\t\tensure.signature(arguments, [ Array, [ undefined, {\n\t\t\tconfig: [ undefined, Object ],\n\t\t\tnotifyFn: [ undefined, Function ],\n\t\t}]]);\n\n\t\tconst child = child_process.fork(WORKER_FILENAME);\n\t\tconst result = await runTestsInChildProcess(child, this._clock, modulePaths, config, notifyFn);\n\t\tawait killChildProcess(child);\n\n\t\treturn result;\n\t}\n\n}\n\nasync function runTestsInChildProcess(\n\tchild: ChildProcess,\n\tclock: Clock,\n\tmodulePaths: string[],\n\tconfig: TestConfig | undefined,\n\tnotifyFn: NotifyFn,\n) {\n\tconst result = await new Promise<TestResult>((resolve, reject) => {\n\t\tconst workerData = { modulePaths, config };\n\t\tchild.send(workerData);\n\n\t\tchild.on(\"error\", error => reject(error));\n\t\tchild.on(\"close\", code => {\n\t\t\tif (code !== 0) reject(new Error(`Test runner exited with non-zero error code: ${code}`));\n\t\t});\n\n\t\tconst { aliveFn, cancelFn } = detectInfiniteLoops(clock, resolve);\n\t\tchild.on(\"message\", message => handleMessage(message as WorkerOutput, aliveFn, cancelFn, notifyFn, resolve));\n\t});\n\treturn result;\n}\n\nfunction detectInfiniteLoops(clock: Clock, resolve: (result: TestResult) => void) {\n\tconst { aliveFn, cancelFn } = clock.keepAlive(KEEPALIVE_TIMEOUT_IN_MS, () => {\n\t\tconst errorResult = TestResult.suite([], [\n\t\t\tTestResult.fail(\"Test runner watchdog\", \"Detected infinite loop in tests\"),\n\t\t]);\n\t\tresolve(errorResult);\n\t});\n\treturn { aliveFn, cancelFn };\n}\n\nfunction handleMessage(\n\tmessage: WorkerOutput,\n\taliveFn: () => void,\n\tcancelFn: () => void,\n\tnotifyFn: NotifyFn,\n\tresolve: (result: TestResult) => void,\n) {\n\tswitch (message.type) {\n\t\tcase \"keepalive\":\n\t\t\taliveFn();\n\t\t\tbreak;\n\t\tcase \"progress\":\n\t\t\tnotifyFn(TestResult.deserialize(message.result));\n\t\t\tbreak;\n\t\tcase \"complete\":\n\t\t\tcancelFn();\n\t\t\tresolve(TestResult.deserialize(message.result));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// @ts-expect-error - TypeScript thinks this is unreachable, and so do I, but we still check it at runtime\n\t\t\tensure.unreachable(`Unknown message type '${message.type}' from test runner: ${JSON.stringify(message)}`);\n\t}\n}\n\nasync function killChildProcess(child: ChildProcess): Promise<void> {\n\tawait new Promise((resolve, reject) => {\n\t\tchild.kill(\"SIGKILL\");    // specific signal not tested\n\t\tchild.on(\"close\", resolve);\n\t\tchild.on(\"error\", reject);\n\t});\n}\n"],"names":["ensure","TestSuite","TestResult","child_process","path","Clock","WORKER_FILENAME","resolve","dirname","KEEPALIVE_TIMEOUT_IN_MS","DEFAULT_TIMEOUT_IN_MS","TestRunner","create","_clock","constructor","clock","runIsolatedAsync","modulePaths","config","notifyFn","signature","arguments","Array","undefined","Object","Function","child","fork","result","runTestsInChildProcess","killChildProcess","Promise","reject","workerData","send","on","error","code","Error","aliveFn","cancelFn","detectInfiniteLoops","message","handleMessage","keepAlive","errorResult","suite","fail","type","deserialize","unreachable","JSON","stringify","kill"],"mappings":"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"}