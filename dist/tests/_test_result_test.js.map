{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_result_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\nimport { assert, describe, it } from \"../tests.js\";\nimport { AssertionError } from \"node:assert\";\nimport { TestCaseResult, TestMark, TestMarkValue, TestResult, TestStatus } from \"./test_result.js\";\nimport { TestRenderer } from \"./test_renderer.js\";\n\nexport default describe(() => {\n\n\tdescribe(\"test suite\", () => {\n\n\t\tit(\"has a name and list of test results\", () => {\n\t\t\tconst list = [ createPass({ name: \"test 1\" }), createPass({ name: \"test 2\" }) ];\n\t\t\tconst result = TestResult.suite([ \"my name\" ], list);\n\n\t\t\tassert.equal(result.name, [ \"my name\" ]);\n\t\t\tassert.equal(result.children, list);\n\t\t});\n\n\t\tit(\"name can include parent suites\", () => {\n\t\t\tconst suite = createSuite({ name: [ \"parent\", \"child\", \"grandchild\" ] });\n\n\t\t\tassert.equal(suite.name, [ \"parent\", \"child\", \"grandchild\" ]);\n\t\t});\n\n\t\tit(\"has optional filename\", () => {\n\t\t\tconst suite = createSuite({ filename: \"/my/filename\" });\n\t\t\tassert.equal(suite.filename, \"/my/filename\");\n\t\t});\n\n\t\tit(\"has a mark\", () => {\n\t\t\tconst notSpecified = createSuite();\n\t\t\tconst none = createSuite({ mark: TestMark.none });\n\t\t\tconst skip = createSuite({ mark: TestMark.skip });\n\t\t\tconst only = createSuite({ mark: TestMark.only });\n\n\t\t\tassert.equal(notSpecified.mark, TestMark.none);\n\t\t\tassert.equal(none.mark, TestMark.none);\n\t\t\tassert.equal(skip.mark, TestMark.skip);\n\t\t\tassert.equal(only.mark, TestMark.only);\n\t\t});\n\n\t\tit(\"can be compared using equals()\", () => {\n\t\t\tassert.dotEquals(createSuite({ name: \"my name\" }), createSuite({ name: \"my name\" }));\n\t\t\tassert.notDotEquals(createSuite({ name: \"my name\" }), createSuite({ name: \"different\" }));\n\n\t\t\tassert.dotEquals(createSuite({ mark: TestMark.skip }), createSuite({ mark: TestMark.skip }));\n\t\t\tassert.notDotEquals(createSuite({ mark: TestMark.skip }), createSuite({ mark: TestMark.only }));\n\n\t\t\tassert.dotEquals(createSuite({ name: [ \"parent\", \"child\" ]}), createSuite({ name: [ \"parent\", \"child\" ]}));\n\t\t\tassert.notDotEquals(createSuite({ name: [ \"parent\", \"child\" ]}), createSuite({ name: [ \"parent\", \"different\" ]}));\n\n\t\t\tassert.dotEquals(\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t);\n\t\t\tassert.notDotEquals(\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"different\" }) ]}),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test suite rendering\", () => {\n\n\t\tit(\"renders marks, errors, and a summary to a nicely-formatted string\", () => {\n\t\t\tconst fail = createFail();\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\tcreateSkip({ mark: TestMark.skip }),\n\t\t\t\tfail,\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t\tcreateSkip({ mark: TestMark.skip })\n\t\t\t\t]) + \"\\n\\n\\n\" +\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tfail,\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders marks and summary without errors\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\tcreateSkip({ mark: TestMark.skip }),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t\tcreateSkip({ mark: TestMark.skip })\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders errors and summary without marks\", () => {\n\t\t\tconst fail = createFail();\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\t\tfail,\n\t\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tfail,\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders summary alone\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"can include average test time in summary\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"\", 100),\n\t\t\t\trenderer.renderSummary(result, 100),\n\t\t\t);\n\t\t});\n\n\t\tit(\"adds optional preamble when result has marks and errors\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\t\"my_preamble\" +\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t]) + \"\\n\\n\\n\" +\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"adds optional preamble when result has marks alone\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\t\"my_preamble\" +\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"adds optional preamble when result has errors alone\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\t\"my_preamble\" +\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't add preamble when result has no marks or errors\", () => {\n\t\t\tconst result = createSuite();\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test case\", () => {\n\n\t\tit(\"passing tests have a name, status, and mark\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tconst noneMark = createPass({ mark: TestMark.none });\n\t\t\tconst skipMark = createPass({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createPass({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.pass, \"status\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"name can include parent suites\", () => {\n\t\t\tconst test = createPass({ name: [ \"parent\", \"child\", \"grandchild\" ] });\n\t\t\tassert.equal(test.name, [ \"parent\", \"child\", \"grandchild\" ]);\n\t\t});\n\n\t\tit(\"has optional filename\", () => {\n\t\t\tconst test = createPass({ filename: \"my_filename\" });\n\t\t\tassert.equal(test.filename, \"my_filename\");\n\t\t});\n\n\t\tit(\"failing tests have a name, status, mark, and error\", () => {\n\t\t\tconst result = createFail({ name: \"my name\", error: new Error(\"my error\") });\n\t\t\tconst noneMark = createFail({ mark: TestMark.none });\n\t\t\tconst skipMark = createFail({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createFail({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.fail, \"status\");\n\t\t\tassert.equal((result.error as Error).message, \"my error\", \"error\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"failing tests can have a string for the error\", () => {\n\t\t\tconst result = createFail({ name: \"irrelevant name\", error: \"my error\" });\n\t\t\tassert.equal(result.error, \"my error\");\n\t\t});\n\n\t\tit(\"skipped tests have a name, status, and mark\", () => {\n\t\t\tconst result = createSkip({ name: \"my name\" });\n\t\t\tconst noneMark = createSkip({ mark: TestMark.none });\n\t\t\tconst skipMark = createSkip({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createSkip({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.skip, \"status\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"timeout tests have name, status, mark, and timeout\", () => {\n\t\t\tconst result = createTimeout({ name: \"my name\", timeout: 999 });\n\t\t\tconst noneMark = createTimeout({ mark: TestMark.none });\n\t\t\tconst skipMark = createTimeout({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createTimeout({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.timeout, \"status\");\n\t\t\tassert.equal(result.timeout, 999);\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"can be compared using equals()\", () => {\n\t\t\tassert.dotEquals(createPass({ name: \"my name\" }), createPass({ name: \"my name\" }));\n\t\t\tassert.dotEquals(createPass({ name: [ \"parent\", \"child\" ] }), createPass({ name: [ \"parent\", \"child\" ] }));\n\n\t\t\t// disregard stack when comparing errors: if name is equal, error is equal\n\t\t\tassert.dotEquals(\n\t\t\t\tcreateFail({ name: \"my name\", error: new Error(\"my error\") }),\n\t\t\t\tcreateFail({ name: \"my name\", error: new Error(\"my error\") }),\n\t\t\t);\n\n\t\t\tassert.notDotEquals(createPass({ name: \"my name\" }), createPass({ name: \"different\" }));\n\t\t\tassert.notDotEquals(createPass({ name: [ \"parent\", \"child\" ] }), createPass({ name: [ \"parent\", \"different\" ] }));\n\t\t\tassert.notDotEquals(createPass({ name: \"my name\" }), createSkip({ name: \"my name\" }));\n\t\t\tassert.notDotEquals(createPass({ name: \"my name\" }), createFail({ name: \"my name\", error: new Error() }));\n\t\t\tassert.notDotEquals(\n\t\t\t\tcreateTimeout({ name: \"my name\", timeout: 1 }),\n\t\t\t\tcreateTimeout({ name: \"my name\", timeout: 2 }),\n\t\t\t);\n\n\t\t\t// marks\n\t\t\tassert.dotEquals(createPass({ mark: TestMark.skip }), createPass({ mark: TestMark.skip }));\n\t\t\tassert.notDotEquals(createPass({ mark: TestMark.skip }), createPass({ mark: TestMark.none }));\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test case rendering\", () => {\n\n\t\tit(\"renders test case as character, single line, or multi-line\", () => {\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tconst result = createPass();\n\n\t\t\tassert.equal(result.renderAsCharacter(), renderer.renderAsCharacters(result));\n\t\t\tassert.equal(result.renderAsSingleLine(), renderer.renderAsSingleLines(result));\n\t\t\tassert.equal(result.renderAsMultipleLines(), renderer.renderAsMultipleLines(result));\n\t\t});\n\n\t});\n\n\n\tdescribe(\"flattening\", () => {\n\n\t\tit(\"flattens all test results into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allTests(), [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t]);\n\t\t});\n\n\t\tit(\"flattens tests with requested statuses into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allMatchingTests(TestStatus.fail), [\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t], \"one status\");\n\n\t\t\tassert.equal(suite.allMatchingTests(TestStatus.fail, TestStatus.timeout), [\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t], \"multiple statuses\");\n\t\t});\n\n\n\t\tit(\"flattens all marked results into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"test 0.1\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreateSuite({ name: \"suite 1.1\", mark: TestMark.none, children: [\n\t\t\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\t\t]}),\n\t\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allMarkedResults(), [\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\t\tcreateSuite({ name: \"suite 1.1\", mark: TestMark.none, children: [\n\t\t\t\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\t\t\t]}),\n\t\t\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t]);\n\t\t});\n\n\t\tit(\"includes parent suite\", () => {\n\t\t\tconst suite = createSuite({ mark: TestMark.skip });\n\n\t\t\tassert.equal(suite.allMarkedResults(), [ createSuite({ mark: TestMark.skip }) ]);\n\t\t});\n\n\t\tit(\"flattens results with requested marks into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"test 0.1\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allMatchingMarks(TestMark.skip), [\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t], \".skip\");\n\n\t\t\tassert.equal(suite.allMatchingMarks(TestMark.only), [\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t], \".only\");\n\t\t});\n\n\t});\n\n\n\tdescribe(\"passing test files\", () => {\n\n\t\tit(\"provides names of files that have all passing tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"file2\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"file2\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames more than once\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of failing tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateFail({ filename: \"my_file2\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of skipped tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateSkip({ filename: \"my_file2\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of timed out tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateTimeout({ filename: \"my_file2\" }),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"[bugfix] does not include filenames of failing tests even when sibling tests pass\", () => {\n\t\t\t// Including filename in every test suite has resulted in tests being marked as 'pass' when they were 'fail'\n\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreateSuite({ filename: \"my_file\", children: [\n\t\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t\t\tcreateFail({ filename: \"my_file\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allPassingFiles(), []);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"summarization\", () => {\n\n\t\tit(\"provides test count\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.count(), {\n\t\t\t\t[TestStatus.pass]: 1,\n\t\t\t\t[TestStatus.fail]: 2,\n\t\t\t\t[TestStatus.skip]: 3,\n\t\t\t\t[TestStatus.timeout]: 4,\n\t\t\t\ttotal: 10,\n\t\t\t});\n\t\t});\n\n\t\tit(\"counts tests in sub-suites\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateFail(),\n\t\t\t\t\tcreateFail(),\n\t\t\t\t\tcreateSkip(),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.count(), {\n\t\t\t\t[TestStatus.pass]: 1,\n\t\t\t\t[TestStatus.fail]: 3,\n\t\t\t\t[TestStatus.skip]: 1,\n\t\t\t\t[TestStatus.timeout]: 0,\n\t\t\t\ttotal: 5,\n\t\t\t});\n\t\t});\n\n\t});\n\n\n\tdescribe(\"serialization and deserialization\", () => {\n\n\t\tit(\"can be serialized and deserialized\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"pass\", mark: TestMark.none }),\n\t\t\t\tcreateSkip({ name: \"skip\", mark: TestMark.skip }),\n\t\t\t\tcreateFail({ name: \"fail\", mark: TestMark.only }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateSuite({ name: \"child\", mark: TestMark.skip, children: [\n\t\t\t\t\tcreatePass({ name: [ \"child\", \"child pass\" ]}),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tconst serialized = suite.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized);\n\n\t\t\tassert.dotEquals(deserialized, suite);\n\t\t});\n\n\t\tit(\"handles string errors\", () => {\n\t\t\tassertErrorWorks(\"my error\");\n\t\t});\n\n\t\tit(\"handles assertion errors\", () => {\n\t\t\tassertErrorWorks(new AssertionError({\n\t\t\t\tmessage: \"my message\",\n\t\t\t\tactual: \"my actual\",\n\t\t\t\texpected: \"my expected\",\n\t\t\t\toperator: \"my operator\",\n\t\t\t}));\n\t\t});\n\n\t\tit(\"handles other errors\", () => {\n\t\t\tassertErrorWorks(new Error(\"my message\"));\n\t\t});\n\n\t\tit(\"propagates custom error fields\", () => {\n\t\t\tassertErrorWorks(createCustomError(\"custom1\", \"custom2\"));\n\t\t});\n\n\t\tfunction assertErrorWorks(error: string | Error) {\n\t\t\tconst test = createFail({ error });\n\t\t\tconst serialized = test.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized) as TestCaseResult;\n\n\t\t\tassert.equal(deserialized.error, error);\n\t\t\tif (error instanceof Error && error.stack !== undefined) {\n\t\t\t\tassert.equal((deserialized.error as Error).stack, error.stack);\n\t\t\t}\n\t\t}\n\n\t\tfunction createCustomError(custom1: unknown, custom2: unknown) {\n\t\t\tinterface CustomError extends Error {\n\t\t\t\tcustom1: unknown,\n\t\t\t\tcustom2: unknown,\n\t\t\t}\n\n\t\t\tconst error = new Error(\"my message\") as CustomError;\n\t\t\terror.custom1 = custom1;\n\t\t\terror.custom2 = custom2;\n\n\t\t\treturn error;\n\t\t}\n\t});\n\n});\n\nfunction createSuite({\n\tname = \"irrelevant name\",\n\tchildren = [],\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tchildren?: TestResult[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.suite(name, children, filename, mark);\n}\n\nfunction createPass({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.pass(name, filename, mark);\n}\n\nfunction createFail({\n\tname = \"irrelevant name\",\n\terror = new Error(\"irrelevant error\"),\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\terror?: string | Error,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.fail(name, error, filename, mark);\n}\n\nfunction createSkip({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.skip(name, filename, mark);\n}\n\nfunction createTimeout({\n\tname = \"irrelevant name\",\n\ttimeout = 42,\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\ttimeout?: number,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.timeout(name, timeout, filename, mark);\n}"],"names":["assert","describe","it","AssertionError","TestMark","TestResult","TestStatus","TestRenderer","list","createPass","name","result","suite","equal","children","createSuite","filename","notSpecified","none","mark","skip","only","dotEquals","notDotEquals","fail","createFail","createSkip","createTimeout","renderer","create","render","renderMarksAsLines","renderAsMultipleLines","renderSummary","noneMark","skipMark","onlyMark","status","pass","test","error","Error","message","timeout","renderAsCharacter","renderAsCharacters","renderAsSingleLine","renderAsSingleLines","allTests","allMatchingTests","allMarkedResults","allMatchingMarks","allPassingFiles","count","total","serialized","serialize","deserialized","deserialize","assertErrorWorks","actual","expected","operator","createCustomError","stack","undefined","custom1","custom2"],"mappings":"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"}