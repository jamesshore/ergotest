{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_result_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport { assert, test } from \"../tests.js\";\nimport { AssertionError } from \"node:assert\";\nimport { TestCaseResult, TestMark, TestMarkValue, TestResult, TestStatus } from \"./test_result.js\";\nimport { TestRenderer } from \"./test_renderer.js\";\n\nexport default test(({ describe }) => {\n\n\tdescribe(\"test suite\", ({ it }) => {\n\n\t\tit(\"has a name and list of test results\", () => {\n\t\t\tconst list = [ createPass({ name: \"test 1\" }), createPass({ name: \"test 2\" }) ];\n\t\t\tconst result = TestResult.suite([ \"my name\" ], list);\n\n\t\t\tassert.equal(result.name, [ \"my name\" ]);\n\t\t\tassert.equal(result.children, list);\n\t\t});\n\n\t\tit(\"name can include parent suites\", () => {\n\t\t\tconst suite = createSuite({ name: [ \"parent\", \"child\", \"grandchild\" ] });\n\n\t\t\tassert.equal(suite.name, [ \"parent\", \"child\", \"grandchild\" ]);\n\t\t});\n\n\t\tit(\"has optional filename\", () => {\n\t\t\tconst suite = createSuite({ filename: \"/my/filename\" });\n\t\t\tassert.equal(suite.filename, \"/my/filename\");\n\t\t});\n\n\t\tit(\"has a mark\", () => {\n\t\t\tconst notSpecified = createSuite();\n\t\t\tconst none = createSuite({ mark: TestMark.none });\n\t\t\tconst skip = createSuite({ mark: TestMark.skip });\n\t\t\tconst only = createSuite({ mark: TestMark.only });\n\n\t\t\tassert.equal(notSpecified.mark, TestMark.none);\n\t\t\tassert.equal(none.mark, TestMark.none);\n\t\t\tassert.equal(skip.mark, TestMark.skip);\n\t\t\tassert.equal(only.mark, TestMark.only);\n\t\t});\n\n\t\tit(\"can be compared using equals()\", () => {\n\t\t\tassert.dotEquals(createSuite({ name: \"my name\" }), createSuite({ name: \"my name\" }));\n\t\t\tassert.notDotEquals(createSuite({ name: \"my name\" }), createSuite({ name: \"different\" }));\n\n\t\t\tassert.dotEquals(createSuite({ mark: TestMark.skip }), createSuite({ mark: TestMark.skip }));\n\t\t\tassert.notDotEquals(createSuite({ mark: TestMark.skip }), createSuite({ mark: TestMark.only }));\n\n\t\t\tassert.dotEquals(createSuite({ name: [ \"parent\", \"child\" ]}), createSuite({ name: [ \"parent\", \"child\" ]}));\n\t\t\tassert.notDotEquals(createSuite({ name: [ \"parent\", \"child\" ]}), createSuite({ name: [ \"parent\", \"different\" ]}));\n\n\t\t\tassert.dotEquals(\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t);\n\t\t\tassert.notDotEquals(\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"different\" }) ]}),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test suite rendering\", ({ it }) => {\n\n\t\tit(\"renders marks, errors, and a summary to a nicely-formatted string\", () => {\n\t\t\tconst fail = createFail();\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\tcreateSkip({ mark: TestMark.skip }),\n\t\t\t\tfail,\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t\tcreateSkip({ mark: TestMark.skip })\n\t\t\t\t]) + \"\\n\\n\\n\" +\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tfail,\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders marks and summary without errors\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\tcreateSkip({ mark: TestMark.skip }),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t\tcreateSkip({ mark: TestMark.skip })\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders errors and summary without marks\", () => {\n\t\t\tconst fail = createFail();\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\t\tfail,\n\t\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tfail,\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"renders summary alone\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(),\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"can include average test time in summary\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"\", 100),\n\t\t\t\trenderer.renderSummary(result, 100),\n\t\t\t);\n\t\t});\n\n\t\tit(\"adds optional preamble when result has marks and errors\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\t\"my_preamble\" +\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t]) + \"\\n\\n\\n\" +\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"adds optional preamble when result has marks alone\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\t\"my_preamble\" +\n\t\t\t\trenderer.renderMarksAsLines([\n\t\t\t\t\tcreatePass({ mark: TestMark.only }),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"adds optional preamble when result has errors alone\", () => {\n\t\t\tconst result = createSuite({ children: [\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\t\"my_preamble\" +\n\t\t\t\trenderer.renderAsMultipleLines([\n\t\t\t\t\tcreateTimeout(),\n\t\t\t\t]) + \"\\n\\n\" +\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t\tit(\"doesn't add preamble when result has no marks or errors\", () => {\n\t\t\tconst result = createSuite();\n\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tassert.equal(result.render(\"my_preamble\"),\n\t\t\t\trenderer.renderSummary(result),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test case\", ({ it }) => {\n\n\t\tit(\"passing tests have a name, status, and mark\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tconst noneMark = createPass({ mark: TestMark.none });\n\t\t\tconst skipMark = createPass({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createPass({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.pass, \"status\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"name can include parent suites\", () => {\n\t\t\tconst test = createPass({ name: [ \"parent\", \"child\", \"grandchild\" ] });\n\t\t\tassert.equal(test.name, [ \"parent\", \"child\", \"grandchild\" ]);\n\t\t});\n\n\t\tit(\"has optional filename\", () => {\n\t\t\tconst test = createPass({ filename: \"my_filename\" });\n\t\t\tassert.equal(test.filename, \"my_filename\");\n\t\t});\n\n\t\tit(\"failing tests have a name, status, mark, and error\", () => {\n\t\t\tconst result = createFail({ name: \"my name\", error: new Error(\"my error\") });\n\t\t\tconst noneMark = createFail({ mark: TestMark.none });\n\t\t\tconst skipMark = createFail({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createFail({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.fail, \"status\");\n\t\t\tassert.equal((result.error as Error).message, \"my error\", \"error\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"failing tests can have a string for the error\", () => {\n\t\t\tconst result = createFail({ name: \"irrelevant name\", error: \"my error\" });\n\t\t\tassert.equal(result.error, \"my error\");\n\t\t});\n\n\t\tit(\"skipped tests have a name, status, and mark\", () => {\n\t\t\tconst result = createSkip({ name: \"my name\" });\n\t\t\tconst noneMark = createSkip({ mark: TestMark.none });\n\t\t\tconst skipMark = createSkip({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createSkip({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.skip, \"status\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"timeout tests have name, status, mark, and timeout\", () => {\n\t\t\tconst result = createTimeout({ name: \"my name\", timeout: 999 });\n\t\t\tconst noneMark = createTimeout({ mark: TestMark.none });\n\t\t\tconst skipMark = createTimeout({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createTimeout({ mark: TestMark.only });\n\n\t\t\tassert.equal(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.timeout, \"status\");\n\t\t\tassert.equal(result.timeout, 999);\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"can be compared using equals()\", () => {\n\t\t\tassert.dotEquals(createPass({ name: \"my name\" }), createPass({ name: \"my name\" }));\n\t\t\tassert.dotEquals(createPass({ name: [ \"parent\", \"child\" ] }), createPass({ name: [ \"parent\", \"child\" ] }));\n\n\t\t\t// disregard stack when comparing errors: if name is equal, error is equal\n\t\t\tassert.dotEquals(\n\t\t\t\tcreateFail({ name: \"my name\", error: new Error(\"my error\") }),\n\t\t\t\tcreateFail({ name: \"my name\", error: new Error(\"my error\") }),\n\t\t\t);\n\n\t\t\tassert.notDotEquals(createPass({ name: \"my name\" }), createPass({ name: \"different\" }));\n\t\t\tassert.notDotEquals(createPass({ name: [ \"parent\", \"child\" ] }), createPass({ name: [ \"parent\", \"different\" ] }));\n\t\t\tassert.notDotEquals(createPass({ name: \"my name\" }), createSkip({ name: \"my name\" }));\n\t\t\tassert.notDotEquals(createPass({ name: \"my name\" }), createFail({ name: \"my name\", error: new Error() }));\n\t\t\tassert.notDotEquals(\n\t\t\t\tcreateTimeout({ name: \"my name\", timeout: 1 }),\n\t\t\t\tcreateTimeout({ name: \"my name\", timeout: 2 }),\n\t\t\t);\n\n\t\t\t// marks\n\t\t\tassert.dotEquals(createPass({ mark: TestMark.skip }), createPass({ mark: TestMark.skip }));\n\t\t\tassert.notDotEquals(createPass({ mark: TestMark.skip }), createPass({ mark: TestMark.none }));\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test case rendering\", ({ it }) => {\n\n\t\tit(\"renders test case as character, single line, or multi-line\", () => {\n\t\t\tconst renderer = TestRenderer.create();\n\t\t\tconst result = createPass();\n\n\t\t\tassert.equal(result.renderAsCharacter(), renderer.renderAsCharacters(result));\n\t\t\tassert.equal(result.renderAsSingleLine(), renderer.renderAsSingleLines(result));\n\t\t\tassert.equal(result.renderAsMultipleLines(), renderer.renderAsMultipleLines(result));\n\t\t});\n\n\t});\n\n\n\tdescribe(\"flattening\", ({ it }) => {\n\n\t\tit(\"flattens all test results into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allTests(), [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t]);\n\t\t});\n\n\t\tit(\"flattens tests with requested statuses into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allMatchingTests(TestStatus.fail), [\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t], \"one status\");\n\n\t\t\tassert.equal(suite.allMatchingTests(TestStatus.fail, TestStatus.timeout), [\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t], \"multiple statuses\");\n\t\t});\n\n\n\t\tit(\"flattens all marked results into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"test 0.1\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreateSuite({ name: \"suite 1.1\", mark: TestMark.none, children: [\n\t\t\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\t\t]}),\n\t\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allMarkedResults(), [\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\t\tcreateSuite({ name: \"suite 1.1\", mark: TestMark.none, children: [\n\t\t\t\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\t\t\t]}),\n\t\t\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t]);\n\t\t});\n\n\t\tit(\"includes parent suite\", () => {\n\t\t\tconst suite = createSuite({ mark: TestMark.skip });\n\n\t\t\tassert.equal(suite.allMarkedResults(), [ createSuite({ mark: TestMark.skip }) ]);\n\t\t});\n\n\t\tit(\"flattens results with requested marks into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"test 0.1\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allMatchingMarks(TestMark.skip), [\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t], \".skip\");\n\n\t\t\tassert.equal(suite.allMatchingMarks(TestMark.only), [\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t], \".only\");\n\t\t});\n\n\t});\n\n\n\tdescribe(\"passing test files\", ({ it }) => {\n\n\t\tit(\"provides names of files that have all passing tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"file2\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"file2\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames more than once\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of failing tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateFail({ filename: \"my_file2\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of skipped tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateSkip({ filename: \"my_file2\" }),\n\t\t\t]});\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of timed out tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateTimeout({ filename: \"my_file2\" }),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"[bugfix] does not include filenames of failing tests even when sibling tests pass\", () => {\n\t\t\t// Including filename in every test suite has resulted in tests being marked as 'pass' when they were 'fail'\n\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreateSuite({ filename: \"my_file\", children: [\n\t\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t\t\tcreateFail({ filename: \"my_file\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.allPassingFiles(), []);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"summarization\", ({ it }) => {\n\n\t\tit(\"provides test count\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.count(), {\n\t\t\t\t[TestStatus.pass]: 1,\n\t\t\t\t[TestStatus.fail]: 2,\n\t\t\t\t[TestStatus.skip]: 3,\n\t\t\t\t[TestStatus.timeout]: 4,\n\t\t\t\ttotal: 10,\n\t\t\t});\n\t\t});\n\n\t\tit(\"counts tests in sub-suites\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateFail(),\n\t\t\t\t\tcreateFail(),\n\t\t\t\t\tcreateSkip(),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.equal(suite.count(), {\n\t\t\t\t[TestStatus.pass]: 1,\n\t\t\t\t[TestStatus.fail]: 3,\n\t\t\t\t[TestStatus.skip]: 1,\n\t\t\t\t[TestStatus.timeout]: 0,\n\t\t\t\ttotal: 5,\n\t\t\t});\n\t\t});\n\n\t});\n\n\n\tdescribe(\"serialization and deserialization\", ({ it }) => {\n\n\t\tit(\"can be serialized and deserialized\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"pass\", mark: TestMark.none }),\n\t\t\t\tcreateSkip({ name: \"skip\", mark: TestMark.skip }),\n\t\t\t\tcreateFail({ name: \"fail\", mark: TestMark.only }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateSuite({ name: \"child\", mark: TestMark.skip, children: [\n\t\t\t\t\tcreatePass({ name: [ \"child\", \"child pass\" ]}),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tconst serialized = suite.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized);\n\n\t\t\tassert.dotEquals(deserialized, suite);\n\t\t});\n\n\t\tit(\"handles string errors\", () => {\n\t\t\tconst test = createFail({ error: \"my error\" });\n\n\t\t\tconst serialized = test.serialize();\n\t\t\tassert.dotEquals(TestResult.deserialize(serialized), test);\n\t\t});\n\n\t\tit(\"handles assertion errors\", () => {\n\t\t\tconst error = new AssertionError({\n\t\t\t\tmessage: \"my message\",\n\t\t\t\tactual: \"my actual\",\n\t\t\t\texpected: \"my expected\",\n\t\t\t\toperator: \"my operator\",\n\t\t\t});\n\n\t\t\tconst test = createFail({ error });\n\t\t\tconst serialized = test.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized) as TestCaseResult;\n\n\t\t\tassert.equal(deserialized.error, error);\n\t\t\tassert.equal((deserialized.error as Error).stack, error.stack);\n\t\t});\n\n\t\tit(\"handles other errors\", () => {\n\t\t\tconst error = new Error(\"my message\");\n\n\t\t\tconst test = createFail({ error });\n\t\t\tconst serialized = test.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized) as TestCaseResult;\n\n\t\t\tassert.equal(deserialized.error, error);\n\t\t\tassert.equal((deserialized.error as Error).stack, error.stack);\n\t\t});\n\n\t\tit(\"propagates custom fields\", () => {\n\t\t\tinterface MyError extends Error {\n\t\t\t\tcustom1: string,\n\t\t\t\tcustom2: string,\n\t\t\t}\n\n\t\t\tconst error = new Error(\"my message\") as MyError;\n\t\t\terror.custom1 = \"custom1\";\n\t\t\terror.custom2 = \"custom2\";\n\n\t\t\tconst test = createFail({ error });\n\t\t\tconst serialized = test.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized) as TestCaseResult;\n\n\t\t\tassert.equal(deserialized.error, error);\n\t\t\tassert.equal((deserialized.error as Error).stack, error.stack);\n\t\t});\n\n\t});\n\n});\n\nfunction createSuite({\n\tname = \"irrelevant name\",\n\tchildren = [],\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tchildren?: TestResult[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.suite(name, children, filename, mark);\n}\n\nfunction createPass({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.pass(name, filename, mark);\n}\n\nfunction createFail({\n\tname = \"irrelevant name\",\n\terror = new Error(\"irrelevant error\"),\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\terror?: string | Error,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.fail(name, error, filename, mark);\n}\n\nfunction createSkip({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.skip(name, filename, mark);\n}\n\nfunction createTimeout({\n\tname = \"irrelevant name\",\n\ttimeout = 42,\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\ttimeout?: number,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.timeout(name, timeout, filename, mark);\n}"],"names":["assert","test","AssertionError","TestMark","TestResult","TestStatus","TestRenderer","describe","it","list","createPass","name","result","suite","equal","children","createSuite","filename","notSpecified","none","mark","skip","only","dotEquals","notDotEquals","fail","createFail","createSkip","createTimeout","renderer","create","render","renderMarksAsLines","renderAsMultipleLines","renderSummary","noneMark","skipMark","onlyMark","status","pass","error","Error","message","timeout","renderAsCharacter","renderAsCharacters","renderAsSingleLine","renderAsSingleLines","allTests","allMatchingTests","allMarkedResults","allMatchingMarks","allPassingFiles","count","total","serialized","serialize","deserialized","deserialize","actual","expected","operator","stack","custom1","custom2","undefined"],"mappings":"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"}