{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_result_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport { assert, test } from \"tests\";\nimport { AssertionError } from \"node:assert\";\nimport { TestMark, TestMarkValue } from \"./test_suite.js\";\nimport { TestCaseResult, TestResult, TestStatus } from \"./test_result.js\";\n\nexport default test(({ describe }) => {\n\n\tdescribe(\"test suite\", ({ it }) => {\n\n\t\tit(\"has a name and list of test results\", () => {\n\t\t\tconst list = [ createPass({ name: \"test 1\" }), createPass({ name: \"test 2\" }) ];\n\t\t\tconst result = TestResult.suite([ \"my name\" ], list);\n\n\t\t\tassert.deepEqual(result.name, [ \"my name\" ]);\n\t\t\tassert.deepEqual(result.children, list);\n\t\t});\n\n\t\tit(\"name can include parent suites\", () => {\n\t\t\tconst suite = createSuite({ name: [ \"parent\", \"child\", \"grandchild\" ] });\n\n\t\t\tassert.deepEqual(suite.name, [ \"parent\", \"child\", \"grandchild\" ]);\n\t\t});\n\n\t\tit(\"has optional filename\", () => {\n\t\t\tconst suite = createSuite({ filename: \"/my/filename\" });\n\t\t\tassert.equal(suite.filename, \"/my/filename\");\n\t\t});\n\n\t\tit(\"has a mark\", () => {\n\t\t\tconst notSpecified = createSuite();\n\t\t\tconst none = createSuite({ mark: TestMark.none });\n\t\t\tconst skip = createSuite({ mark: TestMark.skip });\n\t\t\tconst only = createSuite({ mark: TestMark.only });\n\n\t\t\tassert.equal(notSpecified.mark, TestMark.none);\n\t\t\tassert.equal(none.mark, TestMark.none);\n\t\t\tassert.equal(skip.mark, TestMark.skip);\n\t\t\tassert.equal(only.mark, TestMark.only);\n\t\t});\n\n\t\tit(\"can be compared using equals()\", () => {\n\t\t\tassert.objEqual(createSuite({ name: \"my name\" }), createSuite({ name: \"my name\" }));\n\t\t\tassert.objNotEqual(createSuite({ name: \"my name\" }), createSuite({ name: \"different\" }));\n\n\t\t\tassert.objEqual(createSuite({ mark: TestMark.skip }), createSuite({ mark: TestMark.skip }));\n\t\t\tassert.objNotEqual(createSuite({ mark: TestMark.skip }), createSuite({ mark: TestMark.only }));\n\n\t\t\tassert.objEqual(createSuite({ name: [ \"parent\", \"child\" ]}), createSuite({ name: [ \"parent\", \"child\" ]}));\n\t\t\tassert.objNotEqual(createSuite({ name: [ \"parent\", \"child\" ]}), createSuite({ name: [ \"parent\", \"different\" ]}));\n\n\t\t\tassert.objEqual(\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t);\n\t\t\tassert.objNotEqual(\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"test name\" }) ]}),\n\t\t\t\tcreateSuite({ name: \"my name\", children: [ createPass({ name: \"different\" }) ]}),\n\t\t\t);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"test case\", ({ it }) => {\n\n\t\tit(\"passing tests have a name, status, and mark\", () => {\n\t\t\tconst result = createPass({ name: \"my name\" });\n\t\t\tconst noneMark = createPass({ mark: TestMark.none });\n\t\t\tconst skipMark = createPass({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createPass({ mark: TestMark.only });\n\n\t\t\tassert.deepEqual(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.pass, \"status\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"name can include parent suites\", () => {\n\t\t\tconst test = createPass({ name: [ \"parent\", \"child\", \"grandchild\" ] });\n\t\t\tassert.deepEqual(test.name, [ \"parent\", \"child\", \"grandchild\" ]);\n\t\t});\n\n\t\tit(\"has optional filename\", () => {\n\t\t\tconst test = createPass({ filename: \"my_filename\" });\n\t\t\tassert.equal(test.filename, \"my_filename\");\n\t\t});\n\n\t\tit(\"failing tests have a name, status, mark, and error\", () => {\n\t\t\tconst result = createFail({ name: \"my name\", error: new Error(\"my error\") });\n\t\t\tconst noneMark = createFail({ mark: TestMark.none });\n\t\t\tconst skipMark = createFail({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createFail({ mark: TestMark.only });\n\n\t\t\tassert.deepEqual(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.fail, \"status\");\n\t\t\tassert.equal((result.error as Error).message, \"my error\", \"error\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"failing tests can have a string for the error\", () => {\n\t\t\tconst result = createFail({ name: \"irrelevant name\", error: \"my error\" });\n\t\t\tassert.equal(result.error, \"my error\");\n\t\t});\n\n\t\tit(\"skipped tests have a name, status, and mark\", () => {\n\t\t\tconst result = createSkip({ name: \"my name\" });\n\t\t\tconst noneMark = createSkip({ mark: TestMark.none });\n\t\t\tconst skipMark = createSkip({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createSkip({ mark: TestMark.only });\n\n\t\t\tassert.deepEqual(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.skip, \"status\");\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"timeout tests have name, status, mark, and timeout\", () => {\n\t\t\tconst result = createTimeout({ name: \"my name\", timeout: 999 });\n\t\t\tconst noneMark = createTimeout({ mark: TestMark.none });\n\t\t\tconst skipMark = createTimeout({ mark: TestMark.skip });\n\t\t\tconst onlyMark = createTimeout({ mark: TestMark.only });\n\n\t\t\tassert.deepEqual(result.name, [ \"my name\" ], \"name\");\n\t\t\tassert.equal(result.status, TestStatus.timeout, \"status\");\n\t\t\tassert.equal(result.timeout, 999);\n\n\t\t\tassert.equal(result.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(noneMark.mark, TestMark.none, \"mark\");\n\t\t\tassert.equal(skipMark.mark, TestMark.skip, \"mark\");\n\t\t\tassert.equal(onlyMark.mark, TestMark.only, \"mark\");\n\t\t});\n\n\t\tit(\"can be compared using equals()\", () => {\n\t\t\tassert.objEqual(createPass({ name: \"my name\" }), createPass({ name: \"my name\" }));\n\t\t\tassert.objEqual(createPass({ name: [ \"parent\", \"child\" ] }), createPass({ name: [ \"parent\", \"child\" ] }));\n\n\t\t\t// disregard stack when comparing errors: if name is equal, error is equal\n\t\t\tassert.objEqual(\n\t\t\t\tcreateFail({ name: \"my name\", error: new Error(\"my error\") }),\n\t\t\t\tcreateFail({ name: \"my name\", error: new Error(\"my error\") }),\n\t\t\t);\n\n\t\t\tassert.objNotEqual(createPass({ name: \"my name\" }), createPass({ name: \"different\" }));\n\t\t\tassert.objNotEqual(createPass({ name: [ \"parent\", \"child\" ] }), createPass({ name: [ \"parent\", \"different\" ] }));\n\t\t\tassert.objNotEqual(createPass({ name: \"my name\" }), createSkip({ name: \"my name\" }));\n\t\t\tassert.objNotEqual(createPass({ name: \"my name\" }), createFail({ name: \"my name\", error: new Error() }));\n\t\t\tassert.objNotEqual(\n\t\t\t\tcreateTimeout({ name: \"my name\", timeout: 1 }),\n\t\t\t\tcreateTimeout({ name: \"my name\", timeout: 2 }),\n\t\t\t);\n\n\t\t\t// marks\n\t\t\tassert.objEqual(createPass({ mark: TestMark.skip }), createPass({ mark: TestMark.skip }));\n\t\t\tassert.objNotEqual(createPass({ mark: TestMark.skip }), createPass({ mark: TestMark.none }));\n\t\t});\n\n\t});\n\n\n\tdescribe(\"flattening\", ({ it }) => {\n\n\t\tit(\"flattens all test results into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.allTests(), [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t]);\n\t\t});\n\n\t\tit(\"flattens tests with requested statuses into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.allMatchingTests(TestStatus.fail), [\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t], \"one status\");\n\n\t\t\tassert.deepEqual(suite.allMatchingTests(TestStatus.fail, TestStatus.timeout), [\n\t\t\t\tcreateFail({ name: \"fail 1\" }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateFail({ name: \"fail 2\" }),\n\t\t\t], \"multiple statuses\");\n\t\t});\n\n\n\t\tit(\"flattens all marked results into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"test 0.1\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreateSuite({ name: \"suite 1.1\", mark: TestMark.none, children: [\n\t\t\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\t\t]}),\n\t\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.allMarkedResults(), [\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\t\tcreateSuite({ name: \"suite 1.1\", mark: TestMark.none, children: [\n\t\t\t\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\t\t\t]}),\n\t\t\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 1.1.1\", mark: TestMark.skip }),\n\t\t\t\tcreateSuite({ name: \"suite 1.2\", mark: TestMark.skip }),\n\t\t\t]);\n\t\t});\n\n\t\tit(\"includes parent suite\", () => {\n\t\t\tconst suite = createSuite({ mark: TestMark.skip });\n\n\t\t\tassert.deepEqual(suite.allMarkedResults(), [ createSuite({ mark: TestMark.skip }) ]);\n\t\t});\n\n\t\tit(\"flattens results with requested marks into a single list\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"test 0.1\", mark: TestMark.none }),\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.allMatchingMarks(TestMark.skip), [\n\t\t\t\tcreatePass({ name: \"test 0.2\", mark: TestMark.skip }),\n\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t], \".skip\");\n\n\t\t\tassert.deepEqual(suite.allMatchingMarks(TestMark.only), [\n\t\t\t\tcreatePass({ name: \"test 0.3\", mark: TestMark.only }),\n\t\t\t\tcreateSuite({ name: \"suite 1\", mark: TestMark.only, children: [\n\t\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t\t\tcreatePass({ name: \"test 1.2\", mark: TestMark.skip }),\n\t\t\t\t\tcreatePass({ name: \"test 1.3\", mark: TestMark.none }),\n\t\t\t\t]}),\n\t\t\t\tcreatePass({ name: \"test 1.1\", mark: TestMark.only }),\n\t\t\t], \".only\");\n\t\t});\n\n\t});\n\n\n\tdescribe(\"passing test files\", ({ it }) => {\n\n\t\tit(\"provides names of files that have all passing tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"file2\" }),\n\t\t\t]});\n\t\t\tassert.deepEqual(suite.allPassingFiles(), [ \"file2\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames more than once\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t]});\n\t\t\tassert.deepEqual(suite.allPassingFiles(), [ \"my_file\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of failing tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateFail({ filename: \"my_file2\" }),\n\t\t\t]});\n\t\t\tassert.deepEqual(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of skipped tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateSkip({ filename: \"my_file2\" }),\n\t\t\t]});\n\t\t\tassert.deepEqual(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"does not include filenames of timed out tests\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ filename: \"my_file1\" }),\n\t\t\t\tcreateTimeout({ filename: \"my_file2\" }),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.allPassingFiles(), [ \"my_file1\" ]);\n\t\t});\n\n\t\tit(\"[bugfix] does not include filenames of failing tests even when sibling tests pass\", () => {\n\t\t\t// Including filename in every test suite has resulted in tests being marked as 'pass' when they were 'fail'\n\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreateSuite({ filename: \"my_file\", children: [\n\t\t\t\t\tcreatePass({ filename: \"my_file\" }),\n\t\t\t\t\tcreateFail({ filename: \"my_file\" }),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.allPassingFiles(), []);\n\t\t});\n\n\t});\n\n\n\tdescribe(\"summarization\", ({ it }) => {\n\n\t\tit(\"provides test count\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateSkip(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t\tcreateTimeout(),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.count(), {\n\t\t\t\t[TestStatus.pass]: 1,\n\t\t\t\t[TestStatus.fail]: 2,\n\t\t\t\t[TestStatus.skip]: 3,\n\t\t\t\t[TestStatus.timeout]: 4,\n\t\t\t\ttotal: 10,\n\t\t\t});\n\t\t});\n\n\t\tit(\"counts tests in sub-suites\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass(),\n\t\t\t\tcreateFail(),\n\t\t\t\tcreateSuite({ children: [\n\t\t\t\t\tcreateFail(),\n\t\t\t\t\tcreateFail(),\n\t\t\t\t\tcreateSkip(),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tassert.deepEqual(suite.count(), {\n\t\t\t\t[TestStatus.pass]: 1,\n\t\t\t\t[TestStatus.fail]: 3,\n\t\t\t\t[TestStatus.skip]: 1,\n\t\t\t\t[TestStatus.timeout]: 0,\n\t\t\t\ttotal: 5,\n\t\t\t});\n\t\t});\n\n\t});\n\n\n\tdescribe(\"serialization and deserialization\", ({ it }) => {\n\n\t\tit(\"can be serialized and deserialized\", () => {\n\t\t\tconst suite = createSuite({ children: [\n\t\t\t\tcreatePass({ name: \"pass\", mark: TestMark.none }),\n\t\t\t\tcreateSkip({ name: \"skip\", mark: TestMark.skip }),\n\t\t\t\tcreateFail({ name: \"fail\", mark: TestMark.only }),\n\t\t\t\tcreateTimeout({ name: \"timeout\" }),\n\t\t\t\tcreateSuite({ name: \"child\", mark: TestMark.skip, children: [\n\t\t\t\t\tcreatePass({ name: [ \"child\", \"child pass\" ]}),\n\t\t\t\t]}),\n\t\t\t]});\n\n\t\t\tconst serialized = suite.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized);\n\n\t\t\tassert.objEqual(deserialized, suite);\n\t\t});\n\n\t\tit(\"handles string errors\", () => {\n\t\t\tconst test = createFail({ error: \"my error\" });\n\n\t\t\tconst serialized = test.serialize();\n\t\t\tassert.objEqual(TestResult.deserialize(serialized), test);\n\t\t});\n\n\t\tit(\"handles assertion errors\", () => {\n\t\t\tconst error = new AssertionError({\n\t\t\t\tmessage: \"my message\",\n\t\t\t\tactual: \"my actual\",\n\t\t\t\texpected: \"my expected\",\n\t\t\t\toperator: \"my operator\",\n\t\t\t});\n\n\t\t\tconst test = createFail({ error });\n\t\t\tconst serialized = test.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized) as TestCaseResult;\n\n\t\t\tassert.deepEqual(deserialized.error, error);\n\t\t\tassert.equal((deserialized.error as Error).stack, error.stack);\n\t\t});\n\n\t\tit(\"handles other errors\", () => {\n\t\t\tconst error = new Error(\"my message\");\n\n\t\t\tconst test = createFail({ error });\n\t\t\tconst serialized = test.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized) as TestCaseResult;\n\n\t\t\tassert.deepEqual(deserialized.error, error);\n\t\t\tassert.equal((deserialized.error as Error).stack, error.stack);\n\t\t});\n\n\t\tit(\"propagates custom fields\", () => {\n\t\t\tinterface MyError extends Error {\n\t\t\t\tcustom1: string,\n\t\t\t\tcustom2: string,\n\t\t\t}\n\n\t\t\tconst error = new Error(\"my message\") as MyError;\n\t\t\terror.custom1 = \"custom1\";\n\t\t\terror.custom2 = \"custom2\";\n\n\t\t\tconst test = createFail({ error });\n\t\t\tconst serialized = test.serialize();\n\t\t\tconst deserialized = TestResult.deserialize(serialized) as TestCaseResult;\n\n\t\t\tassert.deepEqual(deserialized.error, error);\n\t\t\tassert.equal((deserialized.error as Error).stack, error.stack);\n\t\t});\n\n\t});\n\n});\n\nfunction createSuite({\n\tname = \"irrelevant name\",\n\tchildren = [],\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tchildren?: TestResult[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.suite(name, children, filename, mark);\n}\n\nfunction createPass({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.pass(name, filename, mark);\n}\n\nfunction createFail({\n\tname = \"irrelevant name\",\n\terror = new Error(\"irrelevant error\"),\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\terror?: string | Error,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.fail(name, error, filename, mark);\n}\n\nfunction createSkip({\n\tname = \"irrelevant name\",\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.skip(name, filename, mark);\n}\n\nfunction createTimeout({\n\tname = \"irrelevant name\",\n\ttimeout = 42,\n\tfilename = undefined,\n\tmark = undefined,\n}: {\n\tname?: string | string[],\n\ttimeout?: number,\n\tfilename?: string,\n\tmark?: TestMarkValue,\n} = {}) {\n\treturn TestResult.timeout(name, timeout, filename, mark);\n}"],"names":["assert","test","AssertionError","TestMark","TestResult","TestStatus","describe","it","list","createPass","name","result","suite","deepEqual","children","createSuite","filename","equal","notSpecified","none","mark","skip","only","objEqual","objNotEqual","noneMark","skipMark","onlyMark","status","pass","createFail","error","Error","fail","message","createSkip","createTimeout","timeout","allTests","allMatchingTests","allMarkedResults","allMatchingMarks","allPassingFiles","count","total","serialized","serialize","deserialized","deserialize","actual","expected","operator","stack","custom1","custom2","undefined"],"mappings":"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"}