{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/assert.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\n// ****\n// An assertion library that works the way *I* want it to. <oldmanvoice>Get off my lawn!</oldmanvoice>\n// ****\n\n/* eslint @typescript-eslint/no-unsafe-function-type: \"off\" */\n// Several assertions operate on arbitrary functions.\n\nimport util from \"node:util\";\nimport { TypeDescriptor as TypeLibDescriptor, check as typeCheck, describe as describeType } from \"../util/type.js\";\nimport { AssertionError } from \"node:assert\";\n\ninterface DotEquals {\n\tequals(that: unknown): boolean,\n}\n\ninterface Includes {\n\tincludes(any: unknown): boolean,\n}\n\nexport type TypeDescriptor = TypeLibDescriptor;\n\nexport function fail(message: string): never {\n\tthrow new AssertionError({ message });\n}\n\nexport function todo(message?: string): never {\n\tmessage = message ? `: ${message}` : \"\";\n\tfail(`TO DO${message}`);\n}\n\nexport function identity(actual: unknown, expected: unknown, message?: string) {\n\tcheckExpected(expected);\n\tif (typeof expected !== \"object\" && typeof expected !== \"function\") {\n\t\tthrowAssertionError(message, \"'expected' is not an object\", actual, expected);\n\t}\n\tif (expected === null) throwAssertionError(message, \"'expected' is null\", actual, expected);\n\n\tif (actual !== expected) throwAssertionError(message, \"should have same object reference\", actual, expected);\n}\n\nexport function notIdentity(actual: unknown, expected: unknown, message?: string) {\n\tcheckExpected(expected);\n\tif (typeof expected !== \"object\") throwAssertionError(message, \"'expected' is not an object\", actual, expected);\n\tif (expected === null) throwAssertionError(message, \"'expected' is null\", actual, expected);\n\n\tif (actual === expected) throwAssertionError(message, \"should not have same object reference\", actual, expected);\n}\n\nexport function equal(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (!util.isDeepStrictEqual(actual, expected)) {\n\t\tthrowAssertionError(message, \"should be equal\", actual, expected);\n\t}\n}\n\nexport function notEqual(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (util.isDeepStrictEqual(actual, expected)) {\n\t\tthrowAssertionError(message, \"should not be equal\", actual, expected);\n\t}\n}\n\nexport function dotEquals(actual: unknown, expected: DotEquals,  message?: string) {\n\tcheckExpected(expected);\n\n\tmessage = message ? `${message}: ` : \"\";\n\tisDefined(actual, message);\n\tif (expected.equals === undefined) fail(message + \"'expected' does not have equals() method\");\n\tif (!expected.equals(actual)) throwAssertionError(message, \"should be .equals()\", actual, expected);\n}\n\nexport function notDotEquals(actual: unknown, expected: DotEquals,  message?: string) {\n\tcheckExpected(expected);\n\n\tmessage = message ? `${message}: ` : \"\";\n\tisDefined(actual, message);\n\tif (expected.equals === undefined) fail(message + \"'expected' does not have equals() method\");\n\tif (expected.equals(actual)) throwAssertionError(message, \"should not be equal()\", actual, expected);\n}\n\nexport function isDefined(actual: unknown, message?: string) {\n\tif (actual === undefined) throwAssertionError(message, \"should not be undefined\");\n}\n\nexport function isUndefined(actual: unknown, message?: string) {\n\tif (actual !== undefined) throwAssertionError(message, \"should be undefined\", actual);\n}\n\nexport function isTrue(actual: unknown, message?: string) {\n\tif (actual !== true) throwAssertionError(message, \"should be true\", actual, true);\n}\n\nexport function isFalse(actual: unknown, message?: string) {\n\tif (actual !== false) throwAssertionError(message, \"should be false\", actual, false);\n}\n\nexport function isNull(actual: unknown, message?: string) {\n\tif (actual !== null) throwAssertionError(message, \"should be null\", actual, null);\n}\n\nexport function isNotNull(actual: unknown, message?: string) {\n\tif (actual === null) throwAssertionError(message, \"should not be null\", actual);\n}\n\nexport function atLeast(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif ((actual as number) < (expected as number)) {\n\t\tthrowAssertionError(message, `should be at least ${expected}`, actual, expected);\n\t}\n}\n\nexport function atMost(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif ((actual as number) > (expected as number)) {\n\t\tthrowAssertionError(message, `should be at most ${expected}`, actual, expected);\n\t}\n}\n\nexport function between(actual: unknown, min: unknown, max: unknown, message?: string) {\n\tisDefined(actual, message);\n\tmessage = message ? `${message}: ` : \"\";\n\tif ((actual as number) < (min as number) || (actual as number) > (max as number)) {\n\t\tfail(message + \"should be between \" + min + \" and \" + max + \" (inclusive), but was \" + actual);\n\t}\n}\n\nexport function match(actual: string, expected: RegExp, message?: string) {\n\tcheckExpected(expected);\n\tif (typeof actual !== \"string\") throwAssertionError(message, `should have been string, but was ${typeof actual}`);\n\tif (!expected.test(actual)) throwAssertionError(message, \"should match regex\", actual, expected);\n}\n\nexport function matchesGroup(actual: string, regex: RegExp, expectedMatch: string | null, message?: string) {\n\tmessage = message ?? \"regex group\";\n\tconst regexResult = regex.exec(actual);\n\tconst actualMatch = regexResult === null ? null : regexResult[1];\n\n\tif (expectedMatch === null && actualMatch === null) {\n\t\treturn;\n\t}\n\telse if (expectedMatch === null && actualMatch !== null) {\n\t\tfail(`should not have found ${message}, but it was '${actualMatch}' (searched with ${regex})`);\n\t}\n\telse if (expectedMatch !== null && actualMatch === null) {\n\t\tfail(`${message} expected '${expectedMatch}', but nothing was found (searched with ${regex})`);\n\t}\n\telse {\n\t\tequal(actualMatch, expectedMatch, message);\n\t}\n}\n\nexport function includes(actual: Includes, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tisDefined(actual, message);\n\tif (!actual.includes(expected)) {\n\t\tthrowAssertionError(message, \"actual value should include expected value\", actual, expected);\n\t}\n}\n\nexport function notIncludes(actual: Includes, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tisDefined(actual, message);\n\tif (actual.includes(expected)) {\n\t\tthrowAssertionError(message, \"actual value should not include expected value\", actual, expected);\n\t}\n}\n\nexport function error(fn: Function, expected?: RegExp | string, message?: string) {\n\ttry {\n\t\tfn();\n\t}\n\tcatch (err) {\n\t\tif (expected === undefined) return;\n\t\tif (!(err instanceof Error)) fail(`should have thrown Error, but was: ${err}`);\n\t\tif (typeof expected === \"string\") {\n\t\t\tequal(err.message, expected, message);\n\t\t}\n\t\telse {\n\t\t\tmatch(err.message, expected, message);\n\t\t}\n\t\treturn;\n\t}\n\tthrowAssertionError(message, \"Expected exception\");\n}\n\nexport function notError(fn: Function) {\n\tfn();\n}\n\nexport async function errorAsync(fnAsync: Function, expectedRegexOrExactString?: RegExp | string, message?: string) {\n\ttry {\n\t\tawait fnAsync();\n\t}\n\tcatch (err) {\n\t\tif (expectedRegexOrExactString === undefined) return;\n\t\tif (!(err instanceof Error)) fail(`should have thrown Error, but was: ${err}`);\n\t\tif (typeof expectedRegexOrExactString === \"string\") {\n\t\t\tequal(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\telse {\n\t\t\tmatch(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\treturn;\n\t}\n\tthrowAssertionError(message, \"Expected exception\");\n}\n\nexport async function notErrorAsync(fnAsync: Function) {\n\tawait fnAsync();\n}\n\nexport function type(actual: unknown, expected: TypeDescriptor,  message?: string) {\n\tcheckExpected(expected);\n\tconst error = typeCheck(actual, expected);\n\tif (error !== null) {\n\t\tthrowAssertionError(message, \"type should match\", actual, describeType(expected));\n\t}\n}\n\nfunction checkExpected(expected: unknown) {\n\tif (expected === undefined) fail(\"'undefined' provided as expected value in assertion\");\n}\n\nfunction throwAssertionError(\n\tuserMessage: string | undefined,\n\tassertionMessage: string,\n\tactual?: unknown,\n\texpected?: unknown,\n): never {\n\tuserMessage = userMessage ? `${userMessage}: ` : \"\";\n\tthrow new AssertionError({ message: `${userMessage}${assertionMessage}`, actual, expected });\n}"],"names":["util","check","typeCheck","describe","describeType","AssertionError","fail","message","todo","identity","actual","expected","checkExpected","throwAssertionError","notIdentity","equal","isDeepStrictEqual","notEqual","dotEquals","isDefined","equals","undefined","notDotEquals","isUndefined","isTrue","isFalse","isNull","isNotNull","atLeast","atMost","between","min","max","match","test","matchesGroup","regex","expectedMatch","regexResult","exec","actualMatch","includes","notIncludes","error","fn","err","Error","notError","errorAsync","fnAsync","expectedRegexOrExactString","notErrorAsync","type","userMessage","assertionMessage"],"mappings":"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"}