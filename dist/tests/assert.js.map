{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/assert.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\n// ****\n// An assertion library that works the way *I* want it to. <oldmanvoice>Get off my lawn!</oldmanvoice>\n// ****\n\n/* eslint @typescript-eslint/no-unsafe-function-type: \"off\" */\n// Several assertions operate on arbitrary functions.\n\nimport util from \"node:util\";\nimport * as typeLib from \"../util/type.js\";\nimport { AssertionError } from \"node:assert\";\n\ninterface DotEquals {\n\tequals(that: unknown): boolean,\n}\n\ninterface Includes {\n\tincludes(any: unknown): boolean,\n}\n\nexport function fail(message: string): never {\n\tthrow new AssertionError({ message });\n}\n\nexport function todo(message?: string): never {\n\tmessage = message ? `: ${message}` : \"\";\n\tfail(`TO DO${message}`);\n}\n\nexport function equal(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (!util.isDeepStrictEqual(actual, expected)) {\n\t\tthrowAssertionError(message, \"should be equal\", actual, expected);\n\t}\n}\n\nexport function notEqual(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (expected === actual) throwAssertionError(message, \"should not be equal\", actual, expected);\n}\n\nexport function dotEquals(actual: unknown, expected: DotEquals,  message?: string) {\n\tcheckExpected(expected);\n\n\tmessage = message ? `${message}: ` : \"\";\n\tisDefined(actual, message);\n\tif (expected.equals === undefined) fail(message + \"'expected' does not have equals() method\");\n\tif (!expected.equals(actual)) throwAssertionError(message, \"should be equal()\", actual, expected);\n}\n\nexport function notDotEquals(actual: unknown, expected: DotEquals,  message?: string) {\n\tcheckExpected(expected);\n\n\tmessage = message ? `${message}: ` : \"\";\n\tisDefined(actual, message);\n\tif (expected.equals === undefined) fail(message + \"'expected' does not have equals() method\");\n\tif (expected.equals(actual)) throwAssertionError(message, \"should not be equal()\", actual, expected);\n}\n\nexport function isDefined(actual: unknown, message?: string) {\n\tif (actual === undefined) throwAssertionError(message, \"should not be undefined\");\n}\n\nexport function isUndefined(actual: unknown, message?: string) {\n\tif (actual !== undefined) throwAssertionError(message, \"should be undefined\", actual);\n}\n\nexport function isTrue(actual: unknown, message?: string) {\n\tif (actual !== true) throwAssertionError(message, \"should be true\", actual, true);\n}\n\nexport function isFalse(actual: unknown, message?: string) {\n\tif (actual !== false) throwAssertionError(message, \"should be false\", actual, false);\n}\n\nexport function isNull(actual: unknown, message?: string) {\n\tif (actual !== null) throwAssertionError(message, \"should be null\", actual, null);\n}\n\nexport function isNotNull(actual: unknown, message?: string) {\n\tif (actual === null) throwAssertionError(message, \"should not be null\", actual);\n}\n\nexport function atLeast(actual: number, expected: number,  message?: string) {\n\tcheckExpected(expected);\n\tif (actual < expected) throwAssertionError(message, `should be at least ${expected}`, actual, expected);\n}\n\nexport function atMost(actual: number, expected: number,  message?: string) {\n\tcheckExpected(expected);\n\tif (actual > expected) throwAssertionError(message, `should be at most ${expected}`, actual, expected);\n}\n\nexport function between(value: number, min: number, max: number, message?: string) {\n\tisDefined(value, message);\n\tmessage = message ? `${message}: ` : \"\";\n\tif (value < min || value > max) {\n\t\tfail(message + \"should be between \" + min + \" and \" + max + \" (inclusive), but was \" + value);\n\t}\n}\n\nexport function type(actual: unknown, expected: typeLib.TypeDescriptor,  message?: string) {\n\tcheckExpected(expected);\n\tconst error = typeLib.check(actual, expected);\n\tif (error !== null) {\n\t\tthrowAssertionError(message, \"type should match\", actual, typeLib.describe(expected));\n\t}\n}\n\nexport function match(actual: unknown, expectedRegex: RegExp, message?: string) {\n\tif (typeof actual !== \"string\") throwAssertionError(message, `should have been string, but was ${typeof actual}`);\n\tif (!expectedRegex.test(actual)) throwAssertionError(message, \"should match regex\", actual, expectedRegex);\n}\n\nexport function matchesGroup(actual: string, regex: RegExp, expectedMatch: string | null, message?: string | null) {\n\tmessage = message ?? \"regex group\";\n\tconst regexResult = regex.exec(actual);\n\tconst actualMatch = regexResult === null ? null : regexResult[1];\n\n\tif (expectedMatch === null && actualMatch === null) {\n\t\treturn;\n\t}\n\telse if (expectedMatch === null && actualMatch !== null) {\n\t\tfail(`should not have found ${message}, but it was '${actualMatch}' (searched with ${regex})`);\n\t}\n\telse if (expectedMatch !== null && actualMatch === null) {\n\t\tfail(`${message} expected '${expectedMatch}', but nothing was found (searched with ${regex})`);\n\t}\n\telse {\n\t\tequal(actualMatch, expectedMatch, message);\n\t}\n}\n\n\nexport function includes(actual: Includes, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (!actual.includes(expected)) {\n\t\tthrowAssertionError(message, \"actual value should include expected value\", actual, expected);\n\t}\n}\n\nexport function notIncludes(actual: Includes, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (actual.includes(expected)) {\n\t\tthrowAssertionError(message, \"actual value should not include expected value\", actual, expected);\n\t}\n}\n\nexport function error(fn: Function, expectedRegexOrExactString?: RegExp | string, message?: string) {\n\ttry {\n\t\tfn();\n\t}\n\tcatch (err) {\n\t\tif (expectedRegexOrExactString === undefined) return;\n\t\tif (!(err instanceof Error)) fail(`should have thrown Error, but was: ${err}`);\n\t\tif (typeof expectedRegexOrExactString === \"string\") {\n\t\t\tequal(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\telse {\n\t\t\tmatch(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\treturn;\n\t}\n\tthrowAssertionError(message, \"Expected exception\");\n}\n\nexport function notError(fn: Function) {\n\tfn();\n}\n\nexport async function errorAsync(fnAsync: Function, expectedRegexOrExactString?: RegExp | string, message?: string) {\n\ttry {\n\t\tawait fnAsync();\n\t}\n\tcatch (err) {\n\t\tif (expectedRegexOrExactString === undefined) return;\n\t\tif (!(err instanceof Error)) fail(`should have thrown Error, but was: ${err}`);\n\t\tif (typeof expectedRegexOrExactString === \"string\") {\n\t\t\tequal(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\telse {\n\t\t\tmatch(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\treturn;\n\t}\n\tthrowAssertionError(message, \"Expected exception\");\n}\n\nexport async function notErrorAsync(fnAsync: Function) {\n\tawait fnAsync();\n}\n\nfunction checkExpected(expected: unknown) {\n\tif (expected === undefined) fail(\"'undefined' provided as expected value in assertion\");\n}\n\nfunction throwAssertionError(\n\tuserMessage: string | undefined,\n\tassertionMessage: string,\n\tactual?: unknown,\n\texpected?: unknown,\n): never {\n\tuserMessage = userMessage ? `${userMessage}: ` : \"\";\n\tthrow new AssertionError({ message: `${userMessage}${assertionMessage}`, actual, expected });\n}"],"names":["util","typeLib","AssertionError","fail","message","todo","equal","actual","expected","checkExpected","isDeepStrictEqual","throwAssertionError","notEqual","dotEquals","isDefined","equals","undefined","notDotEquals","isUndefined","isTrue","isFalse","isNull","isNotNull","atLeast","atMost","between","value","min","max","type","error","check","describe","match","expectedRegex","test","matchesGroup","regex","expectedMatch","regexResult","exec","actualMatch","includes","notIncludes","fn","expectedRegexOrExactString","err","Error","notError","errorAsync","fnAsync","notErrorAsync","userMessage","assertionMessage"],"mappings":"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"}