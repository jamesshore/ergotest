{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/assert.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\n// ****\n// An assertion library that works the way *I* want it to. <oldmanvoice>Get off my lawn!</oldmanvoice>\n// ****\n\n/* eslint @typescript-eslint/no-unsafe-function-type: \"off\" */\n// Several assertions operate on arbitrary functions.\n\nimport util from \"node:util\";\nimport * as typeLib from \"../util/type.js\";\nimport { AssertionError } from \"node:assert\";\n\ninterface ObjEquals {\n\tequals(that: unknown): boolean,\n}\n\ninterface Includes {\n\tincludes(any: unknown): boolean,\n}\n\nexport function fail(message: string): never {\n\tthrow new AssertionError({ message });\n}\n\nexport function todo(message?: string): never {\n\tmessage = message ? `: ${message}` : \"\";\n\tfail(`TO DO${message}`);\n}\n\nexport function equal(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (expected !== actual) throwAssertionError(message, \"expected equality\", actual, expected);\n}\n\nexport function notEqual(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (expected === actual) throwAssertionError(message, \"expected no equality\", actual, expected);\n}\n\nexport function isDefined(actual: unknown, message?: string) {\n\tif (actual === undefined) throwAssertionError(message, \"expected value, but was undefined\");\n}\n\nexport function isUndefined(actual: unknown, message?: string) {\n\tif (actual !== undefined) throwAssertionError(message, \"expected value, but was undefined\", actual);\n}\n\nexport function isTrue(actual: unknown, message?: string) {\n\tif (actual !== true) throwAssertionError(message, \"expected true\", actual, true);\n}\n\nexport function isFalse(actual: unknown, message?: string) {\n\tif (actual !== false) throwAssertionError(message, \"expected false\", actual, false);\n}\n\nexport function isNull(actual: unknown, message?: string) {\n\tif (actual !== null) throwAssertionError(message, \"expected null\", actual, null);\n}\n\nexport function isNotNull(actual: unknown, message?: string) {\n\tif (actual === null) throwAssertionError(message, \"expected non-null\", actual);\n}\n\nexport function atLeast(actual: number, expected: number,  message?: string) {\n\tcheckExpected(expected);\n\tif (actual < expected) throwAssertionError(message, `expected at least ${expected}`, actual, expected);\n}\n\nexport function atMost(actual: number, expected: number,  message?: string) {\n\tcheckExpected(expected);\n\tif (actual > expected) throwAssertionError(message, `expected at most ${expected}`, actual, expected);\n}\n\nexport function deepEqual(actual: unknown, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (!util.isDeepStrictEqual(actual, expected)) {\n\t\tthrowAssertionError(message, \"expected deep equality\", actual, expected);\n\t}\n}\n\nexport function type(actual: unknown, expected: typeLib.TypeDescriptor,  message?: string) {\n\tcheckExpected(expected);\n\tconst error = typeLib.check(actual, expected);\n\tif (error !== null) {\n\t\tthrowAssertionError(message, \"type should match\", actual, typeLib.describe(expected));\n\t}\n}\n\nexport function objEqual(actual: unknown, expected: ObjEquals,  message?: string) {\n\tcheckExpected(expected);\n\n\tmessage = message ? `${message}: ` : \"\";\n\tisDefined(actual, message);\n\tif (expected.equals === undefined) fail(message + \"'expected' does not have equals() method\");\n\tif (!expected.equals(actual)) throwAssertionError(message, \"should be equal()\", actual, expected);\n}\n\nexport function objNotEqual(actual: ObjEquals, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\n\tmessage = message ? `${message}: ` : \"\";\n\tisDefined(actual, message);\n\tif (actual.equals === undefined) fail(message + \"does not have equals() method\");\n\tisFalse(actual.equals(expected), message + \"expected '\" + expected + \"' and '\" + actual + \"' to be not be equal(), but they were\");\n}\n\nexport function between(value: number, min: number, max: number, message?: string) {\n\tisDefined(value, message);\n\tmessage = message ? `${message}: ` : \"\";\n\tif (value < min || value > max) {\n\t\tfail(message + \"expected value between \" + min + \" and \" + max + \" (inclusive), but was \" + value);\n\t}\n}\n\nexport function match(actual: unknown, expectedRegex: RegExp, message?: string) {\n\tif (typeof actual !== \"string\") throwAssertionError(message, `should have been string, but was ${typeof actual}`);\n\tif (!expectedRegex.test(actual)) throwAssertionError(message, \"should match regex\", actual, expectedRegex);\n}\n\nexport function matchesGroup(actual: string, regex: RegExp, expectedMatch: string | null, message?: string | null) {\n\tmessage = message ?? \"regex group\";\n\tconst regexResult = regex.exec(actual);\n\tconst actualMatch = regexResult === null ? null : regexResult[1];\n\n\tif (expectedMatch === null && actualMatch === null) {\n\t\treturn;\n\t}\n\telse if (expectedMatch === null && actualMatch !== null) {\n\t\tfail(`should not have found ${message}, but it was '${actualMatch}' (searched with ${regex})`);\n\t}\n\telse if (expectedMatch !== null && actualMatch === null) {\n\t\tfail(`${message} expected '${expectedMatch}', but nothing was found (searched with ${regex})`);\n\t}\n\telse {\n\t\tequal(actualMatch, expectedMatch, message);\n\t}\n}\n\n\nexport function includes(actual: Includes, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (!actual.includes(expected)) {\n\t\tthrowAssertionError(message, \"actual value should include expected value\", actual, expected);\n\t}\n}\n\nexport function notIncludes(actual: Includes, expected: unknown,  message?: string) {\n\tcheckExpected(expected);\n\tif (actual.includes(expected)) {\n\t\tthrowAssertionError(message, \"actual value should not include expected value\", actual, expected);\n\t}\n}\n\nexport function noException(fn: Function) {\n\tfn();\n}\n\nexport function exception(fn: Function, expectedRegexOrExactString?: RegExp | string, message?: string) {\n\ttry {\n\t\tfn();\n\t}\n\tcatch (err) {\n\t\tif (expectedRegexOrExactString === undefined) return;\n\t\tif (!(err instanceof Error)) fail(`Should have thrown Error, but was: ${err}`);\n\t\tif (typeof expectedRegexOrExactString === \"string\") {\n\t\t\tequal(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\telse {\n\t\t\tmatch(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\treturn;\n\t}\n\tthrowAssertionError(message, \"Expected exception\");\n}\n\nexport async function exceptionAsync(fnAsync: Function, expectedRegexOrExactString?: RegExp | string, message?: string) {\n\ttry {\n\t\tawait fnAsync();\n\t}\n\tcatch (err) {\n\t\tif (expectedRegexOrExactString === undefined) return;\n\t\tif (!(err instanceof Error)) fail(`Should have thrown Error, but was: ${err}`);\n\t\tif (typeof expectedRegexOrExactString === \"string\") {\n\t\t\tequal(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\telse {\n\t\t\tmatch(err.message, expectedRegexOrExactString, message);\n\t\t}\n\t\treturn;\n\t}\n\tthrowAssertionError(message, \"Expected exception\");\n}\n\nexport async function noExceptionAsync(fnAsync: Function) {\n\tawait fnAsync();\n}\n\nfunction checkExpected(expected: unknown) {\n\tif (expected === undefined) fail(\"'undefined' provided as expected value in assertion\");\n}\n\nfunction throwAssertionError(\n\tuserMessage: string | undefined,\n\tassertionMessage: string,\n\tactual?: unknown,\n\texpected?: unknown,\n): never {\n\tuserMessage = userMessage ? `${userMessage}: ` : \"\";\n\tthrow new AssertionError({ message: `${userMessage}${assertionMessage}`, actual, expected });\n}"],"names":["util","typeLib","AssertionError","fail","message","todo","equal","actual","expected","checkExpected","throwAssertionError","notEqual","isDefined","undefined","isUndefined","isTrue","isFalse","isNull","isNotNull","atLeast","atMost","deepEqual","isDeepStrictEqual","type","error","check","describe","objEqual","equals","objNotEqual","between","value","min","max","match","expectedRegex","test","matchesGroup","regex","expectedMatch","regexResult","exec","actualMatch","includes","notIncludes","noException","fn","exception","expectedRegexOrExactString","err","Error","exceptionAsync","fnAsync","noExceptionAsync","userMessage","assertionMessage"],"mappings":"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"}