{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_runner_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport { assert, test } from \"tests\";\nimport { TestRunner } from \"./test_runner.js\";\nimport path from \"node:path\";\nimport { TestSuite } from \"./test_suite.js\";\nimport { TestResult } from \"./test_result.js\";\nimport fs from \"node:fs/promises\";\nimport { Clock } from \"../infrastructure/clock.js\";\n\nexport default test(({ beforeEach, it }) => {\n\n\tlet TEST_MODULE_PATH: string;\n\n\tbeforeEach(async ({ getConfig }) => {\n\t\tconst testDir = getConfig<string>(\"scratchDir\");\n\n\t\tTEST_MODULE_PATH = `${testDir}/_test_runner_module.js`;\n\t\tawait deleteTempFilesAsync(testDir);\n\t});\n\n\tit(\"runs test modules\", async () => {\n\t\tconst { runner } = create();\n\t\tawait writeTestModuleAsync(`// passes`);\n\n\t\tconst results = await runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tconst expectedResult = TestResult.suite([], [\n\t\t\tTestResult.suite([], [\n\t\t\t\tTestResult.pass(\"test\", TEST_MODULE_PATH)\n\t\t\t], TEST_MODULE_PATH),\n\t\t]);\n\n\t\tassert.objEqual(results, expectedResult);\n\t});\n\n\tit(\"passes through config\", async () => {\n\t\tconst myConfig = { myConfig: \"my_config\" };\n\t\tconst { runner } = create();\n\n\t\tawait writeTestModuleAsync(`throw new Error(getConfig(\"myConfig\"));`);\n\t\tconst results = await runner.runIsolatedAsync([ TEST_MODULE_PATH ], { config: myConfig });\n\n\t\tassertFailureMessage(results, \"my_config\");\n\t});\n\n\tit(\"notifies caller of completed tests\", async () => {\n\t\tconst { runner } = create();\n\n\t\tconst progress: TestResult[] = [];\n\t\tconst notifyFn = (result: TestResult) => progress.push(result);\n\n\t\tawait writeTestModuleAsync(`// passes`);\n\t\tawait runner.runIsolatedAsync([ TEST_MODULE_PATH ], { notifyFn });\n\n\t\tassert.deepEqual(progress, [\n\t\t\tTestResult.pass(\"test\", TEST_MODULE_PATH),\n\t\t]);\n\t});\n\n\tit(\"does not cache test modules from run to run\", async () => {\n\t\tconst { runner } = create();\n\n\t\tawait writeTestModuleAsync(`throw new Error(\"module was cached, and shouldn't have been\");`);\n\t\tawait runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tawait writeTestModuleAsync(`throw new Error(\"module was not cached\");`);\n\t\tconst results = await runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tassertFailureMessage(results, \"module was not cached\");\n\t});\n\n\tit(\"isolates tests\", async () => {\n\t\tconst { runner } = create();\n\n\t\tawait writeTestModuleAsync(`global._test_runner_test = true;`);\n\t\tawait runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tawait writeTestModuleAsync(`throw new Error(\"global should be undefined: \" + global._test_runner_test);`);\n\t\tconst results = await runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tassertFailureMessage(results, \"global should be undefined: undefined\");\n\t});\n\n\tit(\"supports process.chdir(), which isn't allowed in Worker threads\", async () => {\n\t\tconst { runner } = create();\n\n\t\tawait writeTestModuleAsync(`\n\t\t\tprocess.chdir(\".\");\n\t\t\tthrow new Error(\"process.chdir() should execute without error\");\n\t\t`);\n\t\tconst results = await runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tassertFailureMessage(results, \"process.chdir() should execute without error\");\n\t});\n\n\tit(\"handles uncaught promise rejections\", async () => {\n\t\tconst { runner } = create();\n\n\t\tawait writeTestModuleAsync(`Promise.reject(new Error(\"my error\"));`);\n\t\tconst results = await runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tassert.deepEqual(results, TestResult.suite([], [\n\t\t\tTestResult.fail(\"Unhandled error in tests\", new Error(\"my error\")),\n\t\t]));\n\t});\n\n\tit(\"handles infinite loops\", async () => {\n\t\tconst { runner, clock } = create();\n\n\t\tawait writeTestModuleAsync(`while (true);`);\n\t\tconst resultsPromise = runner.runIsolatedAsync([ TEST_MODULE_PATH ]);\n\n\t\tawait clock.tickAsync(TestSuite.DEFAULT_TIMEOUT_IN_MS);\n\n\t\tassert.deepEqual(await resultsPromise, TestResult.suite([], [\n\t\t\tTestResult.fail(\"Test runner watchdog\", \"Detected infinite loop in tests\"),\n\t\t]));\n\t});\n\n\n\tfunction assertFailureMessage(results: TestResult, expectedFailure: string) {\n\t\t// @ts-expect-error This is pretty janky, but the tests will fail if it breaks\n\t\tassert.equal(results.children[0].children[0].error.message, expectedFailure);\n\t}\n\n\tasync function writeTestModuleAsync(bodySourceCode: string) {\n\t\tconst testSuitePath = path.resolve(import.meta.dirname, \"./test_suite.js\");\n\t\tawait fs.writeFile(TEST_MODULE_PATH, `\n\t\t\timport { TestSuite } from ` + `\"${testSuitePath}\";\n\t\t\t\n\t\t\texport default TestSuite.create(({ it }) => {\n\t\t\t\tit(\"test\", ({ getConfig }) => {\n\t\t\t\t\t${bodySourceCode}\n\t\t\t\t});\n\t\t\t});\n\t\t`);\n\t}\n\n\tasync function deleteTempFilesAsync(testDir: string) {\n\t\tassert.defined(testDir);\n\t\tawait fs.rm(testDir, { recursive: true, force: true });\n\t\tawait fs.mkdir(testDir, { recursive: true });\n\t}\n\n});\n\nfunction create({\n\tclock = Clock.createNull(),\n} = {}) {\n\tconst runner = new TestRunner(clock);\n\n\treturn { runner, clock };\n}"],"names":["assert","test","TestRunner","path","TestSuite","TestResult","fs","Clock","beforeEach","it","TEST_MODULE_PATH","getConfig","testDir","deleteTempFilesAsync","runner","create","writeTestModuleAsync","results","runIsolatedAsync","expectedResult","suite","pass","objEqual","myConfig","config","assertFailureMessage","progress","notifyFn","result","push","deepEqual","fail","Error","clock","resultsPromise","tickAsync","DEFAULT_TIMEOUT_IN_MS","expectedFailure","equal","children","error","message","bodySourceCode","testSuitePath","resolve","dirname","writeFile","defined","rm","recursive","force","mkdir","createNull"],"mappings":"AAAA,iFAAiF;AAEjF,SAASA,MAAM,EAAEC,IAAI,QAAQ,QAAQ;AACrC,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAOC,UAAU,YAAY;AAC7B,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,OAAOC,QAAQ,mBAAmB;AAClC,SAASC,KAAK,QAAQ,6BAA6B;AAEnD,eAAeN,KAAK,CAAC,EAAEO,UAAU,EAAEC,EAAE,EAAE;IAEtC,IAAIC;IAEJF,WAAW,OAAO,EAAEG,SAAS,EAAE;QAC9B,MAAMC,UAAUD,UAAkB;QAElCD,mBAAmB,CAAC,EAAEE,QAAQ,uBAAuB,CAAC;QACtD,MAAMC,qBAAqBD;IAC5B;IAEAH,GAAG,qBAAqB;QACvB,MAAM,EAAEK,MAAM,EAAE,GAAGC;QACnB,MAAMC,qBAAqB,CAAC,SAAS,CAAC;QAEtC,MAAMC,UAAU,MAAMH,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAElE,MAAMS,iBAAiBd,WAAWe,KAAK,CAAC,EAAE,EAAE;YAC3Cf,WAAWe,KAAK,CAAC,EAAE,EAAE;gBACpBf,WAAWgB,IAAI,CAAC,QAAQX;aACxB,EAAEA;SACH;QAEDV,OAAOsB,QAAQ,CAACL,SAASE;IAC1B;IAEAV,GAAG,yBAAyB;QAC3B,MAAMc,WAAW;YAAEA,UAAU;QAAY;QACzC,MAAM,EAAET,MAAM,EAAE,GAAGC;QAEnB,MAAMC,qBAAqB,CAAC,uCAAuC,CAAC;QACpE,MAAMC,UAAU,MAAMH,OAAOI,gBAAgB,CAAC;YAAER;SAAkB,EAAE;YAAEc,QAAQD;QAAS;QAEvFE,qBAAqBR,SAAS;IAC/B;IAEAR,GAAG,sCAAsC;QACxC,MAAM,EAAEK,MAAM,EAAE,GAAGC;QAEnB,MAAMW,WAAyB,EAAE;QACjC,MAAMC,WAAW,CAACC,SAAuBF,SAASG,IAAI,CAACD;QAEvD,MAAMZ,qBAAqB,CAAC,SAAS,CAAC;QACtC,MAAMF,OAAOI,gBAAgB,CAAC;YAAER;SAAkB,EAAE;YAAEiB;QAAS;QAE/D3B,OAAO8B,SAAS,CAACJ,UAAU;YAC1BrB,WAAWgB,IAAI,CAAC,QAAQX;SACxB;IACF;IAEAD,GAAG,+CAA+C;QACjD,MAAM,EAAEK,MAAM,EAAE,GAAGC;QAEnB,MAAMC,qBAAqB,CAAC,8DAA8D,CAAC;QAC3F,MAAMF,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAElD,MAAMM,qBAAqB,CAAC,yCAAyC,CAAC;QACtE,MAAMC,UAAU,MAAMH,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAElEe,qBAAqBR,SAAS;IAC/B;IAEAR,GAAG,kBAAkB;QACpB,MAAM,EAAEK,MAAM,EAAE,GAAGC;QAEnB,MAAMC,qBAAqB,CAAC,gCAAgC,CAAC;QAC7D,MAAMF,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAElD,MAAMM,qBAAqB,CAAC,2EAA2E,CAAC;QACxG,MAAMC,UAAU,MAAMH,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAElEe,qBAAqBR,SAAS;IAC/B;IAEAR,GAAG,mEAAmE;QACrE,MAAM,EAAEK,MAAM,EAAE,GAAGC;QAEnB,MAAMC,qBAAqB,CAAC;;;EAG5B,CAAC;QACD,MAAMC,UAAU,MAAMH,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAElEe,qBAAqBR,SAAS;IAC/B;IAEAR,GAAG,uCAAuC;QACzC,MAAM,EAAEK,MAAM,EAAE,GAAGC;QAEnB,MAAMC,qBAAqB,CAAC,sCAAsC,CAAC;QACnE,MAAMC,UAAU,MAAMH,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAElEV,OAAO8B,SAAS,CAACb,SAASZ,WAAWe,KAAK,CAAC,EAAE,EAAE;YAC9Cf,WAAW0B,IAAI,CAAC,4BAA4B,IAAIC,MAAM;SACtD;IACF;IAEAvB,GAAG,0BAA0B;QAC5B,MAAM,EAAEK,MAAM,EAAEmB,KAAK,EAAE,GAAGlB;QAE1B,MAAMC,qBAAqB,CAAC,aAAa,CAAC;QAC1C,MAAMkB,iBAAiBpB,OAAOI,gBAAgB,CAAC;YAAER;SAAkB;QAEnE,MAAMuB,MAAME,SAAS,CAAC/B,UAAUgC,qBAAqB;QAErDpC,OAAO8B,SAAS,CAAC,MAAMI,gBAAgB7B,WAAWe,KAAK,CAAC,EAAE,EAAE;YAC3Df,WAAW0B,IAAI,CAAC,wBAAwB;SACxC;IACF;IAGA,SAASN,qBAAqBR,OAAmB,EAAEoB,eAAuB;QACzE,8EAA8E;QAC9ErC,OAAOsC,KAAK,CAACrB,QAAQsB,QAAQ,CAAC,EAAE,CAACA,QAAQ,CAAC,EAAE,CAACC,KAAK,CAACC,OAAO,EAAEJ;IAC7D;IAEA,eAAerB,qBAAqB0B,cAAsB;QACzD,MAAMC,gBAAgBxC,KAAKyC,OAAO,CAAC,YAAYC,OAAO,EAAE;QACxD,MAAMvC,GAAGwC,SAAS,CAACpC,kBAAkB,CAAC;6BACX,CAAC,GAAG,CAAC,CAAC,EAAEiC,cAAc;;;;KAI9C,EAAED,eAAe;;;EAGpB,CAAC;IACF;IAEA,eAAe7B,qBAAqBD,OAAe;QAClDZ,OAAO+C,OAAO,CAACnC;QACf,MAAMN,GAAG0C,EAAE,CAACpC,SAAS;YAAEqC,WAAW;YAAMC,OAAO;QAAK;QACpD,MAAM5C,GAAG6C,KAAK,CAACvC,SAAS;YAAEqC,WAAW;QAAK;IAC3C;AAED,GAAG;AAEH,SAASlC,OAAO,EACfkB,QAAQ1B,MAAM6C,UAAU,EAAE,EAC1B,GAAG,CAAC,CAAC;IACL,MAAMtC,SAAS,IAAIZ,WAAW+B;IAE9B,OAAO;QAAEnB;QAAQmB;IAAM;AACxB"}