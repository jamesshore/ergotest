{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/_test_runner_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport { assert, test } from \"../tests.js\";\nimport { TestRunner } from \"./test_runner.js\";\nimport path from \"node:path\";\nimport { TestSuite } from \"./test_suite.js\";\nimport { TestResult } from \"./test_result.js\";\nimport fs from \"node:fs/promises\";\nimport { Clock } from \"../infrastructure/clock.js\";\n\nexport default test(({ beforeEach, describe }) => {\n\n\tlet TEST_MODULE_PATH: string;\n\n\tbeforeEach(async ({ getConfig }) => {\n\t\tconst testDir = getConfig<string>(\"scratchDir\");\n\t\t\n\t\tTEST_MODULE_PATH = `${testDir}/_test_runner_module.js`;\n\t\tawait deleteTempFilesAsync(testDir);\n\t});\n\n\n\tdescribe(\"current process\", ({ it }) => {\n\n\t\tit(\"runs test modules and passes through config\", async () => {\n\t\t\tconst myConfig = { myConfig: \"my_config\" };\n\t\t\tconst { runner } = create();\n\n\t\t\tawait writeTestModuleAsync(`throw new Error(getConfig(\"myConfig\"));`);\n\t\t\tconst results = await runner.runInCurrentProcessAsync([ TEST_MODULE_PATH ], { config: myConfig });\n\n\t\t\tassertFailureMessage(results, \"my_config\");\n\t\t});\n\n\t\t// remaining behaviors not tested because of annoyances from them not being isolated\n\n\t});\n\n\n\tdescribe(\"child process\", ({ it }) => {\n\n\t\tit(\"runs test modules\", async () => {\n\t\t\tconst { runner } = create();\n\t\t\tawait writeTestModuleAsync(`// passes`);\n\n\t\t\tconst results = await runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tconst expectedResult = TestResult.suite([], [\n\t\t\t\tTestResult.suite([], [\n\t\t\t\t\tTestResult.pass(\"test\", TEST_MODULE_PATH)\n\t\t\t\t], TEST_MODULE_PATH),\n\t\t\t]);\n\n\t\t\tassert.objEqual(results, expectedResult);\n\t\t});\n\n\t\tit(\"passes through config\", async () => {\n\t\t\tconst myConfig = { myConfig: \"my_config\" };\n\t\t\tconst { runner } = create();\n\n\t\t\tawait writeTestModuleAsync(`throw new Error(getConfig(\"myConfig\"));`);\n\t\t\tconst results = await runner.runInChildProcessAsync([ TEST_MODULE_PATH ], { config: myConfig });\n\n\t\t\tassertFailureMessage(results, \"my_config\");\n\t\t});\n\n\t\tit(\"notifies caller of completed tests\", async () => {\n\t\t\tconst { runner } = create();\n\n\t\t\tconst progress: TestResult[] = [];\n\t\t\tconst notifyFn = (result: TestResult) => progress.push(result);\n\n\t\t\tawait writeTestModuleAsync(`// passes`);\n\t\t\tawait runner.runInChildProcessAsync([ TEST_MODULE_PATH ], { notifyFn });\n\n\t\t\tassert.deepEqual(progress, [\n\t\t\t\tTestResult.pass(\"test\", TEST_MODULE_PATH),\n\t\t\t]);\n\t\t});\n\n\t\tit(\"does not cache test modules from run to run\", async () => {\n\t\t\tconst { runner } = create();\n\n\t\t\tawait writeTestModuleAsync(`throw new Error(\"module was cached, and shouldn't have been\");`);\n\t\t\tawait runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tawait writeTestModuleAsync(`throw new Error(\"module was not cached\");`);\n\t\t\tconst results = await runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tassertFailureMessage(results, \"module was not cached\");\n\t\t});\n\n\t\tit(\"isolates tests\", async () => {\n\t\t\tconst { runner } = create();\n\n\t\t\tawait writeTestModuleAsync(`global._test_runner_test = true;`);\n\t\t\tawait runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tawait writeTestModuleAsync(`throw new Error(\"global should be undefined: \" + global._test_runner_test);`);\n\t\t\tconst results = await runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tassertFailureMessage(results, \"global should be undefined: undefined\");\n\t\t});\n\n\t\tit(\"supports process.chdir(), which isn't allowed in Worker threads\", async () => {\n\t\t\tconst { runner } = create();\n\n\t\t\tawait writeTestModuleAsync(`\n\t\t\t\tprocess.chdir(\".\");\n\t\t\t\tthrow new Error(\"process.chdir() should execute without error\");\n\t\t\t`);\n\t\t\tconst results = await runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tassertFailureMessage(results, \"process.chdir() should execute without error\");\n\t\t});\n\n\t\tit(\"handles uncaught promise rejections\", async () => {\n\t\t\tconst { runner } = create();\n\n\t\t\tawait writeTestModuleAsync(`Promise.reject(new Error(\"my error\"));`);\n\t\t\tconst results = await runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tassert.deepEqual(results, TestResult.suite([], [\n\t\t\t\tTestResult.fail(\"Unhandled error in tests\", new Error(\"my error\")),\n\t\t\t]));\n\t\t});\n\n\t\tit(\"handles infinite loops\", async () => {\n\t\t\tconst { runner, clock } = create();\n\n\t\t\tawait writeTestModuleAsync(`while (true);`);\n\t\t\tconst resultsPromise = runner.runInChildProcessAsync([ TEST_MODULE_PATH ]);\n\n\t\t\tawait clock.tickAsync(TestSuite.DEFAULT_TIMEOUT_IN_MS);\n\n\t\t\tassert.deepEqual(await resultsPromise, TestResult.suite([], [\n\t\t\t\tTestResult.fail(\"Test runner watchdog\", \"Detected infinite loop in tests\"),\n\t\t\t]));\n\t\t});\n\t});\n\n\n\tfunction assertFailureMessage(results: TestResult, expectedFailure: string) {\n\t\t// @ts-expect-error This line is pretty janky, but that's okay because the tests will fail if stops working\n\t\tassert.equal(results.children[0].children[0].error.message, expectedFailure);\n\t}\n\n\tasync function writeTestModuleAsync(bodySourceCode: string) {\n\t\tconst testSuitePath = path.resolve(import.meta.dirname, \"./test_suite.js\");\n\t\tawait fs.writeFile(TEST_MODULE_PATH, `\n\t\t\timport { TestSuite } from ` + `\"${testSuitePath}\";\n\t\t\t\n\t\t\texport default TestSuite.create(({ it }) => {\n\t\t\t\tit(\"test\", ({ getConfig }) => {\n\t\t\t\t\t${bodySourceCode}\n\t\t\t\t});\n\t\t\t});\n\t\t`);\n\t}\n\n\tasync function deleteTempFilesAsync(testDir: string) {\n\t\tassert.defined(testDir);\n\t\tawait fs.rm(testDir, { recursive: true, force: true });\n\t\tawait fs.mkdir(testDir, { recursive: true });\n\t}\n\n});\n\nfunction create({\n\tclock = Clock.createNull(),\n} = {}) {\n\tconst runner = new TestRunner(clock);\n\n\treturn { runner, clock };\n}"],"names":["assert","test","TestRunner","path","TestSuite","TestResult","fs","Clock","beforeEach","describe","TEST_MODULE_PATH","getConfig","testDir","deleteTempFilesAsync","it","myConfig","runner","create","writeTestModuleAsync","results","runInCurrentProcessAsync","config","assertFailureMessage","runInChildProcessAsync","expectedResult","suite","pass","objEqual","progress","notifyFn","result","push","deepEqual","fail","Error","clock","resultsPromise","tickAsync","DEFAULT_TIMEOUT_IN_MS","expectedFailure","equal","children","error","message","bodySourceCode","testSuitePath","resolve","dirname","writeFile","defined","rm","recursive","force","mkdir","createNull"],"mappings":"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"}