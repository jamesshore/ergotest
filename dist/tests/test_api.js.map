{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/tests/test_api.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\nimport { DescribeFn, DescribeOptions, ItFn, ItOptions, TestContext, TestSuite } from \"./test_suite.js\";\nimport { TestMark, TestMarkValue } from \"./test_result.js\";\nimport * as ensure from \"../util/ensure.js\";\n\nconst testContext: TestContext[] = [];\n\n/**\n * Defines a test suite. Add `.skip` to skip this test suite and `.only` to only run this test suite.\n * @param {string} [optionalName] The name of the test suite. You can skip this parameter and pass\n *   {@link optionalOptions} or {@link fn} instead.\n * @param {DescribeOptions} [optionalOptions] The test suite options. You can skip this parameter and pass {@link fn}\n *   instead.\n * @param {function} [fn] The body of the test suite. In the body, call {@link describe}, {@link it}, {@link\n *   beforeAll}, {@link afterAll}, {@link beforeEach}, and {@link afterEach} to define the tests in the suite. If\n *   undefined, this test suite will be skipped.\n * @returns {TestSuite} The test suite. Youâ€™ll typically ignore the return value.\n */\nexport function describe(\n\toptionalName?: string | DescribeOptions | DescribeFn,\n\toptionalOptions?: DescribeOptions | DescribeFn,\n\tfn?: DescribeFn,\n) {\n\treturn createSuite(optionalName, optionalOptions, fn, TestMark.none);\n}\n\ndescribe.skip = function(\n\toptionalName?: string | DescribeOptions | DescribeFn,\n\toptionalOptions?: DescribeOptions | DescribeFn,\n\tfn?: DescribeFn,\n) {\n\treturn createSuite(optionalName, optionalOptions, fn, TestMark.skip);\n};\n\ndescribe.only = function(\n\toptionalName?: string | DescribeOptions | DescribeFn,\n\toptionalOptions?: DescribeOptions | DescribeFn,\n\tfn?: DescribeFn,\n) {\n\treturn createSuite(optionalName, optionalOptions, fn, TestMark.only);\n};\n\n/**\n * Adds a test to the current test suite. Must be run inside of a {@link test} or {@link describe} function. Add\n * `.skip` to skip this test and `.only` to only run this test.\n * @param {string} name The name of the test.\n * @param {ItOptions} [optionalOptions] The test options. You can skip this parameter and pass {@link fnAsync} instead.\n * @param {function} [fnAsync] The body of the test. May be synchronous or asynchronous. If undefined, this test will be\n *   skipped.\n */\nexport function it(name: string, optionalOptions?: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it(name, optionalOptions, fnAsync, TestMark.none);\n}\n\nit.skip = function it(name: string, optionalOptions?: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it(name, optionalOptions, fnAsync, TestMark.skip);\n};\n\nit.only = function it(name: string, optionalOptions?: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"it\").it(name, optionalOptions, fnAsync, TestMark.only);\n};\n\n/**\n * Adds a function to run before all the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} fnAsync The function to run. May be synchronous or asynchronous.\n */\nexport function beforeAll(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"beforeAll\").beforeAll(optionalOptions, fnAsync);\n}\n\n/**\n * Adds a function to run after all the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} [fnAsync] The function to run. May be synchronous or asynchronous.\n */\nexport function afterAll(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"afterAll\").afterAll(optionalOptions, fnAsync);\n}\n\n/**\n * Adds a function to run bfeore each of the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} [fnAsync] The function to run. May be synchronous or asynchronous.\n */\nexport function beforeEach(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"beforeEach\").beforeEach(optionalOptions, fnAsync);\n}\n\n/**\n * Adds a function to run after each of the tests in the current test suite. Must be run inside of a {@link test} or\n * {@link describe} function.\n * @param {ItOptions} [optionalOptions] The before/after options. You can skip this parameter and pass @{link fnAsync}\n *   instead.\n * @param {function} [fnAsync] The function to run. May be synchronous or asynchronous.\n */\nexport function afterEach(optionalOptions: ItOptions | ItFn, fnAsync?: ItFn) {\n\tcurrentContext(\"afterEach\").afterEach(optionalOptions, fnAsync);\n}\n\nfunction createSuite(\n\toptionalName: string | DescribeOptions | DescribeFn | undefined,\n\toptionalOptions: DescribeOptions | DescribeFn | undefined,\n\tfn: DescribeFn | undefined,\n\tmark: TestMarkValue,\n): TestSuite {\n\treturn testContext.length === 0 ?\n\t\tTestSuite.create(optionalName, optionalOptions, fn, mark, testContext) :\n\t\tcurrentContext(\"describe\").describe(optionalName, optionalOptions, fn, mark);\n}\n\nfunction currentContext(functionName: string) {\n\tensure.that(testContext.length > 0, `${functionName}() must be run inside describe()`);\n\n\treturn testContext[testContext.length - 1];\n}"],"names":["TestSuite","TestMark","ensure","testContext","describe","optionalName","optionalOptions","fn","createSuite","none","skip","only","it","name","fnAsync","currentContext","beforeAll","afterAll","beforeEach","afterEach","mark","length","create","functionName","that"],"mappings":"AAAA,iFAAiF;AACjF,SAAoEA,SAAS,QAAQ,kBAAkB;AACvG,SAASC,QAAQ,QAAuB,mBAAmB;AAC3D,YAAYC,YAAY,oBAAoB;AAE5C,MAAMC,cAA6B,EAAE;AAErC;;;;;;;;;;CAUC,GACD,OAAO,SAASC,SACfC,YAAoD,EACpDC,eAA8C,EAC9CC,EAAe;IAEf,OAAOC,YAAYH,cAAcC,iBAAiBC,IAAIN,SAASQ,IAAI;AACpE;AAEAL,SAASM,IAAI,GAAG,SACfL,YAAoD,EACpDC,eAA8C,EAC9CC,EAAe;IAEf,OAAOC,YAAYH,cAAcC,iBAAiBC,IAAIN,SAASS,IAAI;AACpE;AAEAN,SAASO,IAAI,GAAG,SACfN,YAAoD,EACpDC,eAA8C,EAC9CC,EAAe;IAEf,OAAOC,YAAYH,cAAcC,iBAAiBC,IAAIN,SAASU,IAAI;AACpE;AAEA;;;;;;;CAOC,GACD,OAAO,SAASC,GAAGC,IAAY,EAAEP,eAAkC,EAAEQ,OAAc;IAClFC,eAAe,MAAMH,EAAE,CAACC,MAAMP,iBAAiBQ,SAASb,SAASQ,IAAI;AACtE;AAEAG,GAAGF,IAAI,GAAG,SAASE,GAAGC,IAAY,EAAEP,eAAkC,EAAEQ,OAAc;IACrFC,eAAe,MAAMH,EAAE,CAACC,MAAMP,iBAAiBQ,SAASb,SAASS,IAAI;AACtE;AAEAE,GAAGD,IAAI,GAAG,SAASC,GAAGC,IAAY,EAAEP,eAAkC,EAAEQ,OAAc;IACrFC,eAAe,MAAMH,EAAE,CAACC,MAAMP,iBAAiBQ,SAASb,SAASU,IAAI;AACtE;AAEA;;;;;;CAMC,GACD,OAAO,SAASK,UAAUV,eAAiC,EAAEQ,OAAc;IAC1EC,eAAe,aAAaC,SAAS,CAACV,iBAAiBQ;AACxD;AAEA;;;;;;CAMC,GACD,OAAO,SAASG,SAASX,eAAiC,EAAEQ,OAAc;IACzEC,eAAe,YAAYE,QAAQ,CAACX,iBAAiBQ;AACtD;AAEA;;;;;;CAMC,GACD,OAAO,SAASI,WAAWZ,eAAiC,EAAEQ,OAAc;IAC3EC,eAAe,cAAcG,UAAU,CAACZ,iBAAiBQ;AAC1D;AAEA;;;;;;CAMC,GACD,OAAO,SAASK,UAAUb,eAAiC,EAAEQ,OAAc;IAC1EC,eAAe,aAAaI,SAAS,CAACb,iBAAiBQ;AACxD;AAEA,SAASN,YACRH,YAA+D,EAC/DC,eAAyD,EACzDC,EAA0B,EAC1Ba,IAAmB;IAEnB,OAAOjB,YAAYkB,MAAM,KAAK,IAC7BrB,UAAUsB,MAAM,CAACjB,cAAcC,iBAAiBC,IAAIa,MAAMjB,eAC1DY,eAAe,YAAYX,QAAQ,CAACC,cAAcC,iBAAiBC,IAAIa;AACzE;AAEA,SAASL,eAAeQ,YAAoB;IAC3CrB,OAAOsB,IAAI,CAACrB,YAAYkB,MAAM,GAAG,GAAG,GAAGE,aAAa,gCAAgC,CAAC;IAErF,OAAOpB,WAAW,CAACA,YAAYkB,MAAM,GAAG,EAAE;AAC3C"}