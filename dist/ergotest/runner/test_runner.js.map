{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/ergotest/runner/test_runner.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../../util/ensure.js\";\nimport { importRendererAsync, TestConfig, TestOptions, TestSuite } from \"../suite/test_suite.js\";\nimport {\n\tRenderErrorFn, RunResult,\n\tSerializedTestCaseResult,\n\tSerializedTestSuiteResult,\n\tTestCaseResult, TestMark,\n\tTestResult,\n\tTestSuiteResult,\n} from \"../results/test_result.js\";\nimport child_process, { ChildProcess } from \"node:child_process\";\nimport path from \"node:path\";\nimport { Clock } from \"../../infrastructure/clock.js\";\nimport { fromModulesAsync } from \"./loader.js\";\n// dependency: ./test_runner_worker_process.js\n\nconst WORKER_FILENAME = path.resolve(import.meta.dirname, \"./test_runner_worker_process.js\");\nconst KEEPALIVE_TIMEOUT_IN_MS = TestSuite.DEFAULT_TIMEOUT_IN_MS;\n\nconst TEST_OPTIONS_TYPE = {\n\ttimeout: [ undefined, Number ],\n\tconfig: [ undefined, Object ],\n\tonTestCaseResult: [ undefined, Function ],\n\trenderer: [ undefined, String ],\n};\n\n/** For internal use only. */\nexport interface WorkerInput {\n\tmodulePaths: string[],\n\ttimeout?: number,\n\tconfig?: Record<string, unknown>\n\trenderer?: string,\n}\n\n/** For internal use only. */\nexport type WorkerOutput = {\n\ttype: \"keepalive\"\n} | {\n\ttype: \"progress\",\n\tresult: SerializedTestCaseResult,\n} | {\n\ttype: \"complete\",\n\tresult: SerializedTestSuiteResult,\n} | {\n\ttype: \"fatal\",\n\tmessage: string,\n\terr: unknown,\n}\n\n/**\n * Loads and runs tests in an isolated process.\n */\nexport class TestRunner {\n\n\t/**\n\t * Factory method. Creates the test runner.\n\t * @returns {TestRunner} The test runner.\n\t */\n\tstatic create() {\n\t\treturn new TestRunner(Clock.create());\n\t}\n\n\tprivate readonly _clock: Clock;\n\n\t/** For internal use only. (Use a factory method instead.) */\n\tconstructor(clock: Clock) {\n\t\tthis._clock = clock;\n\t}\n\n\t/**\n\t * Load and run a set of test modules in the current process. Note that, because Node.js caches modules, this means\n\t * that you can't make changes to your tests. Future test runs won't see your changes because the previous modules\n\t * will have been cached.\n\t *\n\t * @param {string[]} modulePaths The test files to load and run.\n\t * @param {object} [config] Configuration data to provide to the tests as they run.\n\t * @param {(result: TestResult) => ()} [notifyFn] A function to call each time a test completes. The `result`\n\t *   parameter describes the result of the test—whether it passed, failed, etc.\n\t * @returns {Promise<TestSuiteResult>}\n\t */\n\tasync runInCurrentProcessAsync(modulePaths: string[], options?: TestOptions): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [ Array, [ undefined, TEST_OPTIONS_TYPE]]);\n\n\t\tconst suite = await fromModulesAsync(modulePaths);\n\t\treturn await suite.runAsync(options);\n\t}\n\n\t/**\n\t * Load and run a set of test modules in an isolated child process.\n\t *\n\t * @param {string[]} modulePaths The test files to load and run.\n\t * @param {object} [options.config] Configuration data to provide to the tests as they run.\n\t * @param {(result: TestCaseResult) => ()} [options.onTestCaseResult] A function to call each time a test completes.\n\t *   The `result` parameter describes the result of the test—whether it passed, failed, etc.\n\t * @returns {Promise<TestSuiteResult>}\n\t */\n\tasync runInChildProcessAsync(modulePaths: string[], options: TestOptions = {}): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [ Array, [ undefined, TEST_OPTIONS_TYPE ]]);\n\n\t\tconst worker = child_process.fork(WORKER_FILENAME, { serialization: \"advanced\", detached: false });\n\t\ttry {\n\t\t\treturn await runTestsInWorkerProcessAsync(worker, this._clock, modulePaths, options);\n\t\t}\n\t\tfinally {\n\t\t\tawait killWorkerProcess(worker);\n\t\t}\n\t}\n\n}\n\nasync function runTestsInWorkerProcessAsync(\n\tworker: ChildProcess,\n\tclock: Clock,\n\tmodulePaths: string[],\n\t{\n\t\ttimeout,\n\t\tconfig,\n\t\tonTestCaseResult = () => {},\n\t\trenderer,\n\t}: TestOptions,\n): Promise<TestSuiteResult> {\n\tconst result = await new Promise<TestSuiteResult>((resolve, reject) => {\n\t\tconst workerData = { modulePaths, timeout, config, renderer };\n\t\tworker.send(workerData);\n\n\t\tworker.on(\"error\", error => reject(error));\n\t\tworker.on(\"close\", code => {\n\t\t\tif (code !== 0) reject(new Error(`Test worker exited with non-zero error code: ${code}`));\n\t\t});\n\n\t\timportRendererAsync(renderer)\n\t\t\t.then((renderError) => {\n\t\t\t\tconst { aliveFn, cancelFn } = detectInfiniteLoops(clock, resolve, renderError);\n\t\t\t\tworker.on(\"message\", message => {\n\t\t\t\t\thandleMessage(message as WorkerOutput, aliveFn, cancelFn, onTestCaseResult, resolve, reject);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(reject);\n\t});\n\treturn result;\n}\n\nfunction detectInfiniteLoops(clock: Clock, resolve: (result: TestSuiteResult) => void, renderError?: RenderErrorFn) {\n\tconst { aliveFn, cancelFn } = clock.keepAlive(KEEPALIVE_TIMEOUT_IN_MS, () => {\n\t\tconst errorResult = TestSuiteResult.create({\n\t\t\ttests: [\n\t\t\t\tTestCaseResult.create({\n\t\t\t\t\tit: RunResult.fail({ name: \"Test runner watchdog\", error: \"Detected infinite loop in tests\", renderError }),\n\t\t\t\t}),\n\t\t\t],\n\t\t});\n\t\tresolve(errorResult);\n\t});\n\treturn { aliveFn, cancelFn };\n}\n\nfunction handleMessage(\n\tmessage: WorkerOutput,\n\taliveFn: () => void,\n\tcancelFn: () => void,\n\tonTestCaseResult: (testResult: TestCaseResult) => void,\n\tresolve: (result: TestSuiteResult) => void,\n\treject: (err: Error) => void,\n) {\n\tswitch (message.type) {\n\t\tcase \"keepalive\":\n\t\t\taliveFn();\n\t\t\tbreak;\n\t\tcase \"progress\":\n\t\t\tonTestCaseResult(TestCaseResult.deserialize(message.result));\n\t\t\tbreak;\n\t\tcase \"fatal\":\n\t\t\tcancelFn();\n\t\t\treject(new Error(message.message, { cause: message.err }));\n\t\t\tbreak;\n\t\tcase \"complete\":\n\t\t\tcancelFn();\n\t\t\tresolve(TestSuiteResult.deserialize(message.result));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// @ts-expect-error TypeScript thinks this is unreachable, but we check it just in case\n\t\t\tensure.unreachable(`Unknown message type '${message.type}' from test runner: ${JSON.stringify(message)}`);\n\t}\n}\n\nasync function killWorkerProcess(worker: ChildProcess): Promise<void> {\n\tawait new Promise((resolve, reject) => {\n\t\tworker.kill(\"SIGKILL\");    // specific signal not tested\n\t\tworker.on(\"close\", resolve);\n\t\tworker.on(\"error\", reject);\n\t});\n}\n"],"names":["ensure","importRendererAsync","TestSuite","RunResult","TestCaseResult","TestSuiteResult","child_process","path","Clock","fromModulesAsync","WORKER_FILENAME","resolve","dirname","KEEPALIVE_TIMEOUT_IN_MS","DEFAULT_TIMEOUT_IN_MS","TEST_OPTIONS_TYPE","timeout","undefined","Number","config","Object","onTestCaseResult","Function","renderer","String","TestRunner","create","_clock","constructor","clock","runInCurrentProcessAsync","modulePaths","options","signature","arguments","Array","suite","runAsync","runInChildProcessAsync","worker","fork","serialization","detached","runTestsInWorkerProcessAsync","killWorkerProcess","result","Promise","reject","workerData","send","on","error","code","Error","then","renderError","aliveFn","cancelFn","detectInfiniteLoops","message","handleMessage","catch","keepAlive","errorResult","tests","it","fail","name","type","deserialize","cause","err","unreachable","JSON","stringify","kill"],"mappings":"AAAA,iFAAiF;AAEjF,YAAYA,YAAY,uBAAuB;AAC/C,SAASC,mBAAmB,EAA2BC,SAAS,QAAQ,yBAAyB;AACjG,SACgBC,SAAS,EAGxBC,cAAc,EAEdC,eAAe,QACT,4BAA4B;AACnC,OAAOC,mBAAqC,qBAAqB;AACjE,OAAOC,UAAU,YAAY;AAC7B,SAASC,KAAK,QAAQ,gCAAgC;AACtD,SAASC,gBAAgB,QAAQ,cAAc;AAC/C,8CAA8C;AAE9C,MAAMC,kBAAkBH,KAAKI,OAAO,CAAC,YAAYC,OAAO,EAAE;AAC1D,MAAMC,0BAA0BX,UAAUY,qBAAqB;AAE/D,MAAMC,oBAAoB;IACzBC,SAAS;QAAEC;QAAWC;KAAQ;IAC9BC,QAAQ;QAAEF;QAAWG;KAAQ;IAC7BC,kBAAkB;QAAEJ;QAAWK;KAAU;IACzCC,UAAU;QAAEN;QAAWO;KAAQ;AAChC;AAyBA;;CAEC,GACD,OAAO,MAAMC;IAEZ;;;EAGC,GACD,OAAOC,SAAS;QACf,OAAO,IAAID,WAAWjB,MAAMkB,MAAM;IACnC;IAEiBC,OAAc;IAE/B,2DAA2D,GAC3DC,YAAYC,KAAY,CAAE;QACzB,IAAI,CAACF,MAAM,GAAGE;IACf;IAEA;;;;;;;;;;EAUC,GACD,MAAMC,yBAAyBC,WAAqB,EAAEC,OAAqB,EAA4B;QACtGhC,OAAOiC,SAAS,CAACC,WAAW;YAAEC;YAAO;gBAAElB;gBAAWF;aAAkB;SAAC;QAErE,MAAMqB,QAAQ,MAAM3B,iBAAiBsB;QACrC,OAAO,MAAMK,MAAMC,QAAQ,CAACL;IAC7B;IAEA;;;;;;;;EAQC,GACD,MAAMM,uBAAuBP,WAAqB,EAAEC,UAAuB,CAAC,CAAC,EAA4B;QACxGhC,OAAOiC,SAAS,CAACC,WAAW;YAAEC;YAAO;gBAAElB;gBAAWF;aAAmB;SAAC;QAEtE,MAAMwB,SAASjC,cAAckC,IAAI,CAAC9B,iBAAiB;YAAE+B,eAAe;YAAYC,UAAU;QAAM;QAChG,IAAI;YACH,OAAO,MAAMC,6BAA6BJ,QAAQ,IAAI,CAACZ,MAAM,EAAEI,aAAaC;QAC7E,SACQ;YACP,MAAMY,kBAAkBL;QACzB;IACD;AAED;AAEA,eAAeI,6BACdJ,MAAoB,EACpBV,KAAY,EACZE,WAAqB,EACrB,EACCf,OAAO,EACPG,MAAM,EACNE,mBAAmB,KAAO,CAAC,EAC3BE,QAAQ,EACK;IAEd,MAAMsB,SAAS,MAAM,IAAIC,QAAyB,CAACnC,SAASoC;QAC3D,MAAMC,aAAa;YAAEjB;YAAaf;YAASG;YAAQI;QAAS;QAC5DgB,OAAOU,IAAI,CAACD;QAEZT,OAAOW,EAAE,CAAC,SAASC,CAAAA,QAASJ,OAAOI;QACnCZ,OAAOW,EAAE,CAAC,SAASE,CAAAA;YAClB,IAAIA,SAAS,GAAGL,OAAO,IAAIM,MAAM,CAAC,6CAA6C,EAAED,MAAM;QACxF;QAEAnD,oBAAoBsB,UAClB+B,IAAI,CAAC,CAACC;YACN,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE,GAAGC,oBAAoB7B,OAAOlB,SAAS4C;YAClEhB,OAAOW,EAAE,CAAC,WAAWS,CAAAA;gBACpBC,cAAcD,SAAyBH,SAASC,UAAUpC,kBAAkBV,SAASoC;YACtF;QACD,GACCc,KAAK,CAACd;IACT;IACA,OAAOF;AACR;AAEA,SAASa,oBAAoB7B,KAAY,EAAElB,OAA0C,EAAE4C,WAA2B;IACjH,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE,GAAG5B,MAAMiC,SAAS,CAACjD,yBAAyB;QACtE,MAAMkD,cAAc1D,gBAAgBqB,MAAM,CAAC;YAC1CsC,OAAO;gBACN5D,eAAesB,MAAM,CAAC;oBACrBuC,IAAI9D,UAAU+D,IAAI,CAAC;wBAAEC,MAAM;wBAAwBhB,OAAO;wBAAmCI;oBAAY;gBAC1G;aACA;QACF;QACA5C,QAAQoD;IACT;IACA,OAAO;QAAEP;QAASC;IAAS;AAC5B;AAEA,SAASG,cACRD,OAAqB,EACrBH,OAAmB,EACnBC,QAAoB,EACpBpC,gBAAsD,EACtDV,OAA0C,EAC1CoC,MAA4B;IAE5B,OAAQY,QAAQS,IAAI;QACnB,KAAK;YACJZ;YACA;QACD,KAAK;YACJnC,iBAAiBjB,eAAeiE,WAAW,CAACV,QAAQd,MAAM;YAC1D;QACD,KAAK;YACJY;YACAV,OAAO,IAAIM,MAAMM,QAAQA,OAAO,EAAE;gBAAEW,OAAOX,QAAQY,GAAG;YAAC;YACvD;QACD,KAAK;YACJd;YACA9C,QAAQN,gBAAgBgE,WAAW,CAACV,QAAQd,MAAM;YAClD;QACD;YACC,uFAAuF;YACvF7C,OAAOwE,WAAW,CAAC,CAAC,sBAAsB,EAAEb,QAAQS,IAAI,CAAC,oBAAoB,EAAEK,KAAKC,SAAS,CAACf,UAAU;IAC1G;AACD;AAEA,eAAef,kBAAkBL,MAAoB;IACpD,MAAM,IAAIO,QAAQ,CAACnC,SAASoC;QAC3BR,OAAOoC,IAAI,CAAC,YAAe,6BAA6B;QACxDpC,OAAOW,EAAE,CAAC,SAASvC;QACnB4B,OAAOW,EAAE,CAAC,SAASH;IACpB;AACD"}