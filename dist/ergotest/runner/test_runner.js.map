{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/ergotest/runner/test_runner.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\nimport * as ensure from \"../../util/ensure.js\";\nimport {\n\tRenderErrorFn,\n\tRunResult,\n\tSerializedTestCaseResult,\n\tSerializedTestSuiteResult,\n\tTestCaseResult,\n\tTestSuiteResult,\n} from \"../results/test_result.js\";\nimport child_process, { ChildProcess } from \"node:child_process\";\nimport path from \"node:path\";\nimport { Clock } from \"../../infrastructure/clock.js\";\nimport { fromModulesAsync } from \"./loader.js\";\nimport { importRendererAsync, TestSuite } from \"../tests/test_suite.js\";\nimport { TestOptions } from \"../tests/test_api.js\";\n// dependency: ./test_runner_worker_process.js\n\nconst WORKER_FILENAME = path.resolve(import.meta.dirname, \"./test_runner_worker_process.js\");\nconst KEEPALIVE_TIMEOUT_IN_MS = TestSuite.DEFAULT_TIMEOUT_IN_MS;\n\nconst TEST_OPTIONS_TYPE = {\n\ttimeout: [ undefined, Number ],\n\tconfig: [ undefined, Object ],\n\tonTestCaseResult: [ undefined, Function ],\n\trenderer: [ undefined, String ],\n};\n\n/** For internal use only. */\nexport interface WorkerInput {\n\tmodulePaths: string[],\n\ttimeout?: number,\n\tconfig?: Record<string, unknown>\n\trenderer?: string,\n}\n\n/** For internal use only. */\nexport type WorkerOutput = {\n\ttype: \"keepalive\"\n} | {\n\ttype: \"progress\",\n\tresult: SerializedTestCaseResult,\n} | {\n\ttype: \"complete\",\n\tresult: SerializedTestSuiteResult,\n} | {\n\ttype: \"fatal\",\n\tmessage: string,\n\terr: unknown,\n}\n\n/**\n * Loads and runs tests in an isolated process.\n */\nexport class TestRunner {\n\n\t/**\n\t * Factory method. Creates the test runner.\n\t * @returns {TestRunner} The test runner.\n\t */\n\tstatic create() {\n\t\treturn new TestRunner(Clock.create());\n\t}\n\n\tprivate readonly _clock: Clock;\n\n\t/** For internal use only. (Use a factory method instead.) */\n\tconstructor(clock: Clock) {\n\t\tthis._clock = clock;\n\t}\n\n\t/**\n\t * Load and run a set of test modules in the current process. Note that, because Node.js caches modules, this means\n\t * that you can't make changes to your tests. Future test runs won't see your changes because the previous modules\n\t * will have been cached.\n\t *\n\t * @param {string[]} modulePaths The test files to load and run.\n\t * @param {object} [config] Configuration data to provide to the tests as they run.\n\t * @param {(result: TestResult) => ()} [notifyFn] A function to call each time a test completes. The `result`\n\t *   parameter describes the result of the test—whether it passed, failed, etc.\n\t * @returns {Promise<TestSuiteResult>}\n\t */\n\tasync runInCurrentProcessAsync(modulePaths: string[], options?: TestOptions): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [ Array, [ undefined, TEST_OPTIONS_TYPE]]);\n\n\t\tconst suite = await fromModulesAsync(modulePaths);\n\t\treturn await suite.runAsync(options);\n\t}\n\n\t/**\n\t * Load and run a set of test modules in an isolated child process.\n\t *\n\t * @param {string[]} modulePaths The test files to load and run.\n\t * @param {object} [options.config] Configuration data to provide to the tests as they run.\n\t * @param {(result: TestCaseResult) => ()} [options.onTestCaseResult] A function to call each time a test completes.\n\t *   The `result` parameter describes the result of the test—whether it passed, failed, etc.\n\t * @returns {Promise<TestSuiteResult>}\n\t */\n\tasync runInChildProcessAsync(modulePaths: string[], options: TestOptions = {}): Promise<TestSuiteResult> {\n\t\tensure.signature(arguments, [ Array, [ undefined, TEST_OPTIONS_TYPE ]]);\n\n\t\tconst worker = new WorkerProcess(this._clock);\n\t\treturn await worker.runAsync(modulePaths, options);\n\t}\n\n}\n\n\nclass WorkerProcess {\n\n\tprivate _clock: Clock;\n\tprivate _worker!: ChildProcess;\n\n\tconstructor(clock: Clock) {\n\t\tthis._clock = clock;\n\t}\n\n\tasync runAsync(\n\t\tmodulePaths: string[],\n\t\t{\n\t\t\ttimeout,\n\t\t\tconfig,\n\t\t\tonTestCaseResult = () => {},\n\t\t\trenderer,\n\t\t}: TestOptions,\n\t\t): Promise<TestSuiteResult> {\n\t\tthis._worker = child_process.fork(WORKER_FILENAME, { serialization: \"advanced\", detached: false });\n\n\t\ttry {\n\t\t\tconst renderErrorFn = await importRendererAsync(renderer);\n\t\t\tthis._worker.send({ modulePaths, timeout, config, renderer });\n\t\t\treturn await this.#handleWorkerEvents(renderErrorFn, onTestCaseResult);\n\t\t}\n\t\tfinally {\n\t\t\tawait this.#killWorkerProcess();\n\t\t}\n\t}\n\n\tasync #handleWorkerEvents(\n\t\trenderError: RenderErrorFn,\n\t\tonTestCaseResult: (testCaseResult: TestCaseResult) => void,\n\t): Promise<TestSuiteResult> {\n\t\treturn await new Promise<TestSuiteResult>((resolve, reject) => {\n\t\t\tlet workerIsDone = false;\n\n\t\t\tconst { aliveFn, cancelFn } = this._clock.keepAlive(KEEPALIVE_TIMEOUT_IN_MS, () => {\n\t\t\t\treturn resolve(createWatchdogFailureAndNotifyCaller(\n\t\t\t\t\t\"Detected infinite loop in tests\",\n\t\t\t\t\trenderError,\n\t\t\t\t\tonTestCaseResult,\n\t\t\t\t));\n\t\t\t});\n\n\t\t\tthis._worker.on(\"close\", () => {\n\t\t\t\tif (!workerIsDone) {\n\t\t\t\t\tprepareForWorkerExit();\n\t\t\t\t\treturn resolve(createWatchdogFailureAndNotifyCaller(\n\t\t\t\t\t\t\"Tests exited early (probably by calling `process.exit()`)\",\n\t\t\t\t\t\trenderError,\n\t\t\t\t\t\tonTestCaseResult,\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._worker.on(\"error\", error => {\n\t\t\t\treturn reject(error);\n\t\t\t});\n\n\t\t\tthis._worker.on(\"message\", (message: WorkerOutput) => {\n\t\t\t\tswitch (message.type) {\n\t\t\t\t\tcase \"keepalive\":\n\t\t\t\t\t\taliveFn();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"progress\":\n\t\t\t\t\t\tonTestCaseResult(TestCaseResult.deserialize(message.result));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"fatal\":\n\t\t\t\t\t\tprepareForWorkerExit();\n\t\t\t\t\t\treturn reject(new Error(message.message, { cause: message.err }));\n\t\t\t\t\tcase \"complete\":\n\t\t\t\t\t\tprepareForWorkerExit();\n\t\t\t\t\t\treturn resolve(TestSuiteResult.deserialize(message.result));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// @ts-expect-error TypeScript thinks this is unreachable, but we check it just in case\n\t\t\t\t\t\tensure.unreachable(`Unknown message type '${message.type}' from test runner: ${JSON.stringify(message)}`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction prepareForWorkerExit() {\n\t\t\t\tworkerIsDone = true;\n\t\t\t\tcancelFn();\n\t\t\t}\n\t\t});\n\t}\n\n\tasync #killWorkerProcess(): Promise<void> {\n\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\tif (!this.#workerIsRunning()) return resolve();\n\n\t\t\tthis._worker.kill(\"SIGKILL\");    // specific signal not tested\n\t\t\tthis._worker.on(\"close\", resolve);\n\t\t\tthis._worker.on(\"error\", reject);\n\t\t});\n\t}\n\n\t#workerIsRunning() {\n\t\treturn this._worker.exitCode === null;\n\t}\n\n}\n\nfunction createWatchdogFailureAndNotifyCaller(\n\terrorMessage: string,\n\trenderError: RenderErrorFn | undefined,\n\tonTestCaseResult: (result: TestCaseResult) => void,\n) {\n\tconst testCaseResult = TestCaseResult.create({\n\t\tit: RunResult.fail({ name: [ \"Test runner watchdog\" ], error: errorMessage, renderError }),\n\t});\n\tconst testSuiteResult = TestSuiteResult.create({\n\t\ttests: [ testCaseResult ],\n\t});\n\tonTestCaseResult(testCaseResult);\n\treturn testSuiteResult;\n}"],"names":["ensure","RunResult","TestCaseResult","TestSuiteResult","child_process","path","Clock","fromModulesAsync","importRendererAsync","TestSuite","WORKER_FILENAME","resolve","dirname","KEEPALIVE_TIMEOUT_IN_MS","DEFAULT_TIMEOUT_IN_MS","TEST_OPTIONS_TYPE","timeout","undefined","Number","config","Object","onTestCaseResult","Function","renderer","String","TestRunner","create","_clock","constructor","clock","runInCurrentProcessAsync","modulePaths","options","signature","arguments","Array","suite","runAsync","runInChildProcessAsync","worker","WorkerProcess","_worker","fork","serialization","detached","renderErrorFn","send","renderError","Promise","reject","workerIsDone","aliveFn","cancelFn","keepAlive","createWatchdogFailureAndNotifyCaller","on","prepareForWorkerExit","error","message","type","deserialize","result","Error","cause","err","unreachable","JSON","stringify","kill","exitCode","errorMessage","testCaseResult","it","fail","name","testSuiteResult","tests"],"mappings":"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"}