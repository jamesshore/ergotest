{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/ergotest/runner/loader.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\nimport * as ensure from \"../../util/ensure.js\";\nimport { TestMark } from \"../results/test_result.js\";\nimport path from \"node:path\";\nimport { FailureTestCase } from \"../tests/test_case.js\";\nimport { TestSuite } from \"../tests/test_suite.js\";\n\n/**\n * Convert a list of test modules into a test suite. Each module needs to export a test suite by using\n * {@link TestSuite.create}.\n * @param {string[]} moduleFilenames The filenames of the test modules.\n * @returns {TestSuite} The test suite.\n */\nexport async function fromModulesAsync(moduleFilenames: string[]): Promise<TestSuite> {\n\tensure.signature(arguments, [ Array ]);\n\n\tconst suites = await Promise.all(moduleFilenames.map(filename => loadModuleAsync(filename)));\n\treturn TestSuite.create({ tests: suites });\n\n\tasync function loadModuleAsync(filename: string): Promise<TestSuite> {\n\t\tconst errorName = `error when importing ${path.basename(filename)}`;\n\n\t\tif (!path.isAbsolute(filename)) {\n\t\t\treturn createFailure(errorName, `Test module filenames must use absolute paths: ${filename}`);\n\t\t}\n\t\ttry {\n\t\t\tconst { default: suite } = await import(filename);\n\t\t\tif (suite instanceof TestSuite) {\n\t\t\t\tsuite._setFilename(filename);\n\t\t\t\treturn suite;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn createFailure(errorName, `Test module doesn't export a test suite: ${filename}`, filename);\n\t\t\t}\n\t\t}\n\t\tcatch(err) {\n\t\t\tconst code = (err as { code: string })?.code;\n\t\t\tif (code === \"ERR_MODULE_NOT_FOUND\") {\n\t\t\t\treturn createFailure(errorName, `Test module not found: ${filename}`, filename);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn createFailure(errorName, err, filename);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction createFailure(name: string, error: unknown, filename?: string) {\n\t\treturn TestSuite.create({ tests: [ new FailureTestCase([ name ], error, filename) ] });\n\t}\n}\n"],"names":["ensure","path","FailureTestCase","TestSuite","fromModulesAsync","moduleFilenames","signature","arguments","Array","suites","Promise","all","map","filename","loadModuleAsync","create","tests","errorName","basename","isAbsolute","createFailure","default","suite","_setFilename","err","code","name","error"],"mappings":"AAAA,iFAAiF;AACjF,YAAYA,YAAY,uBAAuB;AAE/C,OAAOC,UAAU,YAAY;AAC7B,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAASC,SAAS,QAAQ,yBAAyB;AAEnD;;;;;CAKC,GACD,OAAO,eAAeC,iBAAiBC,eAAyB;IAC/DL,OAAOM,SAAS,CAACC,WAAW;QAAEC;KAAO;IAErC,MAAMC,SAAS,MAAMC,QAAQC,GAAG,CAACN,gBAAgBO,GAAG,CAACC,CAAAA,WAAYC,gBAAgBD;IACjF,OAAOV,UAAUY,MAAM,CAAC;QAAEC,OAAOP;IAAO;IAExC,eAAeK,gBAAgBD,QAAgB;QAC9C,MAAMI,YAAY,CAAC,qBAAqB,EAAEhB,KAAKiB,QAAQ,CAACL,WAAW;QAEnE,IAAI,CAACZ,KAAKkB,UAAU,CAACN,WAAW;YAC/B,OAAOO,cAAcH,WAAW,CAAC,+CAA+C,EAAEJ,UAAU;QAC7F;QACA,IAAI;YACH,MAAM,EAAEQ,SAASC,KAAK,EAAE,GAAG,MAAM,MAAM,CAACT;YACxC,IAAIS,iBAAiBnB,WAAW;gBAC/BmB,MAAMC,YAAY,CAACV;gBACnB,OAAOS;YACR,OACK;gBACJ,OAAOF,cAAcH,WAAW,CAAC,yCAAyC,EAAEJ,UAAU,EAAEA;YACzF;QACD,EACA,OAAMW,KAAK;YACV,MAAMC,OAAQD,KAA0BC;YACxC,IAAIA,SAAS,wBAAwB;gBACpC,OAAOL,cAAcH,WAAW,CAAC,uBAAuB,EAAEJ,UAAU,EAAEA;YACvE,OACK;gBACJ,OAAOO,cAAcH,WAAWO,KAAKX;YACtC;QACD;IACD;IAEA,SAASO,cAAcM,IAAY,EAAEC,KAAc,EAAEd,QAAiB;QACrE,OAAOV,UAAUY,MAAM,CAAC;YAAEC,OAAO;gBAAE,IAAId,gBAAgB;oBAAEwB;iBAAM,EAAEC,OAAOd;aAAW;QAAC;IACrF;AACD"}