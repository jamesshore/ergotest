{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/ergotest/test_result.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../util/ensure.js\";\nimport util from \"node:util\";\nimport { renderError as renderErrorFn, TestRenderer } from \"./test_renderer.js\";\n\nexport const TestStatus = {\n\tpass: \"pass\",\n\tfail: \"fail\",\n\tskip: \"skip\",\n\ttimeout: \"timeout\",\n} as const;\n\nexport type TestStatusValue = typeof TestStatus[keyof typeof TestStatus];\n\nexport const TestMark = {\n\tnone: \"none\",\n\tskip: \"skip\",\n\tonly: \"only\",\n} as const;\n\nexport type TestMarkValue = typeof TestMark[keyof typeof TestMark];\n\nexport interface TestCount {\n\tpass: number;\n\tfail: number;\n\tskip: number;\n\ttimeout: number;\n\ttotal: number;\n}\n\nexport type SerializedTestResult = SerializedTestSuiteResult | SerializedTestCaseResult;\n\nexport interface SerializedTestSuiteResult {\n\ttype: \"TestSuiteResult\";\n\tname: string[];\n\tmark: TestMarkValue;\n\tfilename?: string;\n\ttests: SerializedTestResult[];\n\tbeforeAll: SerializedTestCaseResult[];\n\tafterAll: SerializedTestCaseResult[];\n}\n\nexport interface SerializedTestCaseResult {\n\ttype: \"TestCaseResult\";\n\tname: string[];\n\tmark: TestMarkValue;\n\tfilename?: string;\n\tstatus: TestStatusValue;\n\terrorMessage?: string;\n\terrorRender?: unknown;\n\ttimeout?: number;\n\tbeforeEach: SerializedTestCaseResult[];\n\tafterEach: SerializedTestCaseResult[];\n}\n\nexport type RenderErrorFn = (names: string[], error: unknown, mark: TestMarkValue, filename?: string) => unknown;\n\n/**\n * The result of a test run. Can be a single test case or a suite of nested test results.\n */\nexport abstract class TestResult {\n\n\t/**\n\t * Create a TestResult for a suite of tests.\n\t * @param {string|string[]} name The name of the test. Can be a list of names.\n\t * @param {TestResult[]} tests The nested tests in this suite (can be test suites or individual test cases).\n\t * @param {TestCaseResult[]} [options.beforeAll] The beforeAll() blocks in this suite.\n\t * @param {TestCaseResult[]} [options.afterAll] The afterAll() blocks in this suite.\n\t * @param {string} [options.filename] The file that contained this suite (optional).\n\t * @param {TestMarkValue} [options.mark] Whether this suite was marked with `.skip`, `.only`, or nothing.\n\t * @returns {TestSuiteResult} The result.\n\t */\n\tstatic suite(\n\t\tname: string | string[],\n\t\ttests: TestResult[],\n\t\t{\n\t\t\tbeforeAll = [],\n\t\t\tafterAll = [],\n\t\t\tfilename,\n\t\t\tmark = TestMark.none\n\t\t}: {\n\t\t\tbeforeAll?: TestCaseResult[],\n\t\t\tafterAll?: TestCaseResult[],\n\t\t\tfilename?: string,\n\t\t\tmark?: TestMarkValue,\n\t\t} = {},\n\t): TestSuiteResult {\n\t\tensure.signature(arguments, [\n\t\t\t[ String, Array ],\n\t\t\tArray,\n\t\t\t[ undefined, {\n\t\t\t\tbeforeAll: [ undefined, Array ],\n\t\t\t\tafterAll: [ undefined, Array ],\n\t\t\t\tfilename: [ undefined, String ],\n\t\t\t\tmark: [ undefined, String ]\n\t\t\t}],\n\t\t]);\n\n\t\tif (!Array.isArray(name)) name = [ name ];\n\t\treturn new TestSuiteResult(name, tests, beforeAll, afterAll, mark, filename);\n\t}\n\n\t/**\n\t * Create a TestResult for a test that passed.\n\t * @param {string|string[]} name The name of the test. Can be a list of names.\n\t * @param {TestCaseResult[]} [options.beforeEach] The beforeEach() blocks for this test.\n\t * @param {TestCaseResult[]} [options.afterEach] The afterEach() blocks for this test.\n\t * @param {string} [options.filename] The file that contained this test (optional).\n\t * @param {TestMarkValue} [options.mark] Whether this test was marked with `.skip`, `.only`, or nothing.\n\t * @returns {TestCaseResult} The result.\n\t */\n\tstatic pass(\n\t\tname: string | string[],\n\t\t{\n\t\t\tbeforeEach,\n\t\t\tafterEach,\n\t\t\tfilename,\n\t\t\tmark,\n\t\t}: {\n\t\t\tbeforeEach?: TestCaseResult[],\n\t\t\tafterEach?: TestCaseResult[],\n\t\t\tfilename?: string,\n\t\t\tmark?: TestMarkValue,\n\t\t} = {}\n\t): TestCaseResult {\n\t\tensure.signature(arguments, [\n\t\t\t[ String, Array ],\n\t\t\t[ undefined, {\n\t\t\t\tbeforeEach: [ undefined, Array ],\n\t\t\t\tafterEach: [ undefined, Array ],\n\t\t\t\tfilename: [ undefined, String ],\n\t\t\t\tmark: [ undefined, String ]\n\t\t\t}],\n\t\t]);\n\n\t\tif (!Array.isArray(name)) name = [ name ];\n\t\treturn new TestCaseResult({ name, status: TestStatus.pass, beforeEach, afterEach, filename, mark });\n\t}\n\n\t/**\n\t * Create a TestResult for a test that failed.\n\t * @param {string|string[]} name The name of the test. Can be a list of names.\n\t * @param {unknown} error The error that occurred.\n\t * @param {(name: string, error: unknown, mark: TestMarkValue, filename?: string) => unknown} [options.renderError]\n\t *   The function to use to render the error into a string (defaults to {@link renderError})\n *   @param {TestCaseResult[]} [options.beforeEach] The beforeEach() blocks for this test.\n\t * @param {TestCaseResult[]} [options.afterEach] The afterEach() blocks for this test.\n\t * @param {string} [options.filename] The file that contained this test (optional).\n\t * @param {TestMarkValue} [options.mark] Whether this test was marked with `.skip`, `.only`, or nothing.\n\t *   function will be called and the results put into {@link errorRender}.\n\t * @returns {TestCaseResult} The result.\n\t */\n\tstatic fail(\n\t\tname: string | string[],\n\t\terror: unknown,\n\t\t{\n\t\t\trenderError = renderErrorFn,\n\t\t\tbeforeEach,\n\t\t\tafterEach,\n\t\t\tfilename,\n\t\t\tmark,\n\t\t}: {\n\t\t\trenderError?: RenderErrorFn\n\t\t\tbeforeEach?: TestCaseResult[],\n\t\t\tafterEach?: TestCaseResult[],\n\t\t\tfilename?: string,\n\t\t\tmark?: TestMarkValue,\n\t\t} = {},\n\t): TestCaseResult {\n\t\tensure.signature(arguments, [\n\t\t\t[ String, Array ],\n\t\t\tensure.ANY_TYPE,\n\t\t\t[ undefined, {\n\t\t\t\trenderError: [ undefined, Function ],\n\t\t\t\tbeforeEach: [ undefined, Array ],\n\t\t\t\tafterEach: [ undefined, Array ],\n\t\t\t\tfilename: [ undefined, String ],\n\t\t\t\tmark: [ undefined, String ],\n\t\t\t}],\n\t\t]);\n\n\t\tif (!Array.isArray(name)) name = [ name ];\n\n\t\tlet errorMessage: string;\n\t\tif (error instanceof Error) errorMessage = error.message ?? \"\";\n\t\telse if (typeof error === \"string\") errorMessage = error;\n\t\telse errorMessage = util.inspect(error, { depth: Infinity });\n\n\t\tconst errorRender = renderError(name, error, mark ?? TestMark.none, filename);\n\n\t\treturn new TestCaseResult(\n\t\t\t{ name, status: TestStatus.fail, errorMessage, errorRender, beforeEach, afterEach, filename, mark }\n\t\t);\n\t}\n\n\t/**\n\t * Create a TestResult for a test that was skipped.\n\t * @param {string|string[]} name The name of the test. Can be a list of names.\n\t * @param {TestCaseResult[]} [options.beforeEach] The beforeEach() blocks for this test.\n\t * @param {TestCaseResult[]} [options.afterEach] The afterEach() blocks for this test.\n\t * @param {string} [options.filename] The file that contained this test (optional).\n\t * @param {TestMarkValue} [options.mark] Whether this test was marked with `.skip`, `.only`, or nothing.\n\t * @returns {TestCaseResult} The result.\n\t */\n\tstatic skip(\n\t\tname: string | string[],\n\t\t{\n\t\t\tbeforeEach,\n\t\t\tafterEach,\n\t\t\tfilename,\n\t\t\tmark,\n\t\t}: {\n\t\t\tbeforeEach?: TestCaseResult[],\n\t\t\tafterEach?: TestCaseResult[],\n\t\t\tfilename?: string,\n\t\t\tmark?: TestMarkValue,\n\t\t} = {}\n\t): TestCaseResult {\n\t\tensure.signature(arguments, [\n\t\t\t[ String, Array ],\n\t\t\t[ undefined, {\n\t\t\t\tbeforeEach: [ undefined, Array ],\n\t\t\t\tafterEach: [ undefined, Array ],\n\t\t\t\tfilename: [ undefined, String ],\n\t\t\t\tmark: [ undefined, String ]\n\t\t\t}],\n\t\t]);\n\n\t\tif (!Array.isArray(name)) name = [ name ];\n\t\treturn new TestCaseResult({ name, status: TestStatus.skip, beforeEach, afterEach, filename, mark });\n\t}\n\n\t/**\n\t * Create a TestResult for a test that timed out.\n\t * @param {string|string[]} name The name of the test. Can be a list of names.\n\t * @param {number} timeout The length of the timeout.\n\t * @param {TestCaseResult[]} [options.beforeEach] The beforeEach() blocks for this test.\n\t * @param {TestCaseResult[]} [options.afterEach] The afterEach() blocks for this test.\n\t * @param {string} [options.filename] The file that contained this test (optional).\n\t * @param {TestMarkValue} [options.mark] Whether this test was marked with `.skip`, `.only`, or nothing.\n\t * @returns {TestCaseResult} The result.\n\t */\n\tstatic timeout(\n\t\tname: string | string[],\n\t\ttimeout: number,\n\t\t{\n\t\t\tbeforeEach,\n\t\t\tafterEach,\n\t\t\tfilename,\n\t\t\tmark,\n\t\t}: {\n\t\t\tbeforeEach?: TestCaseResult[],\n\t\t\tafterEach?: TestCaseResult[],\n\t\t\tfilename?: string,\n\t\t\tmark?: TestMarkValue,\n\t\t} = {},\n\t): TestCaseResult {\n\t\tensure.signature(arguments, [\n\t\t\t[ String, Array ],\n\t\t\tNumber,\n\t\t\t[ undefined, {\n\t\t\t\tbeforeEach: [ undefined, Array ],\n\t\t\t\tafterEach: [ undefined, Array ],\n\t\t\t\tfilename: [ undefined, String ],\n\t\t\t\tmark: [ undefined, String ]\n\t\t\t}],\n\t\t]);\n\t\t\n\t\tif (!Array.isArray(name)) name = [ name ];\n\t\treturn new TestCaseResult({ name, status: TestStatus.timeout, timeout, beforeEach, afterEach, filename, mark });\n\t}\n\n\t/**\n\t * For use by {@link TestRunner}. Converts a serialized test result back into a TestResult instance.\n\t * @param {objects} serializedTestResult The serialized test result.\n\t * @returns {TestSuiteResult | TestCaseResult} The result object.\n\t * @see TestSuiteResult#serialize\n\t * @see TestCaseResult#serialize\n\t */\n\tstatic deserialize(serializedTestResult: SerializedTestResult): TestResult {\n\t\tensure.signatureMinimum(arguments, [{ type: String }]);\n\n\t\tconst type = serializedTestResult.type;\n\t\tswitch (type) {\n\t\t\tcase \"TestSuiteResult\": return TestSuiteResult.deserialize(serializedTestResult);\n\t\t\tcase \"TestCaseResult\": return TestCaseResult.deserialize(serializedTestResult);\n\t\t\tdefault: ensure.unreachable(`Unrecognized type '${type}' in serialized test result: ${serializedTestResult}`);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {string | undefined} The file that contained the test (or suite), if any.\n\t */\n\tabstract get filename(): string | undefined;\n\n\t/**\n\t * @returns {string []} The name of the test (or suite), and all enclosing suites, with the outermost suite first.\n\t *   Does not include the file name.\n\t */\n\tabstract get name(): string[];\n\n\t/**\n\t * @return { TestMark } Whether the test (or suite) was explicitly marked with `.skip`, `.only`, or not at all.\n\t */\n\tabstract get mark(): TestMarkValue;\n\n\t/**\n\t * @returns {TestCaseResult[]} All the test results, excluding test suites, flattened into a single list.\n\t */\n\tabstract allTests(): TestCaseResult[];\n\n\t/**\n\t * @returns {TestCaseResult[]} All test results, with a mark (.only, etc.) that matches the requested marks,\n\t *   flattened into a single list, including test suites. However, if you access the properties of the test suites,\n\t *   such as {@link TestSuiteResult.tests}, those properties won’t be filtered.\n\t */\n\tabstract allMatchingMarks(...marks: TestMarkValue[]): TestResult[];\n\n\t/**\n\t * Convert this result into a bare object later deserialization.\n\t * @returns {SerializedTestSuiteResult} The serialized object.\n\t * @see TestResult.deserialize\n\t */\n\tabstract serialize(): SerializedTestResult;\n\n\t/**\n\t * Determine if this test result is identical to another test result. To be identical, they must have the same\n\t * results, in the same order, with the same names, filenames, and marks (.only etc.).\n\t * @param {any} that The thing to compare against\n\t * @returns {boolean}\n\t */\n\tabstract equals(that: TestResult): boolean;\n}\n\n/**\n * The result of running a test suite.\n */\nexport class TestSuiteResult extends TestResult {\n\n\t/**\n\t * For use by {@link TestRunner}. Converts a serialized test result back into a TestResult instance.\n\t * @param {SerializedTestSuiteResult} serializedTestResult The serialized test result.\n\t * @returns {TestSuiteResult} The result object.\n\t * @see TestResult#deserialize\n\t */\n\tstatic deserialize(suite: SerializedTestSuiteResult): TestSuiteResult {\n\t\tensure.signature(arguments, [{\n\t\t\ttype: String,\n\t\t\tname: Array,\n\t\t\tmark: String,\n\t\t\tfilename: [ undefined, String ],\n\t\t\ttests: Array,\n\t\t\tbeforeAll: Array,\n\t\t\tafterAll: Array,\n\t\t}], [ \"serialized TestSuiteResult\" ]);\n\n\t\tconst { name, filename, mark, tests, beforeAll, afterAll } = suite;\n\t\tconst deserializedTests = tests.map(test => TestResult.deserialize(test));\n\t\tconst deserializedBeforeAll = beforeAll.map(test => TestCaseResult.deserialize(test));\n\t\tconst deserializedAfterAll = afterAll.map(test => TestCaseResult.deserialize(test));\n\n\t\treturn new TestSuiteResult(name, deserializedTests, deserializedBeforeAll, deserializedAfterAll, mark, filename);\n\t}\n\n\tprivate readonly _name: string[];\n\tprivate readonly _tests: TestResult[];\n\tprivate readonly _beforeAll: TestCaseResult[];\n\tprivate readonly _afterAll: TestCaseResult[];\n\tprivate readonly _mark: TestMarkValue;\n\tprivate readonly _filename?: string;\n\n\t/** Internal use only. (Use {@link TestResult.suite} instead.) */\n\tconstructor(name: string[], tests: TestResult[], beforeAll: TestCaseResult[], afterAll: TestCaseResult[], mark: TestMarkValue, filename?: string) {\n\t\tsuper();\n\t\tthis._name = name;\n\t\tthis._tests = tests;\n\t\tthis._beforeAll = beforeAll;\n\t\tthis._afterAll = afterAll;\n\t\tthis._mark = mark;\n\t\tthis._filename = filename;\n\t}\n\n\tget name(): string[] {\n\t\treturn this._name;\n\t}\n\n\t/**\n\t * @returns {string | undefined} The file that contained the suite, if any.\n\t */\n\tget filename(): string | undefined {\n\t\treturn this._filename;\n\t}\n\n\t/**\n\t * @return { TestMarkValue } Whether the test was explicitly marked with `.skip`, `.only`, or not at all.\n\t */\n\tget mark(): TestMarkValue {\n\t\treturn this._mark;\n\t}\n\n\t/**\n\t * @returns { TestResult[] } The tests in this suite, which can either be test case results or test suite results.\n\t */\n\tget tests(): TestResult[] {\n\t\treturn this._tests;\n\t}\n\n\t/**\n\t * @returns { TestCaseResult[] } The beforeAll() blocks for this suite.\n\t */\n\tget beforeAll(): TestCaseResult[] {\n\t\treturn this._beforeAll;\n\t}\n\n\t/**\n\t * @returns { TestCaseResult[] } The afterAll() blocks for this suite.\n\t */\n\tget afterAll(): TestCaseResult[] {\n\t\treturn this._afterAll;\n\t}\n\n\t/**\n\t * Convert this suite to a nicely-formatted string. The string describes the tests that have marks (such as .only)\n\t * and provides details about the tests that have failed or timed out. It doesn't provide any details about the tests\n\t * that have passed or been skipped, except for the ones that have marks. After the details, it displays a summary of\n\t * the number of tests that have passed, failed, etc., and the average time required per test.\n\t *\n\t * This is a convenience method. For more control over rendering, use {@link TestRenderer} instead.\n\t *\n\t * @param {string} [preamble=\"\"] A string to write before the test results, but only if there are any marks or errors.\n\t * @param {number} elapsedMs The total time required to run the test suite, in milliseconds.\n\t *   If there are no marks or errors, the preamble is ignored. Defaults to an empty string.\n\t * @returns The formatted string.\n\t */\n\trender(preamble: string = \"\", elapsedMs?: number): string {\n\t\tensure.signature(arguments, [ [ undefined, String ], [ undefined, Number ]]);\n\n\t\tconst renderer = TestRenderer.create();\n\t\tconst marks = this.allMarkedResults();\n\t\tconst errors = this.allMatchingTests(TestStatus.fail, TestStatus.timeout);\n\n\t\tconst markRender = renderer.renderMarksAsLines(marks);\n\t\tconst errorRender = renderer.renderAsMultipleLines(errors);\n\t\tconst summaryRender = renderer.renderSummary(this, elapsedMs);\n\n\t\tif (marks.length > 0 && errors.length > 0) {\n\t\t\treturn preamble + markRender + \"\\n\\n\\n\" + errorRender + \"\\n\\n\" + summaryRender;\n\t\t}\n\t\telse if (marks.length > 0) {\n\t\t\treturn preamble + markRender + \"\\n\\n\" + summaryRender;\n\t\t}\n\t\telse if (errors.length > 0) {\n\t\t\treturn preamble + errorRender + \"\\n\\n\" + summaryRender;\n\t\t}\n\t\telse {\n\t\t\treturn summaryRender;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {TestCaseResult[]} All the test results, excluding test suites, flattened into a single list.\n\t */\n\tallTests(): TestCaseResult[] {\n\t\tensure.signature(arguments, []);\n\n\t\tconst tests: TestCaseResult[] = [];\n\t\tconst collect = (result: TestResult) => {\n\t\t\tresult.allTests().forEach(subTest => tests.push(subTest));\n\t\t};\n\n\t\tthis._beforeAll.forEach(collect);\n\t\tthis._afterAll.forEach(collect);\n\t\tthis._tests.forEach(collect);\n\n\t\treturn tests;\n\t}\n\n\t/**\n\t * Finds all the test results that match the provided statuses.\n\t * @param {TestStatus[]} statuses The statuses to match.\n\t * @returns {TestCaseResult[]} The test results.\n\t */\n\tallMatchingTests(...statuses: TestStatusValue[]): TestCaseResult[] {\n\t\treturn this.allTests().filter(test => statuses.includes(test.status));\n\t}\n\n\t/**\n\t * @returns {TestCaseResult[]} All test results, with a mark (.only, etc.) that matches the requested marks,\n\t *   flattened into a single list, including test suites. However, if you access the properties of the test suites,\n\t *   such as {@link TestSuiteResult.tests}, those properties won’t be filtered.\n\t */\n\tallMarkedResults(): TestResult[] {\n\t\tensure.signature(arguments, []);\n\n\t\tconst allMarks = new Set(Object.values(TestMark));\n\t\tallMarks.delete(TestMark.none);\n\t\treturn this.allMatchingMarks.apply(this, [ ...allMarks ]);\n\t}\n\n\tallMatchingMarks(...marks: TestMarkValue[]): TestResult[] {\n\t\tensureValidMarks(marks);\n\n\t\tconst results = new Set<TestResult>();\n\t\tif (marks.includes(this.mark)) results.add(this);\n\n\t\tconst collect = (result: TestResult) => {\n\t\t\tif (marks.includes(result.mark)) results.add(result);\n\t\t\tresult.allMatchingMarks.apply(result, marks).forEach(subResult => results.add(subResult));\n\t\t};\n\n\t\tthis._beforeAll.forEach(collect);\n\t\tthis._afterAll.forEach(collect);\n\t\tthis._tests.forEach(collect);\n\n\t\treturn [ ...results ];\n\t}\n\n\t/**\n\t * @returns {string[]} All the test files with 100% passing tests--nothing that was skipped, failed, or timed out.\n\t */\n\tallPassingFiles(): string[] {\n\t\tensure.signature(arguments, []);\n\n\t\tconst allFiles = new Set<string>();\n\t\tconst notPassFiles = new Set<string>();\n\t\tthis.allTests()\n\t\t\t.filter(test => test.filename !== undefined)\n\t\t\t.forEach(test => {\n\t\t\t\tallFiles.add(test.filename!);\n\t\t\t\tif (!test.isPass()) notPassFiles.add(test.filename!);\n\t\t\t});\n\n\t\treturn [ ...differencePolyfill(allFiles, notPassFiles) ];\n\n\t\tfunction differencePolyfill<T>(leftSet: Set<T>, rightSet: Set<T>): Set<T> {\n\t\t\t// Included in Node v22.0; remove this polyfill and replace with left.difference(right) when that enters LTS\n\t\t\treturn new Set([ ...leftSet ].filter(value => !rightSet.has(value)));\n\t\t}\n\t}\n\n\t/**\n\t * @returns {TestCount} A summary count of this suite's results. Includes a count of each type of test result and the\n\t *   total number of tests.\n\t */\n\tcount(): TestCount {\n\t\tconst count = {\n\t\t\t[TestStatus.pass]: 0,\n\t\t\t[TestStatus.fail]: 0,\n\t\t\t[TestStatus.skip]: 0,\n\t\t\t[TestStatus.timeout]: 0,\n\t\t\ttotal: 0,\n\t\t};\n\n\t\tthis.allTests().forEach(test => {\n\t\t\tcount[test.status]++;\n\t\t\tcount.total++;\n\t\t});\n\n\t\treturn count;\n\t}\n\n\t/**\n\t * Convert this suite into a bare object later deserialization.\n\t * @returns {SerializedTestSuiteResult} The serialized object.\n\t * @see TestResult.deserialize\n\t */\n\tserialize(): SerializedTestSuiteResult {\n\t\treturn {\n\t\t\ttype: \"TestSuiteResult\",\n\t\t\tname: this._name,\n\t\t\tmark: this._mark,\n\t\t\tfilename: this._filename,\n\t\t\ttests: this._tests.map(test => test.serialize()),\n\t\t\tbeforeAll: this._beforeAll.map(test => test.serialize()),\n\t\t\tafterAll: this._afterAll.map(test => test.serialize()),\n\t\t};\n\t}\n\n\tequals(that: TestResult): boolean {\n\t\tif (!(that instanceof TestSuiteResult)) return false;\n\t\tif (this._mark !== that._mark) return false;\n\n\t\tif (!compareTestResults(this._tests, that._tests)) return false;\n\t\tif (!compareTestResults(this._beforeAll, that._beforeAll)) return false;\n\t\tif (!compareTestResults(this._afterAll, that._afterAll)) return false;\n\n\t\tconst sameName = util.isDeepStrictEqual(this._name, that._name);\n\t\treturn sameName && this._filename === that._filename;\n\n\t\tfunction compareTestResults(thisTests: TestResult[], thatTests: TestResult[]): boolean {\n\t\t\tif (thisTests.length !== thatTests.length) return false;\n\t\t\tfor (let i = 0; i < thisTests.length; i++) {\n\t\t\t\tconst thisResult = thisTests[i]!;\n\t\t\t\tconst thatResult = thatTests[i]!;\n\t\t\t\tif (!thisResult.equals(thatResult)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n}\n\n\n/**\n * The result of running an individual test.\n */\nexport class TestCaseResult extends TestResult {\n\n\t/**\n\t * For use by {@link TestRunner}. Converts a serialized test result back into a TestResult instance.\n\t * @param {object} serializedTestResult The serialized test result.\n\t * @returns {TestCaseResult} The result object.\n\t * @see TestResult#deserialize\n\t */\n\tstatic deserialize(serializedResult: SerializedTestCaseResult): TestCaseResult {\n\t\tensure.signature(arguments, [{\n\t\t\ttype: String,\n\t\t\tname: Array,\n\t\t\tmark: String,\n\t\t\tfilename: [ undefined, String ],\n\t\t\tstatus: String,\n\t\t\terrorMessage: [ undefined, String ],\n\t\t\terrorRender: ensure.ANY_TYPE,\n\t\t\ttimeout: [ undefined, Number ],\n\t\t\tbeforeEach: [ undefined, Array ],\n\t\t\tafterEach: [ undefined, Array ],\n\t\t}], [ \"serialized TestCaseResult\" ]);\n\n\t\tconst deserializedBeforeEach = serializedResult.beforeEach.map(test => TestCaseResult.deserialize(test));\n\t\tconst deserializedAfterEach = serializedResult.afterEach.map(test => TestCaseResult.deserialize(test));\n\n\t\treturn new TestCaseResult({\n\t\t\t...serializedResult,\n\t\t\tbeforeEach: deserializedBeforeEach,\n\t\t\tafterEach: deserializedAfterEach\n\t\t});\n\t}\n\n\tprivate _name: string[];\n\tprivate _filename?: string;\n\tpublic _beforeEach: TestCaseResult[];\n\tpublic _afterEach: TestCaseResult[];\n\tpublic _status: TestStatusValue;\n\tprivate _mark: TestMarkValue;\n\tprivate _errorMessage?: string;\n\tprivate _errorRender?: unknown;\n\tprivate _timeout?: number;\n\n\t/** Internal use only. (Use {@link TestResult} factory methods instead.) */\n\tconstructor(\n\t\t{\n\t\t\tname,\n\t\t\tstatus,\n\t\t\terrorMessage,\n\t\t\terrorRender,\n\t\t\ttimeout,\n\t\t\tbeforeEach = [],\n\t\t\tafterEach = [],\n\t\t\tfilename,\n\t\t\tmark,\n\t\t}: {\n\t\t\tname: string[],\n\t\t\tstatus: TestStatusValue,\n\t\t\terrorMessage?: string,\n\t\t\terrorRender?: unknown,\n\t\t\ttimeout?: number,\n\t\t\tbeforeEach?: TestCaseResult[],\n\t\t\tafterEach?: TestCaseResult[],\n\t\t\tfilename?: string,\n\t\t\tmark?: TestMarkValue\n\t\t},\n\t) {\n\t\tsuper();\n\t\tthis._name = name;\n\t\tthis._filename = filename;\n\t\tthis._beforeEach = beforeEach;\n\t\tthis._afterEach = afterEach;\n\t\tthis._status = status;\n\t\tthis._mark = mark ?? TestMark.none;\n\t\tthis._errorMessage = errorMessage;\n\t\tthis._errorRender = errorRender;\n\t\tthis._timeout = timeout;\n\t}\n\n\tget filename(): string | undefined {\n\t\treturn this._filename;\n\t}\n\n\tget name(): string[] {\n\t\treturn this._name;\n\t}\n\n\t/**\n\t * @returns {TestStatusValue} Whether this test passed, failed, etc.\n\t */\n\tget status(): TestStatusValue {\n\t\tconst consolidatedBefore = this._beforeEach.reduce(consolidateTestCase, TestStatus.pass);\n\t\tconst consolidatedBeforeAndAfter = this._afterEach.reduce(consolidateTestCase, consolidatedBefore);\n\n\t\tif (consolidatedBeforeAndAfter === TestStatus.pass && this._status === TestStatus.skip) return TestStatus.skip;\n\t\telse return consolidateStatus(consolidatedBeforeAndAfter, this._status);\n\n\t\tfunction consolidateTestCase(previousStatus: TestStatusValue, testCaseResult: TestCaseResult) {\n\t\t\treturn consolidateStatus(previousStatus, testCaseResult._status);\n\t\t}\n\n\t\tfunction consolidateStatus(left: TestStatusValue, right: TestStatusValue) {\n\t\t\tif (left === TestStatus.fail || right === TestStatus.fail) return TestStatus.fail;\n\t\t\telse if (left === TestStatus.timeout || right === TestStatus.timeout) return TestStatus.timeout;\n\t\t\telse if (left === TestStatus.pass || right === TestStatus.pass) return TestStatus.pass;\n\t\t\telse return TestStatus.skip;\n\t\t}\n\t}\n\n\t/**\n\t * @return { TestMark } Whether the test was explicitly marked with `.skip`, `.only`, or not at all.\n\t */\n\tget mark(): TestMarkValue {\n\t\treturn this._mark;\n\t}\n\n\t/**\n\t * @returns { TestCaseResult[] } The beforeEach() blocks for this test.\n\t */\n\tget beforeEach(): TestCaseResult[] {\n\t\treturn this._beforeEach;\n\t}\n\n\t/**\n\t * @returns { TestCaseResult[] } The afterEach() blocks for this test.\n\t */\n\tget afterEach(): TestCaseResult[] {\n\t\treturn this._afterEach;\n\t}\n\n\t/**\n\t * @returns {string} A short description of the reason this test failed. If the error is an Error instance, it's\n\t *   equal to the error's `message` property. Otherwise, the error is converted to a string using `util.inspect()`.\n\t * @throws {Error} Throws an error if this test didn't fail.\n\t */\n\tget errorMessage(): string {\n\t\tensure.that(this.isFail(), \"Attempted to retrieve error message from a test that didn't fail\");\n\t\treturn this._errorMessage!;\n\t}\n\n\t/**\n\t * @returns {unknown} The complete rendering of the reason this test failed. May be of any type, depending on how\n\t *   `renderError()` in TestOptions is defined, but it defaults to a string.\n\t * @throws {Error} Throws an error if this test didn't fail.\n\t */\n\tget errorRender(): unknown {\n\t\tensure.that(this.isFail(), \"Attempted to retrieve error render from a test that didn't fail\");\n\t\treturn this._errorRender!;\n\t}\n\n\t/**\n\t * @returns {number} The timeout that this test didn't satisfy. Note that this is not the actual amount of run time\n\t *   of the test.\n\t * @throws {Error} Throws an error if this test didn't time out.\n\t */\n\tget timeout(): number {\n\t\tensure.that(this.isTimeout(), \"Attempted to retrieve timeout from a test that didn't time out\");\n\t\treturn this._timeout!;\n\t}\n\n\t/**\n\t * @returns {boolean} True if this test passed.\n\t */\n\tisPass(): boolean {\n\t\tensure.signature(arguments, []);\n\t\treturn this.status === TestStatus.pass;\n\t}\n\n\t/**\n\t * @returns {boolean} True if this test failed.\n\t */\n\tisFail(): boolean {\n\t\tensure.signature(arguments, []);\n\t\treturn this.status === TestStatus.fail;\n\t}\n\n\t/**\n\t * @returns {boolean} True if this test was skipped.\n\t */\n\tisSkip(): boolean {\n\t\tensure.signature(arguments, []);\n\t\treturn this.status === TestStatus.skip;\n\t}\n\n\t/**\n\t * @returns {boolean} True if this test timed out.\n\t */\n\tisTimeout(): boolean {\n\t\tensure.signature(arguments, []);\n\t\treturn this.status === TestStatus.timeout;\n\t}\n\n\t/**\n\t * Render the test case as a single color-coded character.\n\t *\n\t * This is a convenience method that calls {@link TestRenderer.renderAsCharacters()}. For more control over rendering,\n\t * use that class instead.\n\t *\n\t * @returns The formatted character.\n\t */\n\trenderAsCharacter(): string {\n\t\tensure.signature(arguments, []);\n\n\t\treturn TestRenderer.create().renderAsCharacters(this);\n\t}\n\n\t/**\n\t * Render the test case as a single line containing its status (pass, fail, etc.) and names.\n\t *\n\t * This is a convenience method that calls {@link TestRenderer.renderAsSingleLines()}. For more control over\n\t * rendering, use that class instead.\n\t *\n\t * @returns The formatted line.\n\t */\n\trenderAsSingleLine(): string {\n\t\tensure.signature(arguments, []);\n\n\t\treturn TestRenderer.create().renderAsSingleLines(this);\n\t}\n\n\t/**\n\t * Render the test case as a multiple lines containing all of its details.\n\t *\n\t * This is a convenience method that calls {@link TestRenderer.renderAsMultipleLines()}. For more control over\n\t * rendering, use that class instead.\n\t *\n\t * @returns The formatted lines.\n\t */\n\trenderAsMultipleLines(): string {\n\t\tensure.signature(arguments, []);\n\n\t\treturn TestRenderer.create().renderAsMultipleLines(this);\n\t}\n\n\t/**\n\t * @returns {TestCaseResult[]} This test converted into a list of one.\n\t */\n\tallTests(): TestCaseResult[] {\n\t\tensure.signature(arguments, []);\n\t\treturn [ this ];\n\t}\n\n\tallMatchingMarks(...marks: TestMarkValue[]): TestResult[] {\n\t\tensureValidMarks(marks);\n\n\t\tif (marks.includes(this._mark)) return [ this ];\n\t\telse return [];\n\t}\n\n\t/**\n\t * Convert this result into a bare object later deserialization.\n\t * @returns {object} The serialized object.\n\t * @see TestResult.deserialize\n\t */\n\tserialize(): SerializedTestCaseResult {\n\t\tensure.signature(arguments, []);\n\n\t\treturn {\n\t\t\ttype: \"TestCaseResult\",\n\t\t\tname: this._name,\n\t\t\tmark: this._mark,\n\t\t\tfilename: this._filename,\n\t\t\tstatus: this._status,\n\t\t\terrorMessage: this._errorMessage,\n\t\t\terrorRender: this._errorRender,\n\t\t\ttimeout: this._timeout,\n\t\t\tbeforeEach: this._beforeEach.map(result => result.serialize()),\n\t\t\tafterEach: this._afterEach.map(result => result.serialize()),\n\t\t};\n\t}\n\n\tequals(that: TestResult): boolean {\n\t\tif (!(that instanceof TestCaseResult)) return false;\n\n\t\tconst sameName = util.isDeepStrictEqual(this._name, that._name);\n\t\tconst sameError = this._errorMessage === that._errorMessage;\n\n\t\treturn sameName &&\n\t\t\tsameError &&\n\t\t\tthis._status === that._status &&\n\t\t\tthis._mark === that._mark &&\n\t\t\tthis._timeout === that._timeout &&\n\t\t\tthis.filename === that.filename;\n\t}\n\n}\n\nfunction ensureValidMarks(marks: TestMarkValue[]) {\n\tconst validMarks = Object.values(TestMark);\n\tmarks.forEach((mark, i) => {\n\t\tensure.that(validMarks.includes(mark), `Argument #${i} was '${mark}', which isn't a valid mark`);\n\t});\n}"],"names":["ensure","util","renderError","renderErrorFn","TestRenderer","TestStatus","pass","fail","skip","timeout","TestMark","none","only","TestResult","suite","name","tests","beforeAll","afterAll","filename","mark","signature","arguments","String","Array","undefined","isArray","TestSuiteResult","beforeEach","afterEach","TestCaseResult","status","error","ANY_TYPE","Function","errorMessage","Error","message","inspect","depth","Infinity","errorRender","Number","deserialize","serializedTestResult","signatureMinimum","type","unreachable","deserializedTests","map","test","deserializedBeforeAll","deserializedAfterAll","_name","_tests","_beforeAll","_afterAll","_mark","_filename","constructor","render","preamble","elapsedMs","renderer","create","marks","allMarkedResults","errors","allMatchingTests","markRender","renderMarksAsLines","renderAsMultipleLines","summaryRender","renderSummary","length","allTests","collect","result","forEach","subTest","push","statuses","filter","includes","allMarks","Set","Object","values","delete","allMatchingMarks","apply","ensureValidMarks","results","add","subResult","allPassingFiles","allFiles","notPassFiles","isPass","differencePolyfill","leftSet","rightSet","value","has","count","total","serialize","equals","that","compareTestResults","sameName","isDeepStrictEqual","thisTests","thatTests","i","thisResult","thatResult","serializedResult","deserializedBeforeEach","deserializedAfterEach","_beforeEach","_afterEach","_status","_errorMessage","_errorRender","_timeout","consolidatedBefore","reduce","consolidateTestCase","consolidatedBeforeAndAfter","consolidateStatus","previousStatus","testCaseResult","left","right","isFail","isTimeout","isSkip","renderAsCharacter","renderAsCharacters","renderAsSingleLine","renderAsSingleLines","sameError","validMarks"],"mappings":"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"}