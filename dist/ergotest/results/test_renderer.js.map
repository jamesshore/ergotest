{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/ergotest/results/test_renderer.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as ensure from \"../../util/ensure.js\";\nimport {\n\tRunResult,\n\tTestCaseResult,\n\tTestMark, TestMarkValue,\n\tTestResult,\n\tTestStatus, TestStatusValue,\n\tTestSuiteResult,\n} from \"./test_result.js\";\nimport { ColorFn, Colors } from \"../../infrastructure/colors.js\";\nimport path from \"node:path\";\nimport { AssertionError } from \"node:assert\";\nimport util from \"node:util\";\nimport { SourceMap } from \"../../infrastructure/source_map.js\";\nimport { TypeDescriptor } from \"../../util/type.js\";\n\nconst headerColor = Colors.brightWhite.bold;\nconst highlightColor = Colors.brightWhite;\nconst stackHighlightColor = Colors.brightYellow.bold;\nconst errorMessageColor = Colors.brightRed;\nconst timeoutMessageColor = Colors.purple;\nconst expectedColor = Colors.green;\nconst actualColor = Colors.brightRed;\nconst diffColor = Colors.brightYellow.bold;\nconst summaryColor = Colors.brightWhite.dim;\n\n/**\n * Converts an error into a detailed description of a test failure. Intended to be used with {@link TestOptions}\n * rather than called directly.\n * @param {string[]} name The names of the test\n * @param {unknown} error The error that occurred\n * @param {string} [filename] The file that contained the test, if known\n * @return The description\n */\nexport function renderError(name: string[], error: unknown, filename?: string) {\n\tensure.signature(arguments, [ Array, ensure.ANY_TYPE, [ undefined, String ] ]);\n\n\tconst finalName = normalizeName(name).pop();\n\n\tlet renderedError;\n\tif (error instanceof Error && error?.stack !== undefined) {\n\t\trenderedError = renderStack(error, filename);\n\t\tif (error.message !== undefined && error.message !== \"\") {\n\t\t\trenderedError +=\n\t\t\t\t\"\\n\\n\" +\n\t\t\t\thighlightColor(`${finalName} Â»\\n`) +\n\t\t\t\terrorMessageColor(`${error.message}`);\n\t\t}\n\t}\n\telse if (typeof error === \"string\") {\n\t\trenderedError = errorMessageColor(error);\n\t}\n\telse {\n\t\trenderedError = errorMessageColor(util.inspect(error));\n\t}\n\n\tconst diff = (error instanceof AssertionError && (error.expected !== undefined || error.actual !== undefined)) ?\n\t\t\"\\n\\n\" + renderDiff(error) :\n\t\t\"\";\n\n\treturn `${renderedError}${diff}`;\n}\n\n/**\n * Provides an error's stack trace, or \"\" if there wasn't one. If `filename` is provided, the stack frames that\n * correspond to the filename will be highlighted.\n * @param {unknown} error The error\n * @param {string} [filename] The filename to highlight\n * @param [sourceMap] Internal use only\n * @returns {string} The stack trace for the test, or \"\" if there wasn't one.\n */\nexport function renderStack(error: Error, filename?: string, sourceMap = SourceMap.create()): string {\n\tensure.signature(arguments, [ ensure.ANY_TYPE, [ undefined, String ], [ undefined, SourceMap ] ]);\n\n\tconst stack = error instanceof AssertionError ?\n\t\terror.stack ?? \"\" :\n\t\tutil.inspect(error);\n\n\tif (filename === undefined) return stack;\n\n\tlet filenamesToHighlight = sourceMap.getOriginalFilenames(filename);\n\tif (filenamesToHighlight.length === 0) filenamesToHighlight = [ filename ];\n\n\tconst lines = stack.split(\"\\n\");\n\tconst highlightedLines = lines.map(line => {\n\t\tconst shouldHighlight = filenamesToHighlight.some(filename => line.includes(filename));\n\n\t\tif (!shouldHighlight) return line;\n\n\t\tline = line.replace(/    at/, \"--> at\");\t// this code is vulnerable to changes in Node.js rendering\n\t\treturn stackHighlightColor(line);\n\t});\n\treturn highlightedLines.join(\"\\n\");\n}\n\n/**\n *\n * @returns {string} A comparison of expected and actual values, or \"\" if there weren't any.\n */\nexport function renderDiff(error: AssertionError): string {\n\tensure.signature(arguments, [ AssertionError ]);\n\n\tif (error.expected === undefined && error.actual === undefined) return \"\";\n\tif (error.expected === null && error.actual === null) return \"\";\n\n\tconst expected = util.inspect(error.expected, { depth: Infinity }).split(\"\\n\");\n\tconst actual = util.inspect(error.actual, { depth: Infinity }).split(\"\\n\");\n\tif (expected.length > 1 || actual.length > 1) {\n\t\tfor (let i = 0; i < Math.max(expected.length, actual.length); i++) {\n\t\t\tconst expectedLine = expected[i];\n\t\t\tconst actualLine = actual[i];\n\n\t\t\tif (expectedLine !== actualLine) {\n\t\t\t\tif (expected[i] !== undefined) expected[i] = diffColor(expected[i]!);\n\t\t\t\tif (actual[i] !== undefined) actual[i] = diffColor(actual[i]!);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn \"\"\n\t\t+ expectedColor(\"expected: \") + expected.join(\"\\n\") + \"\\n\"\n\t\t+ actualColor(\"actual:   \") + actual.join(\"\\n\");\n}\n\n\nexport class TestRenderer {\n\n\tstatic create() {\n\t\treturn new TestRenderer();\n\t}\n\n\t// can't use a normal constant due to a circular dependency between TestResult and TestRenderer\n\tstatic get #PROGRESS_RENDERING() {\n\t\treturn {\n\t\t\t[TestStatus.pass]: \".\",\n\t\t\t[TestStatus.fail]: Colors.brightRed.inverse(\"X\"),\n\t\t\t[TestStatus.skip]: Colors.cyan.dim(\"_\"),\n\t\t\t[TestStatus.timeout]: Colors.purple.inverse(\"!\"),\n\t\t};\n\t}\n\n\t// can't use a normal constant due to a circular dependency between TestResult and TestRenderer\n\tstatic get #DESCRIPTION_RENDERING() {\n\t\treturn {\n\t\t\t[TestStatus.pass]: Colors.green(\"passed\"),\n\t\t\t[TestStatus.fail]: Colors.brightRed(\"failed\"),\n\t\t\t[TestStatus.skip]: Colors.brightCyan(\"skipped\"),\n\t\t\t[TestStatus.timeout]: Colors.brightPurple(\"timeout\"),\n\t\t};\n\t}\n\n\t/**\n\t * @param {TestSuiteResult} testSuiteResult The test suite to render.\n\t * @param {number} [elapsedMs] The total time required to run the test suite, in milliseconds.\n\t * @returns {string} A summary of the results of a test suite, including the average time required per test if\n\t *   `elapsedMs` is defined.\n\t */\n\trenderSummary(testSuiteResult: TestSuiteResult, elapsedMs?: number): string {\n\t\tensure.signature(arguments, [ TestSuiteResult, [ undefined, Number ]]);\n\n\t\tconst { total, pass, fail, timeout, skip } = testSuiteResult.count();\n\n\t\tconst renders = [\n\t\t\trenderCount(fail, \"failed\", Colors.brightRed),\n\t\t\trenderCount(timeout, \"timed out\", Colors.purple),\n\t\t\trenderCount(skip, \"skipped\", Colors.cyan),\n\t\t\trenderCount(pass, \"passed\", Colors.green),\n\t\t\trenderMsEach(elapsedMs, total, skip),\n\t\t].filter(render => render !== \"\");\n\n\t\treturn summaryColor(\"(\") + renders.join(summaryColor(\"; \")) + summaryColor(\")\");\n\n\t\tfunction renderCount(number: number, description: string, color: ColorFn): string {\n\t\t\tif (number === 0) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn color(`${number} ${description}`);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderMsEach(elapsedMs: number | undefined, total: number, skip: number): string {\n\t\t\tif (total - skip === 0) return summaryColor(\"none ran\");\n\t\t\tif (elapsedMs === undefined) return \"\";\n\n\t\t\tconst msEach = (elapsedMs / (total - skip)).toFixed(1);\n\t\t\treturn summaryColor(`${msEach}ms avg.`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {TestCaseResult | TestCaseResult[]} The tests to render.\n\t * @returns {string} A single character for each test: a dot for passed, a red X for failed, etc.\n\t */\n\trenderAsCharacters(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, RunResult, Array ]]);\n\n\t\treturn renderMultipleResults(testCaseResults, \"\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\treturn (TestRenderer.#PROGRESS_RENDERING)[testResult.status];\n\t\t});\n\t}\n\n\t/**\n\t * @param {TestCaseResult | TestCaseResult[]} The tests to render.\n\t * @returns {string} A line for each test with the status (passed, failed, etc.) and the test name.\n\t */\n\trenderAsSingleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestCaseResult, Array ]]);\n\n\t\tconst self = this;\n\t\treturn renderMultipleResults(testCaseResults, \"\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\treturn showTestDetail(testResult)\n\t\t\t\t? renderDetail(testResult)\n\t\t\t\t: renderResult(testResult);\n\t\t});\n\n\t\tfunction renderDetail(testResult: TestCaseResult) {\n\t\t\tconst separator = `\\n  ${summaryColor(\"-->\")}  `;\n\n\t\t\tconst beforeAfter = [ ...testResult.beforeEach, ...testResult.afterEach ];\n\t\t\tconst details = renderMultipleResults(beforeAfter, separator, RunResult, detail => renderResult(detail));\n\n\t\t\treturn renderResult(testResult)\n\t\t\t\t+ `${separator}${self.renderStatusAsSingleWord(testResult.it.status)} the test itself`\n\t\t\t\t+ separator + details;\n\t\t}\n\n\t\tfunction renderResult(result: RunResult | TestCaseResult) {\n\t\t\tif (result instanceof RunResult) result = TestCaseResult.create({ it: result });\n\n\t\t\tconst status = self.renderStatusAsSingleWord(result.status);\n\t\t\tconst name = self.renderNameOnOneLine(result.name, result.filename);\n\t\t\treturn `${status} ${name}`;\n\t\t}\n\t}\n\n\t/**\n\t * @param {TestCaseResult | TestCaseResult[]} The tests to render.\n\t * @returns {string} A full explanation of this test result.\n\t */\n\trenderAsMultipleLines(testCaseResults: TestCaseResult | TestCaseResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\tconst self = this;\n\t\treturn renderMultipleResults(testCaseResults, \"\\n\\n\\n\", TestCaseResult, (testResult: TestCaseResult) => {\n\t\t\tconst name = this.renderNameOnMultipleLines(testResult.name, testResult.filename);\n\n\t\t\tif (showTestDetail(testResult)) {\n\t\t\t\treturn renderDetail(testResult);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst status = this.renderStatusWithMultiLineDetails(testResult.it);\n\t\t\t\treturn `${name}\\n\\n${status}`;\n\t\t\t}\n\t\t});\n\n\t\tfunction renderDetail(testResult: TestCaseResult): string {\n\t\t\tconst chevrons = headerColor(`Â»Â»Â» `);\n\t\t\tconst beforeAfter = [ ...testResult.beforeEach, ...testResult.afterEach ];\n\t\t\tconst details = renderMultipleResults(beforeAfter, `\\n\\n`, RunResult, detail => {\n\t\t\t\tconst status = self.renderStatusWithMultiLineDetails(detail);\n\t\t\t\tconst finalName = normalizeName(detail.name).pop() as string;\n\n\t\t\t\treturn chevrons + headerColor(finalName) + \"\\n\"\n\t\t\t\t\t+ self.renderNameOnOneLine(detail.name, detail.filename) + \"\\n\\n\"\n\t\t\t\t\t+ status;\n\t\t\t});\n\n\t\t\tconst test = testResult.it;\n\t\t\treturn self.renderNameOnMultipleLines(test.name, test.filename) + \"\\n\\n\"\n\t\t\t\t+ details + \"\\n\\n\"\n\t\t\t\t+ chevrons + headerColor(\"the test itself\") + \"\\n\"\n\t\t\t\t+ self.renderNameOnOneLine(test.name, test.filename) + \"\\n\\n\"\n\t\t\t\t+ self.renderStatusWithMultiLineDetails(test) + \"\\n\\n\"\n\t\t\t\t+ headerColor(\"Â«Â«Â«\");\n\t\t}\n\t}\n\n\t/**\n\t * @param {TestResult | TestResult[]} The tests or suites to render.\n\t * @returns {string} A line for each test or suite that's marked (.only, .skip, etc.) with the mark and the test name.\n\t */\n\trenderMarksAsLines(testResults: TestResult | TestResult[]): string {\n\t\tensure.signature(arguments, [[ TestSuiteResult, TestCaseResult, Array ]]);\n\n\t\treturn renderMultipleResults(testResults, \"\\n\", TestResult, (testResult: TestResult) => {\n\t\t\tconst mark = this.renderMarkAsSingleWord(testResult.mark);\n\t\t\tconst name = this.renderNameOnOneLine(testResult.name, testResult.filename);\n\n\t\t\tif (mark === \"\") return \"\";\n\t\t\telse return `${mark} ${name}`;\n\t\t});\n\n\t}\n\n\t/**\n\t * @param { string[] } name The name to render.\n\t * @param { string? } [filename] The filename to render.\n\t * @returns {string} The name of the test, including parent suites and filename, rendered as a single line. Only the\n\t *   filename is rendered; the rest of the path is ignored.\n\t */\n\trenderNameOnOneLine(name: string[], filename?: string) {\n\t\tensure.signature(arguments, [ Array, [ undefined, String ]]);\n\n\t\tconst renderedFilename = filename === undefined\n\t\t\t? \"\"\n\t\t\t: headerColor(path.basename(filename)) + \" Â» \";\n\t\tconst renderedName = normalizeName(name).join(\" Â» \");\n\n\t\treturn `${renderedFilename}${renderedName}`;\n\t}\n\n\t/**\n\t * @param { string[] } name The name to render.\n\t * @param { string? } [filename] The filename to render.\t *\n\t * @returns {string} The name of the test, including parent suites and filename, with the suites and filename\n\t *   rendered on a separate line. Only the filename is rendered; the rest of the path is ignored.\n\t */\n\trenderNameOnMultipleLines(name: string[], filename?: string): string {\n\t\tensure.signature(arguments, [ Array, [ undefined, String ] ]);\n\n\t\tname = normalizeName(name);\n\n\t\tconst suites = name.slice(0, name.length - 1);\n\t\tconst test = name[name.length - 1];\n\n\t\tif (filename !== undefined) suites.unshift(path.basename(filename));\n\n\t\tconst suitesName = suites.length > 0\n\t\t\t? headerColor(suites[0]) + suites.slice(1).map(name => ` Â» ${name}`).join(\"\") + \"\\n\" + headerColor(\"Â» \")\n\t\t\t: \"\";\n\n\t\treturn suitesName + headerColor(test);\n\t}\n\n\t/**\n\t * @param { TestStatusValue } status The status to render.\n\t * @returns {string} The color-coded status.\n\t */\n\trenderStatusAsSingleWord(status: TestStatusValue) {\n\t\treturn TestRenderer.#DESCRIPTION_RENDERING[status];\n\t}\n\n\t/**\n\t * @param { RunResult } status The result to render.\n\t * @returns { string } The color-coded status, including error and timeout details where appropriate.\n\t */\n\trenderStatusWithMultiLineDetails(runResult: RunResult): string {\n\t\tswitch (runResult.status) {\n\t\t\tcase TestStatus.pass:\n\t\t\tcase TestStatus.skip:\n\t\t\t\treturn TestRenderer.#DESCRIPTION_RENDERING[runResult.status];\n\t\t\tcase TestStatus.fail:\n\t\t\t\treturn (typeof runResult.errorRender === \"string\") ?\n\t\t\t\t\trunResult.errorRender :\n\t\t\t\t\tutil.inspect(runResult.errorRender, { depth: Infinity });\n\t\t\tcase TestStatus.timeout:\n\t\t\t\treturn timeoutMessageColor(`Timed out after ${runResult.timeout}ms`);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unrecognized test result status: ${runResult.status}`);\n\t\t}\n\t}\n\n\t/**\n\t * @param { TestMarkValue } mark The mark.\n\t * @returns {string} The color-coded mark of the test result (.only, etc.), or \"\" if the test result wasn't marked.\n\t */\n\trenderMarkAsSingleWord(mark: TestMarkValue) {\n\t\tswitch (mark) {\n\t\t\tcase TestMark.none: return \"(no mark)\";\n\t\t\tcase TestMark.skip: return Colors.brightCyan(\".skip\");\n\t\t\tcase TestMark.only: return Colors.brightCyan(\".only\");\n\t\t\tdefault: ensure.unreachable(`Unrecognized test mark: ${mark}`);\n\t\t}\n\t}\n\n}\n\nfunction normalizeName(name: string[]): string[] {\n\treturn name.length === 0 ? [ \"(no name)\" ] : [ ...name ];\n}\n\nfunction showTestDetail(testResult: TestCaseResult) {\n\tconst beforeAfter = [ ...testResult.beforeEach, ...testResult.afterEach ];\n\tconst allBeforeAfterPass = beforeAfter.every(result => result.status === TestStatus.pass);\n\tconst allBeforeAfterSkipped = beforeAfter.every(result => result.status === TestStatus.skip);\n\n\treturn !(allBeforeAfterPass || (allBeforeAfterSkipped && testResult.it.status === TestStatus.skip));\n}\n\nfunction renderMultipleResults<T>(\n\ttestResults: T | T[],\n\tseparator: string,\n\texpectedType: TypeDescriptor,\n\trenderFn: (testResult: T) => string,\n): string {\n\tif (!Array.isArray(testResults)) testResults = [ testResults ];\n\ttestResults.forEach((result, i) => ensure.type(result, expectedType, `testResult[${i}]`));\n\n\treturn testResults.map(result => renderFn(result)).join(separator);\n}\n"],"names":["ensure","RunResult","TestCaseResult","TestMark","TestResult","TestStatus","TestSuiteResult","Colors","path","AssertionError","util","SourceMap","headerColor","brightWhite","bold","highlightColor","stackHighlightColor","brightYellow","errorMessageColor","brightRed","timeoutMessageColor","purple","expectedColor","green","actualColor","diffColor","summaryColor","dim","renderError","name","error","filename","signature","arguments","Array","ANY_TYPE","undefined","String","finalName","normalizeName","pop","renderedError","Error","stack","renderStack","message","inspect","diff","expected","actual","renderDiff","sourceMap","create","filenamesToHighlight","getOriginalFilenames","length","lines","split","highlightedLines","map","line","shouldHighlight","some","includes","replace","join","depth","Infinity","i","Math","max","expectedLine","actualLine","TestRenderer","pass","fail","inverse","skip","cyan","timeout","brightCyan","brightPurple","renderSummary","testSuiteResult","elapsedMs","Number","total","count","renders","renderCount","renderMsEach","filter","render","number","description","color","msEach","toFixed","renderAsCharacters","testCaseResults","renderMultipleResults","testResult","status","renderAsSingleLines","self","showTestDetail","renderDetail","renderResult","separator","beforeAfter","beforeEach","afterEach","details","detail","renderStatusAsSingleWord","it","result","renderNameOnOneLine","renderAsMultipleLines","renderNameOnMultipleLines","renderStatusWithMultiLineDetails","chevrons","test","renderMarksAsLines","testResults","mark","renderMarkAsSingleWord","renderedFilename","basename","renderedName","suites","slice","unshift","suitesName","runResult","errorRender","none","only","unreachable","allBeforeAfterPass","every","allBeforeAfterSkipped","expectedType","renderFn","isArray","forEach","type"],"mappings":"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"}