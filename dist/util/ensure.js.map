{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/util/ensure.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\nimport * as typeChecker from \"./type.js\";\nimport { TypeDescriptor } from \"./type.js\";\n\nexport const ANY_TYPE = typeChecker.ANY_TYPE;\n\n/**\n * General-purpose runtime assertion. Throws an exception if the expression isn't true.\n * @param {boolean} expression the expression to check\n * @param {string} message the exception message to throw\n */\nexport function that(variable: unknown, message: string) {\n\tif (message === undefined) message = \"Expected condition to be true\";\n\n\tif (variable === false) throw new EnsureError(message, that);\n\tif (variable !== true) throw new EnsureError(\"Expected condition to be true or false\", that);\n}\n\n/**\n * Runtime assertion for code that shouldn't be reachable. Throws an exception.\n * @param {string} [message] the exception message to throw\n */\nexport function unreachable(message: string): never {\n\tif (!message) message = \"Unreachable code executed\";\n\n\tthrow new EnsureError(message, unreachable);\n}\n\n/**\n * Runtime assertion for variables that should be defined. Throws an exception if the variable is undefined.\n * @param {any} variable the variable to check\n * @param {string} variableName the name of the variable, which will be included in the exception message\n */\nexport function defined(variable: unknown, variableName: string) {\n\tif (variable === undefined) {\n\t\tthrow new EnsureError(`${normalize(variableName)} was not defined`, defined);\n\t}\n}\n\n/**\n * Runtime assertion for function signatures. Throws an exception if the function parameters don't match the expected\n * types exactly.\n * @param {any[]} args the function parameters (call it with 'arguments')\n * @param {any[]} sig The function signature as an array. Each element in the array describes the corresponding\n *   function parameter. Use JavaScript's class names for each type: String, Number, Array, etc. You can also use\n *   'undefined', 'null', and 'NaN'. For instances, use the name of your class or constructor function (e.g.,\n *   'MyClass'). For objects with specific properties, provide an object, and specify the type(s) of each property\n *   (e.g., { a: Number, b: [ undefined, String ]}). For parameters that allow multiple types, provide an array\n *   containing each type. For optional parameters, provide an array and include 'undefined' as one of the options\n *   (e.g., [ undefined, String ].\n * @param {string[]} [names] the names of each parameter (used in error messages)\n */\nexport function signature(args: IArguments, expectedSignature: TypeDescriptor[], names?: string[]) {\n\tcheckSignature(false, args, expectedSignature, names, signature);\n}\n\n/**\n * Runtime assertion for function signatures. Throws an exception if the function parameters don't match the expected\n * types, but doesn't complain if there are more parameters or object properties than expected.\n * @param {any[]} args the function parameters (call it with 'arguments')\n * @param {any[]} sig The function signature as an array. Each element in the array describes the corresponding\n *   function parameter. Use JavaScript's class names for each type: String, Number, Array, etc. You can also use\n *   'undefined', 'null', and 'NaN'. For instances, use the name of your class or constructor function (e.g.,\n *   'MyClass'). For objects with specific properties, provide an object, and specify the type(s) of each property\n *   (e.g., { a: Number, b: [ undefined, String ]}). For parameters that allow multiple types, provide an array\n *   containing each type. For optional parameters, provide an array and include 'undefined' as one of the options\n *   (e.g., [ undefined, String ].\n * @param {string[]} [names] the names of each parameter (used in error messages)\n */\nexport function signatureMinimum(args: IArguments, expectedSignature: TypeDescriptor[], names?: string[]) {\n\tcheckSignature(true, args, expectedSignature, names);\n}\n\n/**\n * Runtime assertion for variable types. Throws an exception if the variable doesn't match the expected type exactly.\n * @param {any} variable the variable\n * @param {any} expectedType The expected type. Use JavaScript's class names: String, Number, Array, etc. You can also\n *   use 'undefined', 'null', and 'NaN'. For instances, use the name of your class or constructor function (e.g.,\n *   'MyClass'). For objects with specific properties, provide an object, and specify the type(s) of each property\n *   (e.g., { a: Number, b: [ undefined, String ]}). For parameters that allow multiple types, provide an array\n *   containing each type. For optional parameters, provide an array and include 'undefined' as one of the options\n *   (e.g., [ undefined, String ].\n * @param {string} [name] the name of the variable (used in error messages)\n */\nexport function type(variable: unknown, expectedType: TypeDescriptor, name?: string) {\n\tcheckType(variable, expectedType, false, name, type);\n}\n\n/**\n * Runtime assertion for variable types. Throws an exception if the variable doesn't match the expected type, but\n * doesn't complain if there are more object properties than expected.\n * @param {any} variable the variable\n * @param {any} expectedType The expected type. Use JavaScript's class names: String, Number, Array, etc. You can also\n *   use 'undefined', 'null', and 'NaN'. For instances, use the name of your class or constructor function (e.g.,\n *   'MyClass'). For objects with specific properties, provide an object, and specify the type(s) of each property\n *   (e.g., { a: Number, b: [ undefined, String ]}). For parameters that allow multiple types, provide an array\n *   containing each type. For optional parameters, provide an array and include 'undefined' as one of the options\n *   (e.g., [ undefined, String ].\n * @param {string} [name] the name of the variable (used in error messages)\n */\nexport function typeMinimum(variable: unknown, expectedType: TypeDescriptor, name?: string) {\n\tcheckType(variable, expectedType, true, name, typeMinimum);\n}\n\nexport function checkSignature(\n\tallowExtra: boolean,\n\targs: IArguments,\n\tsignature: TypeDescriptor[] = [],\n\tnames: string[] = [],\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n\tfnToRemoveFromStackTrace?: Function,  // can literally be any function\n) {\n\tthat(Array.isArray(signature), \"ensure.signature(): signature parameter must be an array\");\n\tthat(Array.isArray(names), \"ensure.signature(): names parameter must be an array\");\n\n\tconst expectedArgCount = signature.length;\n\tconst actualArgCount = args.length;\n\n\tif (!allowExtra && (actualArgCount > expectedArgCount)) {\n\t\tthrow new EnsureError(\n\t\t\t`Function called with too many arguments: expected ${expectedArgCount} but got ${actualArgCount}`,\n\t\t\tfnToRemoveFromStackTrace,\n\t\t);\n\t}\n\n\tsignature.forEach(function(expectedType, i) {\n\t\tconst name = names[i] ? names[i] : `Argument #${(i + 1)}`;\n\t\tcheckType(args[i], expectedType, allowExtra, name, fnToRemoveFromStackTrace);\n\t});\n}\n\nexport function checkType(\n\tvariable: unknown,\n\texpectedType: TypeDescriptor,\n\tallowExtraKeys: boolean,\n\tname: string | undefined,\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n\tfnToRemoveFromStackTrace?: Function,  // can literally be any function\n) {\n\tconst error = typeChecker.check(variable, expectedType, { name: normalize(name), allowExtraKeys });\n\tif (error !== null) throw new EnsureError(error, fnToRemoveFromStackTrace);\n}\n\nfunction normalize(variableName?: string): string {\n\treturn variableName ? variableName : \"variable\";\n}\n\n\nclass EnsureError extends Error {\n\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n\tconstructor(message: string, fnToRemoveFromStackTrace?: Function) {   // can literally be any function\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, fnToRemoveFromStackTrace);\n\t}\n\n}"],"names":["typeChecker","ANY_TYPE","that","variable","message","undefined","EnsureError","unreachable","defined","variableName","normalize","signature","args","expectedSignature","names","checkSignature","signatureMinimum","type","expectedType","name","checkType","typeMinimum","allowExtra","fnToRemoveFromStackTrace","Array","isArray","expectedArgCount","length","actualArgCount","forEach","i","allowExtraKeys","error","check","Error","constructor","captureStackTrace"],"mappings":"AAAA,iFAAiF;AAEjF,YAAYA,iBAAiB,YAAY;AAGzC,OAAO,MAAMC,WAAWD,YAAYC,QAAQ,CAAC;AAE7C;;;;CAIC,GACD,OAAO,SAASC,KAAKC,QAAiB,EAAEC,OAAe;IACtD,IAAIA,YAAYC,WAAWD,UAAU;IAErC,IAAID,aAAa,OAAO,MAAM,IAAIG,YAAYF,SAASF;IACvD,IAAIC,aAAa,MAAM,MAAM,IAAIG,YAAY,0CAA0CJ;AACxF;AAEA;;;CAGC,GACD,OAAO,SAASK,YAAYH,OAAe;IAC1C,IAAI,CAACA,SAASA,UAAU;IAExB,MAAM,IAAIE,YAAYF,SAASG;AAChC;AAEA;;;;CAIC,GACD,OAAO,SAASC,QAAQL,QAAiB,EAAEM,YAAoB;IAC9D,IAAIN,aAAaE,WAAW;QAC3B,MAAM,IAAIC,YAAY,GAAGI,UAAUD,cAAc,gBAAgB,CAAC,EAAED;IACrE;AACD;AAEA;;;;;;;;;;;;CAYC,GACD,OAAO,SAASG,UAAUC,IAAgB,EAAEC,iBAAmC,EAAEC,KAAgB;IAChGC,eAAe,OAAOH,MAAMC,mBAAmBC,OAAOH;AACvD;AAEA;;;;;;;;;;;;CAYC,GACD,OAAO,SAASK,iBAAiBJ,IAAgB,EAAEC,iBAAmC,EAAEC,KAAgB;IACvGC,eAAe,MAAMH,MAAMC,mBAAmBC;AAC/C;AAEA;;;;;;;;;;CAUC,GACD,OAAO,SAASG,KAAKd,QAAiB,EAAEe,YAA4B,EAAEC,IAAa;IAClFC,UAAUjB,UAAUe,cAAc,OAAOC,MAAMF;AAChD;AAEA;;;;;;;;;;;CAWC,GACD,OAAO,SAASI,YAAYlB,QAAiB,EAAEe,YAA4B,EAAEC,IAAa;IACzFC,UAAUjB,UAAUe,cAAc,MAAMC,MAAME;AAC/C;AAEA,OAAO,SAASN,eACfO,UAAmB,EACnBV,IAAgB,EAChBD,YAA8B,EAAE,EAChCG,QAAkB,EAAE,EACpB,sEAAsE;AACtES,wBAAmC;IAEnCrB,KAAKsB,MAAMC,OAAO,CAACd,YAAY;IAC/BT,KAAKsB,MAAMC,OAAO,CAACX,QAAQ;IAE3B,MAAMY,mBAAmBf,UAAUgB,MAAM;IACzC,MAAMC,iBAAiBhB,KAAKe,MAAM;IAElC,IAAI,CAACL,cAAeM,iBAAiBF,kBAAmB;QACvD,MAAM,IAAIpB,YACT,CAAC,kDAAkD,EAAEoB,iBAAiB,SAAS,EAAEE,gBAAgB,EACjGL;IAEF;IAEAZ,UAAUkB,OAAO,CAAC,SAASX,YAAY,EAAEY,CAAC;QACzC,MAAMX,OAAOL,KAAK,CAACgB,EAAE,GAAGhB,KAAK,CAACgB,EAAE,GAAG,CAAC,UAAU,EAAGA,IAAI,GAAI;QACzDV,UAAUR,IAAI,CAACkB,EAAE,EAAEZ,cAAcI,YAAYH,MAAMI;IACpD;AACD;AAEA,OAAO,SAASH,UACfjB,QAAiB,EACjBe,YAA4B,EAC5Ba,cAAuB,EACvBZ,IAAwB,EACxB,sEAAsE;AACtEI,wBAAmC;IAEnC,MAAMS,QAAQhC,YAAYiC,KAAK,CAAC9B,UAAUe,cAAc;QAAEC,MAAMT,UAAUS;QAAOY;IAAe;IAChG,IAAIC,UAAU,MAAM,MAAM,IAAI1B,YAAY0B,OAAOT;AAClD;AAEA,SAASb,UAAUD,YAAqB;IACvC,OAAOA,eAAeA,eAAe;AACtC;AAGA,MAAMH,oBAAoB4B;IAEzB,sEAAsE;IACtEC,YAAY/B,OAAe,EAAEmB,wBAAmC,CAAE;QACjE,KAAK,CAACnB;QACN8B,MAAME,iBAAiB,CAAC,IAAI,EAAEb;IAC/B;AAED"}