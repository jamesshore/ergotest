{"version":3,"sources":["/Users/jshore/Documents/Projects/ergotest/src/util/_type_test.ts"],"sourcesContent":["// Copyright Titanium I.T. LLC. License granted under terms of \"The MIT License.\"\n\n/* eslint @typescript-eslint/no-explicit-any: \"off\" */\n// There are a lot of weird JavaScript manipulations in these tests, so we work around the type-checker with \"as any\"\n\nimport { assert, test } from \"../tests.js\";\nimport * as type from \"./type.js\";\n\nexport default test(({ describe, it }) => {\n\n\tdescribe(\"checker\", ({ describe, it }) => {\n\n\t\tconst check = type.check;\n\n\t\tit(\"checks built-in types\", function() {\n\t\t\tassert.isNull(check(false, Boolean), \"boolean\");\n\t\t\tassert.isNotNull(check(false, String), \"not boolean\");\n\n\t\t\tassert.isNull(check(\"1\", String), \"string\");\n\t\t\tassert.isNotNull(check(\"1\", Number), \"not string\");\n\n\t\t\tassert.isNull(check(1, Number), \"number\");\n\t\t\tassert.isNotNull(check(1, Function), \"not number\");\n\n\t\t\tassert.isNull(check(function() {}, Function), \"function\");\n\t\t\tassert.isNotNull(check(function() {}, Object), \"not function\");\n\n\t\t\tassert.isNull(check({}, Object), \"object\");\n\t\t\tassert.isNotNull(check({}, Array), \"not object\");\n\n\t\t\tassert.isNull(check([], Array), \"array\");\n\t\t\tassert.isNotNull(check([], RegExp), \"not array\");\n\n\t\t\tassert.isNull(check(/foo/, RegExp), \"regular expression\");\n\t\t\tassert.isNotNull(check(/foo/, Boolean), \"not regular expression\");\n\t\t});\n\n\t\tit(\"checks undefined and null types (primarily for allowing nullable objects, etc.)\", function() {\n\t\t\tassert.isNull(check(undefined, undefined), \"undefined\");\n\t\t\tassert.isNotNull(check(undefined, null), \"not undefined\");\n\t\t\tassert.isNotNull(check({}, undefined), \"bug: comparing object to undefined caused crash\");\n\t\t\tassert.isNotNull(check({}, null), \"bug: comparing object to null caused crash\");\n\n\t\t\tassert.isNull(check(null, null), \"null\");\n\t\t\tassert.isNotNull(check(null, NaN), \"not null\");\n\t\t});\n\n\t\tit(\"checks NaN (just in case you ever want it)\", function() {\n\t\t\tassert.isNull(check(NaN, NaN), \"NaN\");\n\n\t\t\tassert.isNotNull(check(NaN, undefined), \"undefined should not be NaN\");\n\t\t\tassert.isNotNull(check(NaN, null), \"null should not be NaN\");\n\t\t\tassert.isNotNull(check(NaN, Object), \"constructors should not be NaN\");\n\t\t});\n\n\t\tit(\"checks custom types\", function() {\n\t\t\tclass MyClass {}\n\n\t\t\tconst myInstance = new MyClass();\n\n\t\t\tassert.isNull(check(myInstance, MyClass), \"instance of class\");\n\t\t\tassert.isNull(check(myInstance, Object), \"instance of subclass\");\n\t\t\tassert.isNotNull(check({}, MyClass), \"instance of superclass\");\n\t\t});\n\n\t\tit(\"checks 'structs'\", function() {\n\t\t\tassert.isNull(check({ a: 1 }, { a: Number }), \"one matching parameter\");\n\t\t\tassert.isNotNull(check({ a: 1 }, { a: String }), \"one non-matching parameter\");\n\n\t\t\tassert.isNull(check({}, {}), \"no parameters\");\n\t\t\tassert.isNotNull(check({ a: 1 }, {}), \"extra parameters should cause match to fail\");\n\t\t\tassert.isNull(check({ a: 1 }, {}, { allowExtraKeys: true }), \"extra parameters should NOT cause match to fail when parameter is set\");\n\n\t\t\tassert.isNull(check({ a: 1, b: \"a\" }, { a: Number, b: String }), \"multiple matching parameters\");\n\t\t\tassert.isNotNull(check({ a: 1, b: \"a\" }, { a: Number, b: Number }), \"multiple with non-matching parameter\");\n\t\t});\n\n\t\tit(\"supports multiple allowed types\", function() {\n\t\t\tassert.isNull(check(1, [String, Number]), \"string or number\");\n\t\t\tassert.isNotNull(check(1, [String, Object, Boolean]), \"not string, object, or boolean\");\n\t\t});\n\n\t\tit(\"returns string explaining error\", function() {\n\t\t\tassert.equal(check(123, String), \"argument must be a string, but it was a number\", \"normal types\");\n\t\t});\n\n\t\tit(\"provides detailed error message when using structs\", function() {\n\t\t\tassert.equal(\n\t\t\t\tcheck(null, { a: String }),\n\t\t\t\t\"argument must be an object containing { a: <string> }, but it was null\",\n\t\t\t\t\"not a struct\"\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\tcheck(null, { a: String }, { allowExtraKeys: true }),\n\t\t\t\t\"argument must be an object containing at least { a: <string> }, but it was null\",\n\t\t\t\t\"not a struct, and extra keys are allowed\"\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\tcheck({}, { a: String }),\n\t\t\t\t\"argument.a must be a string, but it was undefined\",\n\t\t\t\t\"top-level struct\"\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\tcheck({ a: { b: 123 }}, { a: { b: String } }),\n\t\t\t\t\"argument.a.b must be a string, but it was a number\",\n\t\t\t\t\"nested struct\"\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\tcheck({ a: \"expected\", b: \"extra\" }, { a: String }),\n\t\t\t\t\"argument had unexpected parameter: b\",\n\t\t\t\t\"one extra parameters\"\n\t\t\t);\n\t\t\tassert.equal(\n\t\t\t\tcheck({ a: \"expected\", b: \"extra\", c: \"extra\", d: \"extra\" }, { a: String }),\n\t\t\t\t\"argument had unexpected parameters: b, c, d\",\n\t\t\t\t\"multiple extra paraameters\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"provides correct error message when receiving a struct and expecting a primitive\", function() {\n\t\t\tassert.equal(\n\t\t\t\tcheck({ id: \"something\" }, Number),\n\t\t\t\t\"argument must be a number, but it was an object\"\n\t\t\t);\n\t\t});\n\n\t\tit(\"provides class names when using class instances\", function() {\n\t\t\tconst One = function One() {} as any;\n\t\t\tconst Two = function Two() {} as any;\n\n\t\t\tassert.equal(check(new One(), Two), \"argument must be a Two instance, but it was a One instance\");\n\t\t});\n\n\t\tit(\"allows argument name to be customized in error message\", function() {\n\t\t\tassert.equal(check(1, String, { name: \"custom\" }), \"custom must be a string, but it was a number\");\n\t\t});\n\n\t});\n\n\tdescribe(\"describer\", ({ describe, it }) => {\n\n\t\tconst MyClass = function MyClass() {} as any;\n\n\t\tconst forceAnonymity = {} as any;\n\t\tconst AnonClass = forceAnonymity.whatever = function() {} as any;\n\n\t\tconst myDescribe = type.describe;\n\n\t\tit(\"describes non-object types\", function() {\n\t\t\tassert.equal(myDescribe(Boolean), \"boolean\");\n\t\t\tassert.equal(myDescribe(String), \"string\");\n\t\t\tassert.equal(myDescribe(Number), \"number\");\n\t\t\tassert.equal(myDescribe(Function), \"function\");\n\t\t\tassert.equal(myDescribe(Array), \"array\");\n\t\t\tassert.equal(myDescribe(undefined), \"undefined\");\n\t\t\tassert.equal(myDescribe(null), \"null\");\n\t\t\tassert.equal(myDescribe(NaN), \"NaN\");\n\t\t});\n\n\t\tit(\"describes object types\", function() {\n\t\t\tassert.equal(myDescribe(Object), \"object\");\n\t\t\tassert.equal(myDescribe(RegExp), \"regular expression\");\n\t\t\tassert.equal(myDescribe(MyClass), \"MyClass instance\");\n\t\t\tassert.equal(myDescribe(AnonClass), \"<anon> instance\");\n\t\t});\n\n\t\tit(\"describes class instances\", function() {\n\t\t\tassert.equal(myDescribe(new MyClass()), \"MyClass instance\");\n\t\t\tassert.equal(myDescribe(new AnonClass()), \"<anon> instance\");\n\t\t});\n\n\t\tit(\"describes 'structs'\", function() {\n\t\t\tassert.equal(myDescribe(Object.create(null)), \"object\", \"no prototype\");\n\t\t\tassert.equal(myDescribe({}), \"object\", \"empty object\");\n\t\t\tassert.equal(myDescribe({ a: Number }), \"object containing { a: <number> }\", \"one parameter\");\n\t\t\tassert.equal(myDescribe({ a: Number, b: String }), \"object containing { a: <number>, b: <string> }\");\n\t\t});\n\n\t\tit(\"describes 'structs' when extra keys are allowed\", function() {\n\t\t\tconst options = { atLeast: true };\n\n\t\t\tassert.equal(myDescribe(Object.create(null), options), \"object\", \"no prototype\");\n\t\t\tassert.equal(myDescribe({}, options), \"object\", \"empty object\");\n\t\t\tassert.equal(myDescribe({ a: Number }, options), \"object containing at least { a: <number> }\", \"one parameter\");\n\t\t\tassert.equal(myDescribe({ a: Number, b: String }, options), \"object containing at least { a: <number>, b: <string> }\");\n\t\t});\n\n\t\tit(\"describes multiple types\", function() {\n\t\t\tassert.equal(myDescribe([ Boolean ]), \"boolean\", \"one types\");\n\t\t\tassert.equal(myDescribe([ Boolean, Object ]), \"boolean or object\", \"two types\");\n\t\t\tassert.equal(myDescribe([ Boolean, Object, Number, Function ]), \"boolean, object, number, or function\", \"four types\");\n\n\t\t\tassert.equal(myDescribe([ undefined, Boolean ]), \"undefined or boolean\", \"optional types shouldn't be treated specially\");\n\t\t\tassert.equal(myDescribe([ null, Object ]), \"null or object\", \"nullable objects shouldn't be treated specially\");\n\t\t});\n\n\t\tit(\"optionally uses articles\", function() {\n\t\t\tconst MyClass = function MyClass() {} as any;\n\t\t\tconst forceAnonymity = {} as any;\n\t\t\tconst AnonClass = forceAnonymity.whatever = function() {} as any;\n\n\t\t\tconst options = { articles: true };\n\n\t\t\tassert.equal(myDescribe(Boolean, options), \"a boolean\");\n\t\t\tassert.equal(myDescribe(String, options), \"a string\");\n\t\t\tassert.equal(myDescribe(Number, options), \"a number\");\n\t\t\tassert.equal(myDescribe(Function, options), \"a function\");\n\t\t\tassert.equal(myDescribe(Array, options), \"an array\");\n\t\t\tassert.equal(myDescribe(undefined, options), \"undefined\");\n\t\t\tassert.equal(myDescribe(null, options), \"null\");\n\t\t\tassert.equal(myDescribe(NaN, options), \"NaN\");\n\t\t\tassert.equal(myDescribe(Object, options), \"an object\", \"Object\");\n\t\t\tassert.equal(myDescribe(RegExp, options), \"a regular expression\");\n\t\t\tassert.equal(myDescribe(MyClass, options), \"a MyClass instance\");\n\t\t\tassert.equal(myDescribe(AnonClass, options), \"an <anon> instance\");\n\t\t\tassert.equal(myDescribe(new MyClass(), options), \"a MyClass instance\");\n\t\t\tassert.equal(myDescribe(new AnonClass(), options), \"an <anon> instance\");\n\t\t\tassert.equal(myDescribe(Object.create(null)), \"object\");\n\t\t\tassert.equal(myDescribe({}, options), \"an object\", \"{}\");\n\t\t\tassert.equal(myDescribe({ a: Number }, options), \"an object containing { a: <number> }\");\n\t\t});\n\n\t});\n\n});\n"],"names":["assert","test","type","describe","it","check","isNull","Boolean","isNotNull","String","Number","Function","Object","Array","RegExp","undefined","NaN","MyClass","myInstance","a","allowExtraKeys","b","equal","c","d","id","One","Two","name","forceAnonymity","AnonClass","whatever","myDescribe","create","options","atLeast","articles"],"mappings":"AAAA,iFAAiF;AAEjF,oDAAoD,GACpD,qHAAqH;AAErH,SAASA,MAAM,EAAEC,IAAI,QAAQ,cAAc;AAC3C,YAAYC,UAAU,YAAY;AAElC,eAAeD,KAAK,CAAC,EAAEE,QAAQ,EAAEC,EAAE,EAAE;IAEpCD,SAAS,WAAW,CAAC,EAAEA,QAAQ,EAAEC,EAAE,EAAE;QAEpC,MAAMC,QAAQH,KAAKG,KAAK;QAExBD,GAAG,yBAAyB;YAC3BJ,OAAOM,MAAM,CAACD,MAAM,OAAOE,UAAU;YACrCP,OAAOQ,SAAS,CAACH,MAAM,OAAOI,SAAS;YAEvCT,OAAOM,MAAM,CAACD,MAAM,KAAKI,SAAS;YAClCT,OAAOQ,SAAS,CAACH,MAAM,KAAKK,SAAS;YAErCV,OAAOM,MAAM,CAACD,MAAM,GAAGK,SAAS;YAChCV,OAAOQ,SAAS,CAACH,MAAM,GAAGM,WAAW;YAErCX,OAAOM,MAAM,CAACD,MAAM,YAAY,GAAGM,WAAW;YAC9CX,OAAOQ,SAAS,CAACH,MAAM,YAAY,GAAGO,SAAS;YAE/CZ,OAAOM,MAAM,CAACD,MAAM,CAAC,GAAGO,SAAS;YACjCZ,OAAOQ,SAAS,CAACH,MAAM,CAAC,GAAGQ,QAAQ;YAEnCb,OAAOM,MAAM,CAACD,MAAM,EAAE,EAAEQ,QAAQ;YAChCb,OAAOQ,SAAS,CAACH,MAAM,EAAE,EAAES,SAAS;YAEpCd,OAAOM,MAAM,CAACD,MAAM,OAAOS,SAAS;YACpCd,OAAOQ,SAAS,CAACH,MAAM,OAAOE,UAAU;QACzC;QAEAH,GAAG,mFAAmF;YACrFJ,OAAOM,MAAM,CAACD,MAAMU,WAAWA,YAAY;YAC3Cf,OAAOQ,SAAS,CAACH,MAAMU,WAAW,OAAO;YACzCf,OAAOQ,SAAS,CAACH,MAAM,CAAC,GAAGU,YAAY;YACvCf,OAAOQ,SAAS,CAACH,MAAM,CAAC,GAAG,OAAO;YAElCL,OAAOM,MAAM,CAACD,MAAM,MAAM,OAAO;YACjCL,OAAOQ,SAAS,CAACH,MAAM,MAAMW,MAAM;QACpC;QAEAZ,GAAG,8CAA8C;YAChDJ,OAAOM,MAAM,CAACD,MAAMW,KAAKA,MAAM;YAE/BhB,OAAOQ,SAAS,CAACH,MAAMW,KAAKD,YAAY;YACxCf,OAAOQ,SAAS,CAACH,MAAMW,KAAK,OAAO;YACnChB,OAAOQ,SAAS,CAACH,MAAMW,KAAKJ,SAAS;QACtC;QAEAR,GAAG,uBAAuB;YACzB,MAAMa;YAAS;YAEf,MAAMC,aAAa,IAAID;YAEvBjB,OAAOM,MAAM,CAACD,MAAMa,YAAYD,UAAU;YAC1CjB,OAAOM,MAAM,CAACD,MAAMa,YAAYN,SAAS;YACzCZ,OAAOQ,SAAS,CAACH,MAAM,CAAC,GAAGY,UAAU;QACtC;QAEAb,GAAG,oBAAoB;YACtBJ,OAAOM,MAAM,CAACD,MAAM;gBAAEc,GAAG;YAAE,GAAG;gBAAEA,GAAGT;YAAO,IAAI;YAC9CV,OAAOQ,SAAS,CAACH,MAAM;gBAAEc,GAAG;YAAE,GAAG;gBAAEA,GAAGV;YAAO,IAAI;YAEjDT,OAAOM,MAAM,CAACD,MAAM,CAAC,GAAG,CAAC,IAAI;YAC7BL,OAAOQ,SAAS,CAACH,MAAM;gBAAEc,GAAG;YAAE,GAAG,CAAC,IAAI;YACtCnB,OAAOM,MAAM,CAACD,MAAM;gBAAEc,GAAG;YAAE,GAAG,CAAC,GAAG;gBAAEC,gBAAgB;YAAK,IAAI;YAE7DpB,OAAOM,MAAM,CAACD,MAAM;gBAAEc,GAAG;gBAAGE,GAAG;YAAI,GAAG;gBAAEF,GAAGT;gBAAQW,GAAGZ;YAAO,IAAI;YACjET,OAAOQ,SAAS,CAACH,MAAM;gBAAEc,GAAG;gBAAGE,GAAG;YAAI,GAAG;gBAAEF,GAAGT;gBAAQW,GAAGX;YAAO,IAAI;QACrE;QAEAN,GAAG,mCAAmC;YACrCJ,OAAOM,MAAM,CAACD,MAAM,GAAG;gBAACI;gBAAQC;aAAO,GAAG;YAC1CV,OAAOQ,SAAS,CAACH,MAAM,GAAG;gBAACI;gBAAQG;gBAAQL;aAAQ,GAAG;QACvD;QAEAH,GAAG,mCAAmC;YACrCJ,OAAOsB,KAAK,CAACjB,MAAM,KAAKI,SAAS,kDAAkD;QACpF;QAEAL,GAAG,sDAAsD;YACxDJ,OAAOsB,KAAK,CACXjB,MAAM,MAAM;gBAAEc,GAAGV;YAAO,IACxB,0EACA;YAEDT,OAAOsB,KAAK,CACXjB,MAAM,MAAM;gBAAEc,GAAGV;YAAO,GAAG;gBAAEW,gBAAgB;YAAK,IAClD,mFACA;YAEDpB,OAAOsB,KAAK,CACXjB,MAAM,CAAC,GAAG;gBAAEc,GAAGV;YAAO,IACtB,qDACA;YAEDT,OAAOsB,KAAK,CACXjB,MAAM;gBAAEc,GAAG;oBAAEE,GAAG;gBAAI;YAAC,GAAG;gBAAEF,GAAG;oBAAEE,GAAGZ;gBAAO;YAAE,IAC3C,sDACA;YAEDT,OAAOsB,KAAK,CACXjB,MAAM;gBAAEc,GAAG;gBAAYE,GAAG;YAAQ,GAAG;gBAAEF,GAAGV;YAAO,IACjD,wCACA;YAEDT,OAAOsB,KAAK,CACXjB,MAAM;gBAAEc,GAAG;gBAAYE,GAAG;gBAASE,GAAG;gBAASC,GAAG;YAAQ,GAAG;gBAAEL,GAAGV;YAAO,IACzE,+CACA;QAEF;QAEAL,GAAG,oFAAoF;YACtFJ,OAAOsB,KAAK,CACXjB,MAAM;gBAAEoB,IAAI;YAAY,GAAGf,SAC3B;QAEF;QAEAN,GAAG,mDAAmD;YACrD,MAAMsB,MAAM,SAASA,OAAO;YAC5B,MAAMC,MAAM,SAASA,OAAO;YAE5B3B,OAAOsB,KAAK,CAACjB,MAAM,IAAIqB,OAAOC,MAAM;QACrC;QAEAvB,GAAG,0DAA0D;YAC5DJ,OAAOsB,KAAK,CAACjB,MAAM,GAAGI,QAAQ;gBAAEmB,MAAM;YAAS,IAAI;QACpD;IAED;IAEAzB,SAAS,aAAa,CAAC,EAAEA,QAAQ,EAAEC,EAAE,EAAE;QAEtC,MAAMa,UAAU,SAASA,WAAW;QAEpC,MAAMY,iBAAiB,CAAC;QACxB,MAAMC,YAAYD,eAAeE,QAAQ,GAAG,YAAY;QAExD,MAAMC,aAAa9B,KAAKC,QAAQ;QAEhCC,GAAG,8BAA8B;YAChCJ,OAAOsB,KAAK,CAACU,WAAWzB,UAAU;YAClCP,OAAOsB,KAAK,CAACU,WAAWvB,SAAS;YACjCT,OAAOsB,KAAK,CAACU,WAAWtB,SAAS;YACjCV,OAAOsB,KAAK,CAACU,WAAWrB,WAAW;YACnCX,OAAOsB,KAAK,CAACU,WAAWnB,QAAQ;YAChCb,OAAOsB,KAAK,CAACU,WAAWjB,YAAY;YACpCf,OAAOsB,KAAK,CAACU,WAAW,OAAO;YAC/BhC,OAAOsB,KAAK,CAACU,WAAWhB,MAAM;QAC/B;QAEAZ,GAAG,0BAA0B;YAC5BJ,OAAOsB,KAAK,CAACU,WAAWpB,SAAS;YACjCZ,OAAOsB,KAAK,CAACU,WAAWlB,SAAS;YACjCd,OAAOsB,KAAK,CAACU,WAAWf,UAAU;YAClCjB,OAAOsB,KAAK,CAACU,WAAWF,YAAY;QACrC;QAEA1B,GAAG,6BAA6B;YAC/BJ,OAAOsB,KAAK,CAACU,WAAW,IAAIf,YAAY;YACxCjB,OAAOsB,KAAK,CAACU,WAAW,IAAIF,cAAc;QAC3C;QAEA1B,GAAG,uBAAuB;YACzBJ,OAAOsB,KAAK,CAACU,WAAWpB,OAAOqB,MAAM,CAAC,QAAQ,UAAU;YACxDjC,OAAOsB,KAAK,CAACU,WAAW,CAAC,IAAI,UAAU;YACvChC,OAAOsB,KAAK,CAACU,WAAW;gBAAEb,GAAGT;YAAO,IAAI,qCAAqC;YAC7EV,OAAOsB,KAAK,CAACU,WAAW;gBAAEb,GAAGT;gBAAQW,GAAGZ;YAAO,IAAI;QACpD;QAEAL,GAAG,mDAAmD;YACrD,MAAM8B,UAAU;gBAAEC,SAAS;YAAK;YAEhCnC,OAAOsB,KAAK,CAACU,WAAWpB,OAAOqB,MAAM,CAAC,OAAOC,UAAU,UAAU;YACjElC,OAAOsB,KAAK,CAACU,WAAW,CAAC,GAAGE,UAAU,UAAU;YAChDlC,OAAOsB,KAAK,CAACU,WAAW;gBAAEb,GAAGT;YAAO,GAAGwB,UAAU,8CAA8C;YAC/FlC,OAAOsB,KAAK,CAACU,WAAW;gBAAEb,GAAGT;gBAAQW,GAAGZ;YAAO,GAAGyB,UAAU;QAC7D;QAEA9B,GAAG,4BAA4B;YAC9BJ,OAAOsB,KAAK,CAACU,WAAW;gBAAEzB;aAAS,GAAG,WAAW;YACjDP,OAAOsB,KAAK,CAACU,WAAW;gBAAEzB;gBAASK;aAAQ,GAAG,qBAAqB;YACnEZ,OAAOsB,KAAK,CAACU,WAAW;gBAAEzB;gBAASK;gBAAQF;gBAAQC;aAAU,GAAG,wCAAwC;YAExGX,OAAOsB,KAAK,CAACU,WAAW;gBAAEjB;gBAAWR;aAAS,GAAG,wBAAwB;YACzEP,OAAOsB,KAAK,CAACU,WAAW;gBAAE;gBAAMpB;aAAQ,GAAG,kBAAkB;QAC9D;QAEAR,GAAG,4BAA4B;YAC9B,MAAMa,UAAU,SAASA,WAAW;YACpC,MAAMY,iBAAiB,CAAC;YACxB,MAAMC,YAAYD,eAAeE,QAAQ,GAAG,YAAY;YAExD,MAAMG,UAAU;gBAAEE,UAAU;YAAK;YAEjCpC,OAAOsB,KAAK,CAACU,WAAWzB,SAAS2B,UAAU;YAC3ClC,OAAOsB,KAAK,CAACU,WAAWvB,QAAQyB,UAAU;YAC1ClC,OAAOsB,KAAK,CAACU,WAAWtB,QAAQwB,UAAU;YAC1ClC,OAAOsB,KAAK,CAACU,WAAWrB,UAAUuB,UAAU;YAC5ClC,OAAOsB,KAAK,CAACU,WAAWnB,OAAOqB,UAAU;YACzClC,OAAOsB,KAAK,CAACU,WAAWjB,WAAWmB,UAAU;YAC7ClC,OAAOsB,KAAK,CAACU,WAAW,MAAME,UAAU;YACxClC,OAAOsB,KAAK,CAACU,WAAWhB,KAAKkB,UAAU;YACvClC,OAAOsB,KAAK,CAACU,WAAWpB,QAAQsB,UAAU,aAAa;YACvDlC,OAAOsB,KAAK,CAACU,WAAWlB,QAAQoB,UAAU;YAC1ClC,OAAOsB,KAAK,CAACU,WAAWf,SAASiB,UAAU;YAC3ClC,OAAOsB,KAAK,CAACU,WAAWF,WAAWI,UAAU;YAC7ClC,OAAOsB,KAAK,CAACU,WAAW,IAAIf,WAAWiB,UAAU;YACjDlC,OAAOsB,KAAK,CAACU,WAAW,IAAIF,aAAaI,UAAU;YACnDlC,OAAOsB,KAAK,CAACU,WAAWpB,OAAOqB,MAAM,CAAC,QAAQ;YAC9CjC,OAAOsB,KAAK,CAACU,WAAW,CAAC,GAAGE,UAAU,aAAa;YACnDlC,OAAOsB,KAAK,CAACU,WAAW;gBAAEb,GAAGT;YAAO,GAAGwB,UAAU;QAClD;IAED;AAED,GAAG"}